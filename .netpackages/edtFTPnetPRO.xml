<?xml version="1.0"?>
<doc>
    <assembly>
        <name>edtFTPnetPRO</name>
    </assembly>
    <members>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable.GetDerEncoded">
             Return the DER encoding of the object, null if the DER encoding can not be made.
            
             @return a DER byte array, null otherwise.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Asn1InputStream">
            a general purpose ASN.1 decoder - note: this class differs from the
            others in that it returns null after it has read the last object in
            the stream. If an ASN.1 Null is encountered a Der/BER Null object is
            returned.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1InputStream.#ctor(System.IO.Stream,System.Int32)">
             Create an ASN1InputStream where no DER object will be longer than limit.
            
             @param input stream containing ASN.1 encoded data.
             @param limit maximum size of a DER encoded object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1InputStream.#ctor(System.Byte[])">
             Create an ASN1InputStream based on the input byte array. The length of DER objects in
             the stream is automatically limited to the length of the input array.
            
             @param input array containing ASN.1 encoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1InputStream.BuildObject(System.Int32,System.Int32,System.Int32)">
            build an object given its tag and the number of bytes to construct it from.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Asn1Null">
            A Null object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1Object.FromByteArray(System.Byte[])">
            <summary>Create a base ASN.1 object from a byte array.</summary>
            <param name="data">The byte array to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">If there is a problem parsing the data.</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1Object.FromStream(System.IO.Stream)">
            <summary>Read a base ASN.1 object from a stream.</summary>
            <param name="inStr">The stream to parse.</param>
            <returns>The base ASN.1 object represented by the byte array.</returns>
            <exception cref="T:System.IO.IOException">If there is a problem parsing the data.</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1OctetString.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Octet string from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1OctetString.GetInstance(System.Object)">
             return an Octet string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1OctetString.#ctor(System.Byte[])">
            @param string the octets making up the octet string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence.GetInstance(System.Object)">
             return an Asn1Sequence from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 sequence from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             sequence - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sequences you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicitly true if the object is meant to be explicitly tagged,
                      false otherwise.
             @exception ArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence.Item(System.Int32)">
             return the object at the sequence position indicated by index.
            
             @param index the sequence number (starting at zero) of the object
             @return the object at the sequence position indicated by index.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1Set.GetInstance(System.Object)">
             return an ASN1Set from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1Set.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             Return an ASN1 set from a tagged object. There is a special
             case here, if an object appears to have been explicitly tagged on
             reading but we were expecting it to be implicitly tagged in the
             normal course of events it indicates that we lost the surrounding
             set - so we need to add it back (this will happen if the tagged
             object is a sequence that contains other sequences). If you are
             dealing with implicitly tagged sets you really <b>should</b>
             be using this method.
            
             @param obj the tagged object.
             @param explicitly true if the object is meant to be explicitly tagged
                      false otherwise.
             @exception ArgumentException if the tagged object cannot
                      be converted.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Asn1Set.Item(System.Int32)">
             return the object at the set position indicated by index.
            
             @param index the set number (starting at zero) of the object
             @return the object at the set position indicated by index.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject">
            ASN.1 TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject.#ctor(System.Int32,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject.#ctor(System.Boolean,System.Int32,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            @param explicitly true if the object is explicitly tagged.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject.IsExplicit">
            return whether or not the object may be explicitly tagged.
            <p>
            Note: if the object has been read from an input stream, the only
            time you can be sure if isExplicit is returning the true state of
            affairs is if it returns false. An implicitly tagged object may appear
            to be explicitly tagged, so you need to understand the context under
            which the reading was done as well, see GetObject below.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject.GetObject">
            return whatever was following the tag.
            <p>
            Note: tagged objects are generally context dependent if you're
            trying to extract a tagged object you should be going via the
            appropriate GetInstance method.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject.GetObjectParser(System.Int32,System.Boolean)">
            Return the object held in this tagged object as a parser assuming it has
            the type of the passed in tag. If the object doesn't have a parser
            associated with it, the base object is returned.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerApplicationSpecific">
            Base class for an application specific object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerApplicationSpecific.GetObject">
             Return the enclosed object assuming explicit tagging.
            
             @return  the resulting object
             @throws IOException if reconstruction fails.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerApplicationSpecific.GetObject(System.Int32)">
             Return the enclosed object assuming implicit tagging.
            
             @param derTagNo the type tag that should be applied to the object's contents.
             @return  the resulting object
             @throws IOException if reconstruction fails.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IAsn1String">
            basic interface for Der string objects.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBitString.GetInstance(System.Object)">
             return a Bit string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBitString.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Bit string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBitString.#ctor(System.Byte[],System.Int32)">
            @param data the octets making up the bit string.
            @param padBits the number of extra bits at the end of the string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBitString.GetOctets">
             Return the octets contained in this BIT STRING, checking that this BIT STRING really
             does represent an octet aligned string. Only use this method when the standard you are
             following dictates that the BIT STRING will be octet aligned.
            
             @return a copy of the octet aligned data.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.DerBitString.IntValue">
            @return the value of the bit string as an int (truncating if necessary)
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.BerNull">
            A BER Null object.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerNull">
            A Null object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerOctetString.#ctor(System.Byte[])">
            <param name="str">The octets making up the octet string.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerOctetString.ToBytes(System.Collections.IEnumerable)">
            convert a vector of octet strings into a single byte string
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerOctetString.#ctor(System.Byte[])">
            <param name="str">The octets making up the octet string.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerOctetString.GetEnumerator">
            return the DER octets that make up this string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerSequence.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerSequence.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerSequence.#ctor">
            create an empty sequence
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerSequence.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            create a sequence containing one object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerSequence.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1EncodableVector)">
            create a sequence containing a vector of objects.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerSet">
            A Der encoded set object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerSet.#ctor">
            create an empty set
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerSet.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            @param obj - a single object that makes up the set.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerSet.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1EncodableVector)">
            @param v - a vector of objects making up the set.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerSet.#ctor">
            create an empty sequence
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerSet.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            create a set containing one object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerSet.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1EncodableVector)">
            create a set containing a vector of objects.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.BerTaggedObject">
            BER TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerTaggedObject">
            DER TaggedObject - in ASN.1 notation this is any object preceded by
            a [n] where n is some number - these are assumed to follow the construction
            rules (as with sequences).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Int32,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Boolean,System.Int32,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            @param explicitly true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Int32,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Boolean,System.Int32,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            @param explicitly true if an explicitly tagged object.
            @param tagNo the tag number for this object.
            @param obj the tagged object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.BerTaggedObject.#ctor(System.Int32)">
            create an implicitly tagged object that contains a zero
            length sequence.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerBmpString">
            Der BMPString object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBmpString.GetInstance(System.Object)">
             return a BMP string from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBmpString.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a BMP string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                          be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBmpString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBmpString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBoolean.GetInstance(System.Object)">
             return a bool from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBoolean.GetInstance(System.Boolean)">
            return a DerBoolean from the passed in bool.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerBoolean.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Boolean from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerEnumerated.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerEnumerated.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Enumerated from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerExternal">
            Class representing the DER-type External
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerExternal.#ctor(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,EnterpriseDT.BouncyCastle.Asn1.DerInteger,EnterpriseDT.BouncyCastle.Asn1.Asn1Object,EnterpriseDT.BouncyCastle.Asn1.DerTaggedObject)">
            Creates a new instance of DerExternal
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param externalData The external data in its encoded form.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerExternal.#ctor(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,EnterpriseDT.BouncyCastle.Asn1.DerInteger,EnterpriseDT.BouncyCastle.Asn1.Asn1Object,System.Int32,EnterpriseDT.BouncyCastle.Asn1.Asn1Object)">
            Creates a new instance of DerExternal.
            See X.690 for more informations about the meaning of these parameters
            @param directReference The direct reference or <code>null</code> if not set.
            @param indirectReference The indirect reference or <code>null</code> if not set.
            @param dataValueDescriptor The data value descriptor or <code>null</code> if not set.
            @param encoding The encoding to be used for the external data
            @param externalData The external data
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.DerExternal.Encoding">
            The encoding of the content. Valid values are
            <ul>
            <li><code>0</code> single-ASN1-type</li>
            <li><code>1</code> OCTET STRING</li>
            <li><code>2</code> BIT STRING</li>
            </ul>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerGeneralizedTime">
            Generalized time object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerGeneralizedTime.GetInstance(System.Object)">
             return a generalized time from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerGeneralizedTime.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Generalized Time object from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerGeneralizedTime.#ctor(System.String)">
             The correct format for this is YYYYMMDDHHMMSS[.f]Z, or without the Z
             for local time, or Z+-HHMM on the end, for difference between local
             time and UTC time. The fractional second amount f must consist of at
             least one number with trailing zeroes removed.
            
             @param time the time string.
             @exception ArgumentException if string is an illegal format.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerGeneralizedTime.#ctor(System.DateTime)">
            base constructor from a local time object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerGeneralizedTime.GetTime">
            return the time - always in the form of
             YYYYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyyyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.DerGeneralizedTime.TimeString">
            Return the time.
            @return The time string as it appeared in the encoded object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerGraphicString.GetInstance(System.Object)">
             return a Graphic String from the passed in object
            
             @param obj a DerGraphicString or an object that can be converted into one.
             @exception IllegalArgumentException if the object cannot be converted.
             @return a DerGraphicString instance, or null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerGraphicString.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Graphic String from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
             @return a DerGraphicString instance, or null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerGraphicString.#ctor(System.Byte[])">
            basic constructor - with bytes.
            @param string the byte encoding of the characters making up the string.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerIA5String">
            Der IA5String object - this is an ascii string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerIA5String.GetInstance(System.Object)">
             return a IA5 string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerIA5String.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an IA5 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerIA5String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerIA5String.#ctor(System.String)">
            basic constructor - without validation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerIA5String.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in an IA5String.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerIA5String.IsIA5String(System.String)">
             return true if the passed in String can be represented without
             loss as an IA5String, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerInteger.GetInstance(System.Object)">
             return an integer from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerInteger.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Integer from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.DerInteger.PositiveValue">
            in some cases positive values Get crammed into a space,
            that's not quite big enough...
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerNumericString">
            Der NumericString object - this is an ascii string of characters {0,1,2,3,4,5,6,7,8,9, }.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerNumericString.GetInstance(System.Object)">
             return a Numeric string from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerNumericString.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an Numeric string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerNumericString.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerNumericString.#ctor(System.String)">
            basic constructor -  without validation..
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerNumericString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a NumericString.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerNumericString.IsNumericString(System.String)">
             Return true if the string can be represented as a NumericString ('0'..'9', ' ')
            
             @param str string to validate.
             @return true if numeric, fale otherwise.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier.GetInstance(System.Object)">
             return an Oid from the passed in object
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an object Identifier from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier.On(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            Return  true if this oid is an extension of the passed in branch, stem.
            @param stem the arc or branch that is a possible parent.
            @return  true if the branch is on the passed in stem, false otherwise.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerPrintableString">
            Der PrintableString object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerPrintableString.GetInstance(System.Object)">
             return a printable string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerPrintableString.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Printable string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerPrintableString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerPrintableString.#ctor(System.String)">
            basic constructor - this does not validate the string
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerPrintableString.#ctor(System.String,System.Boolean)">
             Constructor with optional validation.
            
             @param string the base string to wrap.
             @param validate whether or not to check the string.
             @throws ArgumentException if validate is true and the string
             contains characters that should not be in a PrintableString.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerPrintableString.IsPrintableString(System.String)">
             return true if the passed in String can be represented without
             loss as a PrintableString, false otherwise.
            
             @return true if in printable set, false otherwise.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerT61String">
            Der T61String (also the teletex string) - 8-bit characters
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerT61String.GetInstance(System.Object)">
             return a T61 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerT61String.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an T61 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerT61String.#ctor(System.Byte[])">
            basic constructor - with bytes.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerT61String.#ctor(System.String)">
            basic constructor - with string.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerUniversalString">
            Der UniversalString object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUniversalString.GetInstance(System.Object)">
             return a Universal string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUniversalString.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Universal string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUniversalString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerUtcTime">
            UTC time object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtcTime.GetInstance(System.Object)">
             return an UTC Time from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtcTime.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an UTC Time from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtcTime.#ctor(System.String)">
            The correct format for this is YYMMDDHHMMSSZ (it used to be that seconds were
            never encoded. When you're creating one of these objects from scratch, that's
            what you want to use, otherwise we'll try to deal with whatever Gets read from
            the input stream... (this is why the input format is different from the GetTime()
            method output).
            <p>
            @param time the time string.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtcTime.#ctor(System.DateTime)">
            base constructor from a DateTime object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtcTime.ToDateTime">
             return the time as a date based on whatever a 2 digit year will return. For
             standardised processing use ToAdjustedDateTime().
            
             @return the resulting date
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtcTime.ToAdjustedDateTime">
             return the time as an adjusted date
             in the range of 1950 - 2049.
            
             @return a date in the range of 1950 to 2049.
             @exception ParseException if the date string cannot be parsed.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.DerUtcTime.TimeString">
            return the time - always in the form of
             YYMMDDhhmmssGMT(+hh:mm|-hh:mm).
            <p>
            Normally in a certificate we would expect "Z" rather than "GMT",
            however adding the "GMT" means we can just use:
            <pre>
                dateF = new SimpleDateFormat("yyMMddHHmmssz");
            </pre>
            To read in the time and Get a date which is compatible with our local
            time zone.</p>
            <p>
            <b>Note:</b> In some cases, due to the local date processing, this
            may lead to unexpected results. If you want to stick the normal
            convention of 1950 to 2049 use the GetAdjustedTime() method.</p>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.DerUtcTime.AdjustedTimeString">
            <summary>
            Return a time string as an adjusted date with a 4 digit year.
            This goes in the range of 1950 - 2049.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerUtf8String">
            Der UTF8String object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtf8String.GetInstance(System.Object)">
             return an UTF8 string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtf8String.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an UTF8 string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtf8String.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerUtf8String.#ctor(System.String)">
            basic constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerVideotexString.GetInstance(System.Object)">
             return a Videotex String from the passed in object
            
             @param obj a DERVideotexString or an object that can be converted into one.
             @exception IllegalArgumentException if the object cannot be converted.
             @return a DERVideotexString instance, or null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerVideotexString.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Videotex String from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the tagged object cannot
                           be converted.
             @return a DERVideotexString instance, or null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerVideotexString.#ctor(System.Byte[])">
            basic constructor - with bytes.
            @param string the byte encoding of the characters making up the string.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.DerVisibleString">
            Der VisibleString object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerVisibleString.GetInstance(System.Object)">
             return a Visible string from the passed in object.
            
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerVisibleString.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a Visible string from a tagged object.
            
             @param obj the tagged object holding the object we want
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the tagged object cannot
                           be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerVisibleString.#ctor(System.Byte[])">
            basic constructor - byte encoded string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.DerVisibleString.#ctor(System.String)">
            basic constructor
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IAsn1Choice">
            Marker interface for CHOICE objects - if you implement this in a roll-your-own
            object, any attempt to tag the object implicitly will convert the tag to an
            explicit one as the encoding rules require.
            <p>
            If you use this interface your class should also implement the getInstance
            pattern which takes a tag object and the tagging mode used. 
            </p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.OidTokenizer">
            class for breaking up an Oid into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.GetByOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.GetName(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Anssi.AnssiNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CAKeyUpdAnnContent.ToAsn1Object">
            <pre>
            CAKeyUpdAnnContent ::= SEQUENCE {
                                        oldWithNew   CmpCertificate, -- old pub signed with new priv
                                        newWithOld   CmpCertificate, -- new pub signed with old priv
                                        newWithNew   CmpCertificate  -- new pub signed with new priv
             }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CertConfirmContent.ToAsn1Object">
            <pre>
            CertConfirmContent ::= SEQUENCE OF CertStatus
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CertifiedKeyPair.ToAsn1Object">
            <pre>
            CertifiedKeyPair ::= SEQUENCE {
                                             certOrEncCert       CertOrEncCert,
                                             privateKey      [0] EncryptedValue      OPTIONAL,
                                             -- see [CRMF] for comment on encoding
                                             publicationInfo [1] PKIPublicationInfo  OPTIONAL
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CertOrEncCert.ToAsn1Object">
            <pre>
            CertOrEncCert ::= CHOICE {
                                 certificate     [0] CMPCertificate,
                                 encryptedCert   [1] EncryptedValue
                      }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CertRepMessage.ToAsn1Object">
            <pre>
            CertRepMessage ::= SEQUENCE {
                                     caPubs       [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                        OPTIONAL,
                                     response         SEQUENCE OF CertResponse
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CertResponse.ToAsn1Object">
            <pre>
            CertResponse ::= SEQUENCE {
                                       certReqId           INTEGER,
                                       -- to match this response with corresponding request (a value
                                       -- of -1 is to be used if certReqId is not specified in the
                                       -- corresponding request)
                                       status              PKIStatusInfo,
                                       certifiedKeyPair    CertifiedKeyPair    OPTIONAL,
                                       rspInfo             OCTET STRING        OPTIONAL
                                       -- analogous to the id-regInfo-utf8Pairs string defined
                                       -- for regInfo in CertReqMsg [CRMF]
                        }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CertStatus.ToAsn1Object">
            <pre>
            CertStatus ::= SEQUENCE {
                              certHash    OCTET STRING,
                              -- the hash of the certificate, using the same hash algorithm
                              -- as is used to create and verify the certificate signature
                              certReqId   INTEGER,
                              -- to match this confirmation with the corresponding req/rep
                              statusInfo  PKIStatusInfo OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.Challenge.ToAsn1Object">
             <pre>
             Challenge ::= SEQUENCE {
                             owf                 AlgorithmIdentifier  OPTIONAL,
            
                             -- MUST be present in the first Challenge; MAY be omitted in
                             -- any subsequent Challenge in POPODecKeyChallContent (if
                             -- omitted, then the owf used in the immediately preceding
                             -- Challenge is to be used).
            
                             witness             OCTET STRING,
                             -- the result of applying the one-way function (owf) to a
                             -- randomly-generated INTEGER, A.  [Note that a different
                             -- INTEGER MUST be used for each Challenge.]
                             challenge           OCTET STRING
                             -- the encryption (under the public key for which the cert.
                             -- request is being made) of Rand, where Rand is specified as
                             --   Rand ::= SEQUENCE {
                             --      int      INTEGER,
                             --       - the randomly-generated INTEGER A (above)
                             --      sender   GeneralName
                             --       - the sender's name (as included in PKIHeader)
                             --   }
                  }
             </pre>
             @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CmpCertificate.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.AttributeCertificate)">
            Note: the addition of attribute certificates is a BC extension.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CmpCertificate.ToAsn1Object">
             <pre>
             CMPCertificate ::= CHOICE {
                        x509v3PKCert        Certificate
                        x509v2AttrCert      [1] AttributeCertificate
              }
             </pre>
             Note: the addition of attribute certificates is a BC extension.
            
             @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.CrlAnnContent.ToAsn1Object">
            <pre>
            CrlAnnContent ::= SEQUENCE OF CertificateList
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.ErrorMsgContent.ToAsn1Object">
            <pre>
            ErrorMsgContent ::= SEQUENCE {
                                   pKIStatusInfo          PKIStatusInfo,
                                   errorCode              INTEGER           OPTIONAL,
                                   -- implementation-specific error codes
                                   errorDetails           PKIFreeText       OPTIONAL
                                   -- implementation-specific error details
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.GenMsgContent.ToAsn1Object">
            <pre>
            GenMsgContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.GenRepContent.ToAsn1Object">
            <pre>
            GenRepContent ::= SEQUENCE OF InfoTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cmp.InfoTypeAndValue">
             Example InfoTypeAndValue contents include, but are not limited
             to, the following (un-comment in this ASN.1 module and use as
             appropriate for a given environment):
             <pre>
               id-it-caProtEncCert    OBJECT IDENTIFIER ::= {id-it 1}
                  CAProtEncCertValue      ::= CMPCertificate
               id-it-signKeyPairTypes OBJECT IDENTIFIER ::= {id-it 2}
                 SignKeyPairTypesValue   ::= SEQUENCE OF AlgorithmIdentifier
               id-it-encKeyPairTypes  OBJECT IDENTIFIER ::= {id-it 3}
                 EncKeyPairTypesValue    ::= SEQUENCE OF AlgorithmIdentifier
               id-it-preferredSymmAlg OBJECT IDENTIFIER ::= {id-it 4}
                  PreferredSymmAlgValue   ::= AlgorithmIdentifier
               id-it-caKeyUpdateInfo  OBJECT IDENTIFIER ::= {id-it 5}
                  CAKeyUpdateInfoValue    ::= CAKeyUpdAnnContent
               id-it-currentCRL       OBJECT IDENTIFIER ::= {id-it 6}
                  CurrentCRLValue         ::= CertificateList
               id-it-unsupportedOIDs  OBJECT IDENTIFIER ::= {id-it 7}
                  UnsupportedOIDsValue    ::= SEQUENCE OF OBJECT IDENTIFIER
               id-it-keyPairParamReq  OBJECT IDENTIFIER ::= {id-it 10}
                  KeyPairParamReqValue    ::= OBJECT IDENTIFIER
               id-it-keyPairParamRep  OBJECT IDENTIFIER ::= {id-it 11}
                  KeyPairParamRepValue    ::= AlgorithmIdentifer
               id-it-revPassphrase    OBJECT IDENTIFIER ::= {id-it 12}
                  RevPassphraseValue      ::= EncryptedValue
               id-it-implicitConfirm  OBJECT IDENTIFIER ::= {id-it 13}
                  ImplicitConfirmValue    ::= NULL
               id-it-confirmWaitTime  OBJECT IDENTIFIER ::= {id-it 14}
                  ConfirmWaitTimeValue    ::= GeneralizedTime
               id-it-origPKIMessage   OBJECT IDENTIFIER ::= {id-it 15}
                  OrigPKIMessageValue     ::= PKIMessages
               id-it-suppLangTags     OBJECT IDENTIFIER ::= {id-it 16}
                  SuppLangTagsValue       ::= SEQUENCE OF UTF8String
            
             where
            
               id-pkix OBJECT IDENTIFIER ::= {
                  iso(1) identified-organization(3)
                  dod(6) internet(1) security(5) mechanisms(5) pkix(7)}
             and
                  id-it   OBJECT IDENTIFIER ::= {id-pkix 4}
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.InfoTypeAndValue.ToAsn1Object">
            <pre>
            InfoTypeAndValue ::= SEQUENCE {
                                    infoType               OBJECT IDENTIFIER,
                                    infoValue              ANY DEFINED BY infoType  OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.KeyRecRepContent.ToAsn1Object">
            <pre>
            KeyRecRepContent ::= SEQUENCE {
                                    status                  PKIStatusInfo,
                                    newSigCert          [0] CMPCertificate OPTIONAL,
                                    caCerts             [1] SEQUENCE SIZE (1..MAX) OF
                                                                      CMPCertificate OPTIONAL,
                                    keyPairHist         [2] SEQUENCE SIZE (1..MAX) OF
                                                                      CertifiedKeyPair OPTIONAL
                         }
            </pre> 
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.OobCertHash.ToAsn1Object">
            <pre>
            OobCertHash ::= SEQUENCE {
                                 hashAlg     [0] AlgorithmIdentifier     OPTIONAL,
                                 certId      [1] CertId                  OPTIONAL,
                                 hashVal         BIT STRING
                                 -- hashVal is calculated over the Der encoding of the
                                 -- self-signed certificate with the identifier certID.
                  }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PbmParameter.ToAsn1Object">
            <pre>
             PbmParameter ::= SEQUENCE {
                                   salt                OCTET STRING,
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this string to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   owf                 AlgorithmIdentifier,
                                   -- AlgId for a One-Way Function (SHA-1 recommended)
                                   iterationCount      INTEGER,
                                   -- number of times the OWF is applied
                                   -- note:  implementations MAY wish to limit acceptable sizes
                                   -- of this integer to values appropriate for their environment
                                   -- in order to reduce the risk of denial-of-service attacks
                                   mac                 AlgorithmIdentifier
                                   -- the MAC AlgId (e.g., DES-MAC, Triple-DES-MAC [PKCS11],
               }   -- or HMAC [RFC2104, RFC2202])
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiBody.#ctor(System.Int32,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            Creates a new PkiBody.
            @param type one of the TYPE_* constants
            @param content message content
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiBody.ToAsn1Object">
            <pre>
            PkiBody ::= CHOICE {       -- message-specific body elements
                   ir       [0]  CertReqMessages,        --Initialization Request
                   ip       [1]  CertRepMessage,         --Initialization Response
                   cr       [2]  CertReqMessages,        --Certification Request
                   cp       [3]  CertRepMessage,         --Certification Response
                   p10cr    [4]  CertificationRequest,   --imported from [PKCS10]
                   popdecc  [5]  POPODecKeyChallContent, --pop Challenge
                   popdecr  [6]  POPODecKeyRespContent,  --pop Response
                   kur      [7]  CertReqMessages,        --Key Update Request
                   kup      [8]  CertRepMessage,         --Key Update Response
                   krr      [9]  CertReqMessages,        --Key Recovery Request
                   krp      [10] KeyRecRepContent,       --Key Recovery Response
                   rr       [11] RevReqContent,          --Revocation Request
                   rp       [12] RevRepContent,          --Revocation Response
                   ccr      [13] CertReqMessages,        --Cross-Cert. Request
                   ccp      [14] CertRepMessage,         --Cross-Cert. Response
                   ckuann   [15] CAKeyUpdAnnContent,     --CA Key Update Ann.
                   cann     [16] CertAnnContent,         --Certificate Ann.
                   rann     [17] RevAnnContent,          --Revocation Ann.
                   crlann   [18] CRLAnnContent,          --CRL Announcement
                   pkiconf  [19] PKIConfirmContent,      --Confirmation
                   nested   [20] NestedMessageContent,   --Nested Message
                   genm     [21] GenMsgContent,          --General Message
                   genp     [22] GenRepContent,          --General Response
                   error    [23] ErrorMsgContent,        --Error Message
                   certConf [24] CertConfirmContent,     --Certificate confirm
                   pollReq  [25] PollReqContent,         --Polling request
                   pollRep  [26] PollRepContent          --Polling response
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiConfirmContent.ToAsn1Object">
            <pre>
            PkiConfirmContent ::= NULL
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiFailureInfo">
            <pre>
            PKIFailureInfo ::= BIT STRING {
            badAlg               (0),
              -- unrecognized or unsupported Algorithm Identifier
            badMessageCheck      (1), -- integrity check failed (e.g., signature did not verify)
            badRequest           (2),
              -- transaction not permitted or supported
            badTime              (3), -- messageTime was not sufficiently close to the system time, as defined by local policy
            badCertId            (4), -- no certificate could be found matching the provided criteria
            badDataFormat        (5),
              -- the data submitted has the wrong format
            wrongAuthority       (6), -- the authority indicated in the request is different from the one creating the response token
            incorrectData        (7), -- the requester's data is incorrect (for notary services)
            missingTimeStamp     (8), -- when the timestamp is missing but should be there (by policy)
            badPOP               (9)  -- the proof-of-possession failed
            certRevoked         (10),
            certConfirmed       (11),
            wrongIntegrity      (12),
            badRecipientNonce   (13), 
            timeNotAvailable    (14),
              -- the TSA's time source is not available
            unacceptedPolicy    (15),
              -- the requested TSA policy is not supported by the TSA
            unacceptedExtension (16),
              -- the requested extension is not supported by the TSA
            addInfoNotAvailable (17)
              -- the additional information requested could not be understood
              -- or is not available
            badSenderNonce      (18),
            badCertTemplate     (19),
            signerNotTrusted    (20),
            transactionIdInUse  (21),
            unsupportedVersion  (22),
            notAuthorized       (23),
            systemUnavail       (24),    
            systemFailure       (25),
              -- the request cannot be handled due to system failure
            duplicateCertReq    (26) 
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiFailureInfo.#ctor(System.Int32)">
            Basic constructor.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiFreeText.ToAsn1Object">
            <pre>
            PkiFreeText ::= SEQUENCE SIZE (1..MAX) OF UTF8String
            </pre>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiFreeText.Size">
             Return the number of string elements present.
            
             @return number of elements present.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiFreeText.Item(System.Int32)">
             Return the UTF8STRING at index.
            
             @param index index of the string of interest
             @return the string at index.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiHeader.NULL_NAME">
            Value for a "null" recipient or sender.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiHeader.ToAsn1Object">
            <pre>
             PkiHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiHeaderBuilder.Build">
            <pre>
             PKIHeader ::= SEQUENCE {
                       pvno                INTEGER     { cmp1999(1), cmp2000(2) },
                       sender              GeneralName,
                       -- identifies the sender
                       recipient           GeneralName,
                       -- identifies the intended recipient
                       messageTime     [0] GeneralizedTime         OPTIONAL,
                       -- time of production of this message (used when sender
                       -- believes that the transport will be "suitable"; i.e.,
                       -- that the time will still be meaningful upon receipt)
                       protectionAlg   [1] AlgorithmIdentifier     OPTIONAL,
                       -- algorithm used for calculation of protection bits
                       senderKID       [2] KeyIdentifier           OPTIONAL,
                       recipKID        [3] KeyIdentifier           OPTIONAL,
                       -- to identify specific keys used for protection
                       transactionID   [4] OCTET STRING            OPTIONAL,
                       -- identifies the transaction; i.e., this will be the same in
                       -- corresponding request, response, certConf, and PKIConf
                       -- messages
                       senderNonce     [5] OCTET STRING            OPTIONAL,
                       recipNonce      [6] OCTET STRING            OPTIONAL,
                       -- nonces used to provide replay protection, senderNonce
                       -- is inserted by the creator of this message; recipNonce
                       -- is a nonce previously inserted in a related message by
                       -- the intended recipient of this message
                       freeText        [7] PKIFreeText             OPTIONAL,
                       -- this may be used to indicate context-specific instructions
                       -- (this field is intended for human consumption)
                       generalInfo     [8] SEQUENCE SIZE (1..MAX) OF
                                            InfoTypeAndValue     OPTIONAL
                       -- this may be used to convey context-specific information
                       -- (this field not primarily intended for human consumption)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiMessage.#ctor(EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiHeader,EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiBody,EnterpriseDT.BouncyCastle.Asn1.DerBitString,EnterpriseDT.BouncyCastle.Asn1.Cmp.CmpCertificate[])">
             Creates a new PkiMessage.
            
             @param header message header
             @param body message body
             @param protection message protection (may be null)
             @param extraCerts extra certificates (may be null)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiMessage.ToAsn1Object">
            <pre>
            PkiMessage ::= SEQUENCE {
                             header           PKIHeader,
                             body             PKIBody,
                             protection   [0] PKIProtection OPTIONAL,
                             extraCerts   [1] SEQUENCE SIZE (1..MAX) OF CMPCertificate
                                                                                OPTIONAL
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiMessages.ToAsn1Object">
            <pre>
            PkiMessages ::= SEQUENCE SIZE (1..MAX) OF PkiMessage
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32)">
            @param status
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiStatusInfo.#ctor(System.Int32,EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiFreeText)">
            @param status
            @param statusString
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PkiStatusInfo.ToAsn1Object">
             <pre>
             PkiStatusInfo ::= SEQUENCE {
                 status        PKIStatus,                (INTEGER)
                 statusString  PkiFreeText     OPTIONAL,
                 failInfo      PkiFailureInfo  OPTIONAL  (BIT STRING)
             }
            
             PKIStatus:
               granted                (0), -- you got exactly what you asked for
               grantedWithMods        (1), -- you got something like what you asked for
               rejection              (2), -- you don't get it, more information elsewhere in the message
               waiting                (3), -- the request body part has not yet been processed, expect to hear more later
               revocationWarning      (4), -- this message contains a warning that a revocation is imminent
               revocationNotification (5), -- notification that a revocation has occurred
               keyUpdateWarning       (6)  -- update already done for the oldCertId specified in CertReqMsg
            
             PkiFailureInfo:
               badAlg           (0), -- unrecognized or unsupported Algorithm Identifier
               badMessageCheck  (1), -- integrity check failed (e.g., signature did not verify)
               badRequest       (2), -- transaction not permitted or supported
               badTime          (3), -- messageTime was not sufficiently close to the system time, as defined by local policy
               badCertId        (4), -- no certificate could be found matching the provided criteria
               badDataFormat    (5), -- the data submitted has the wrong format
               wrongAuthority   (6), -- the authority indicated in the request is different from the one creating the response token
               incorrectData    (7), -- the requester's data is incorrect (for notary services)
               missingTimeStamp (8), -- when the timestamp is missing but should be there (by policy)
               badPOP           (9)  -- the proof-of-possession failed
            
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PollRepContent.ToAsn1Object">
            <pre>
            PollRepContent ::= SEQUENCE OF SEQUENCE {
                    certReqId              INTEGER,
                    checkAfter             INTEGER,  -- time in seconds
                    reason                 PKIFreeText OPTIONAL
                }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PollReqContent.ToAsn1Object">
            <pre>
            PollReqContent ::= SEQUENCE OF SEQUENCE {
                                   certReqId              INTEGER
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PopoDecKeyChallContent.ToAsn1Object">
            <pre>
            PopoDecKeyChallContent ::= SEQUENCE OF Challenge
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.PopoDecKeyRespContent.ToAsn1Object">
            <pre>
            PopoDecKeyRespContent ::= SEQUENCE OF INTEGER
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.ProtectedPart.ToAsn1Object">
            <pre>
            ProtectedPart ::= SEQUENCE {
                               header    PKIHeader,
                               body      PKIBody
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.RevAnnContent.ToAsn1Object">
            <pre>
            RevAnnContent ::= SEQUENCE {
                  status              PKIStatus,
                  certId              CertId,
                  willBeRevokedAt     GeneralizedTime,
                  badSinceDate        GeneralizedTime,
                  crlDetails          Extensions  OPTIONAL
                   -- extra CRL details (e.g., crl number, reason, location, etc.)
            }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.RevDetails.ToAsn1Object">
            <pre>
            RevDetails ::= SEQUENCE {
                             certDetails         CertTemplate,
                              -- allows requester to specify as much as they can about
                              -- the cert. for which revocation is requested
                              -- (e.g., for cases in which serialNumber is not available)
                              crlEntryDetails     Extensions       OPTIONAL
                              -- requested crlEntryExtensions
                        }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.RevRepContent.ToAsn1Object">
            <pre>
            RevRepContent ::= SEQUENCE {
                   status       SEQUENCE SIZE (1..MAX) OF PKIStatusInfo,
                   -- in same order as was sent in RevReqContent
                   revCerts [0] SEQUENCE SIZE (1..MAX) OF CertId OPTIONAL,
                   -- IDs for which revocation was requested
                   -- (same order as status)
                   crls     [1] SEQUENCE SIZE (1..MAX) OF CertificateList OPTIONAL
                   -- the resulting CRLs (there may be more than one)
              }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cmp.RevReqContent.ToAsn1Object">
            <pre>
            RevReqContent ::= SEQUENCE OF RevDetails
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.Attribute.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.Attribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attribute ::= SEQUENCE {
                attrType OBJECT IDENTIFIER,
                attrValues SET OF AttributeValue
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.Attributes.ToAsn1Object">
            <pre>
            Attributes ::=
              SET SIZE(1..MAX) OF Attribute -- according to RFC 5652
            </pre>
            @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.AttributeTable.GetAll(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             Return all the attributes matching the OBJECT IDENTIFIER oid. The vector will be
             empty if there are no attributes of the required type present.
            
             @param oid type of attribute required.
             @return a vector of all the attributes found of type oid.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.AttributeTable.Add(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
             Return a new table with the passed in attribute added.
            
             @param attrType
             @param attrValue
             @return
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Cms.AttributeTable.Item(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            <summary>Return the first attribute matching the given OBJECT IDENTIFIER</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.AuthenticatedData.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthenticatedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.AuthenticatedData.GetInstance(System.Object)">
             return an AuthenticatedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.AuthenticatedData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             AuthenticatedData ::= SEQUENCE {
                   version CMSVersion,
                   originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                   recipientInfos RecipientInfos,
                   macAlgorithm MessageAuthenticationCodeAlgorithm,
                   digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
                   encapContentInfo EncapsulatedContentInfo,
                   authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
                   mac MessageAuthenticationCode,
                   unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }
            
             AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             MessageAuthenticationCode ::= OCTET STRING
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cms.AuthenticatedDataParser">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             AuthenticatedData ::= SEQUENCE {
                   version CMSVersion,
                   originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                   recipientInfos RecipientInfos,
                   macAlgorithm MessageAuthenticationCodeAlgorithm,
                   digestAlgorithm [1] DigestAlgorithmIdentifier OPTIONAL,
                   encapContentInfo EncapsulatedContentInfo,
                   authAttrs [2] IMPLICIT AuthAttributes OPTIONAL,
                   mac MessageAuthenticationCode,
                   unauthAttrs [3] IMPLICIT UnauthAttributes OPTIONAL }
            
             AuthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             UnauthAttributes ::= SET SIZE (1..MAX) OF Attribute
            
             MessageAuthenticationCode ::= OCTET STRING
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.AuthEnvelopedData.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthEnvelopedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.AuthEnvelopedData.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.AuthEnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            AuthEnvelopedData ::= SEQUENCE {
              version CMSVersion,
              originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
              recipientInfos RecipientInfos,
              authEncryptedContentInfo EncryptedContentInfo,
              authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,
              mac MessageAuthenticationCode,
              unauthAttrs [2] IMPLICIT UnauthAttributes OPTIONAL }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cms.AuthEnvelopedDataParser">
            Produce an object suitable for an Asn1OutputStream.
            
            <pre>
            AuthEnvelopedData ::= SEQUENCE {
              version CMSVersion,
              originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
              recipientInfos RecipientInfos,
              authEncryptedContentInfo EncryptedContentInfo,
              authAttrs [1] IMPLICIT AuthAttributes OPTIONAL,
              mac MessageAuthenticationCode,
              unauthAttrs [2] IMPLICIT UnauthAttributes OPTIONAL }
            </pre>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.Cms.CmsObjectIdentifiers.id_ri">
            The other Revocation Info arc
            id-ri OBJECT IDENTIFIER ::= { iso(1) identified-organization(3)
                                              dod(6) internet(1) security(5) mechanisms(5) pkix(7) ri(16) }
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cms.CompressedData">
            RFC 3274 - CMS Compressed Data.
            <pre>
            CompressedData ::= Sequence {
             version CMSVersion,
             compressionAlgorithm CompressionAlgorithmIdentifier,
             encapContentInfo EncapsulatedContentInfo
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.CompressedData.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a CompressedData object from a tagged object.
            
             @param ato the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.CompressedData.GetInstance(System.Object)">
             return a CompressedData object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cms.CompressedDataParser">
            RFC 3274 - CMS Compressed Data.
            <pre>
            CompressedData ::= SEQUENCE {
             version CMSVersion,
             compressionAlgorithm CompressionAlgorithmIdentifier,
             encapContentInfo EncapsulatedContentInfo
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.ContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= Sequence {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cms.ContentInfoParser">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= SEQUENCE {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.EncryptedContentInfo.GetInstance(System.Object)">
             return an EncryptedContentInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.EncryptedContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EncryptedContentInfo ::= Sequence {
                contentType ContentType,
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cms.EncryptedContentInfoParser">
            <pre>
            EncryptedContentInfo ::= SEQUENCE {
                contentType ContentType,
                contentEncryptionAlgorithm ContentEncryptionAlgorithmIdentifier,
                encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.EncryptedData.ToAsn1Object">
            <pre>
                  EncryptedData ::= SEQUENCE {
                                version CMSVersion,
                                encryptedContentInfo EncryptedContentInfo,
                                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.EnvelopedData.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an EnvelopedData object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.EnvelopedData.GetInstance(System.Object)">
             return an EnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.EnvelopedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EnvelopedData ::= Sequence {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cms.EnvelopedDataParser">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            EnvelopedData ::= SEQUENCE {
                version CMSVersion,
                originatorInfo [0] IMPLICIT OriginatorInfo OPTIONAL,
                recipientInfos RecipientInfos,
                encryptedContentInfo EncryptedContentInfo,
                unprotectedAttrs [1] IMPLICIT UnprotectedAttributes OPTIONAL
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KekIdentifier.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KekIdentifier object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KekIdentifier.GetInstance(System.Object)">
             return a KekIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KekIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekIdentifier ::= Sequence {
                keyIdentifier OCTET STRING,
                date GeneralizedTime OPTIONAL,
                other OtherKeyAttribute OPTIONAL
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KekRecipientInfo.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KekRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KekRecipientInfo.GetInstance(System.Object)">
             return a KekRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KekRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KekRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 4
                kekID KekIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an KeyAgreeRecipientIdentifier object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.GetInstance(System.Object)">
             return an KeyAgreeRecipientIdentifier object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KeyAgreeRecipientIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyAgreeRecipientIdentifier ::= CHOICE {
                issuerAndSerialNumber IssuerAndSerialNumber,
                rKeyId [0] IMPLICIT RecipientKeyIdentifier
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a KeyAgreeRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.GetInstance(System.Object)">
             return a KeyAgreeRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KeyAgreeRecipientInfo.ToAsn1Object">
                     * Produce an object suitable for an Asn1OutputStream.
                     * <pre>
                     * KeyAgreeRecipientInfo ::= Sequence {
                     *     version CMSVersion,  -- always set to 3
                     *     originator [0] EXPLICIT OriginatorIdentifierOrKey,
                     *     ukm [1] EXPLICIT UserKeyingMaterial OPTIONAL,
                     *     keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                     *     recipientEncryptedKeys RecipientEncryptedKeys
                     * }
            		 *
            		 * UserKeyingMaterial ::= OCTET STRING
                     * </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.GetInstance(System.Object)">
             return a KeyTransRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.KeyTransRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            KeyTransRecipientInfo ::= Sequence {
                version CMSVersion,  -- always set to 0 or 2
                rid RecipientIdentifier,
                keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.MetaData.ToAsn1Object">
            <pre>
            MetaData ::= SEQUENCE {
              hashProtected        BOOLEAN,
              fileName             UTF8String OPTIONAL,
              mediaType            IA5String OPTIONAL,
              otherMetaData        Attributes OPTIONAL
            }
            </pre>
            @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorIdentifierOrKey object from a tagged object.
            
             @param o the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.GetInstance(System.Object)">
             return an OriginatorIdentifierOrKey object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OriginatorIdentifierOrKey.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             OriginatorIdentifierOrKey ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier,
                 originatorKey [1] OriginatorPublicKey
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OriginatorInfo.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OriginatorInfo.GetInstance(System.Object)">
             return an OriginatorInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OriginatorInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorInfo ::= Sequence {
                certs [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OriginatorPublicKey.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an OriginatorPublicKey object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OriginatorPublicKey.GetInstance(System.Object)">
             return an OriginatorPublicKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OriginatorPublicKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OriginatorPublicKey ::= Sequence {
                algorithm AlgorithmIdentifier,
                publicKey BIT STRING
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OtherKeyAttribute.GetInstance(System.Object)">
             return an OtherKeyAttribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OtherKeyAttribute.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherKeyAttribute ::= Sequence {
                keyAttrId OBJECT IDENTIFIER,
                keyAttr ANY DEFINED BY keyAttrId OPTIONAL
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OtherRecipientInfo.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a OtherRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OtherRecipientInfo.GetInstance(System.Object)">
             return a OtherRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OtherRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OtherRecipientInfo ::= Sequence {
               oriType OBJECT IDENTIFIER,
               oriValue ANY DEFINED BY oriType }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a OtherRevocationInfoFormat object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception IllegalArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.GetInstance(System.Object)">
             return a OtherRevocationInfoFormat object from the given object.
            
             @param obj the object we want converted.
             @exception IllegalArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.OtherRevocationInfoFormat.ToAsn1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            OtherRevocationInfoFormat ::= SEQUENCE {
                 otherRevInfoFormat OBJECT IDENTIFIER,
                 otherRevInfo ANY DEFINED BY otherRevInfoFormat }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a PasswordRecipientInfo object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param explicitly true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.GetInstance(System.Object)">
             return a PasswordRecipientInfo object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.PasswordRecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            PasswordRecipientInfo ::= Sequence {
              version CMSVersion,   -- Always set to 0
              keyDerivationAlgorithm [0] KeyDerivationAlgorithmIdentifier
                                        OPTIONAL,
             keyEncryptionAlgorithm KeyEncryptionAlgorithmIdentifier,
             encryptedKey EncryptedKey }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an RecipientEncryptedKey object from a tagged object.
            
             @param obj the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.GetInstance(System.Object)">
             return a RecipientEncryptedKey object from the given object.
            
             @param obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.RecipientEncryptedKey.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientEncryptedKey ::= SEQUENCE {
                rid KeyAgreeRecipientIdentifier,
                encryptedKey EncryptedKey
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.RecipientIdentifier.GetInstance(System.Object)">
             return a RecipientIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.RecipientIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.RecipientInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RecipientInfo ::= CHOICE {
                ktri KeyTransRecipientInfo,
                kari [1] KeyAgreeRecipientInfo,
                kekri [2] KekRecipientInfo,
                pwri [3] PasswordRecipientInfo,
                ori [4] OtherRecipientInfo }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return a RecipientKeyIdentifier object from a tagged object.
            
             @param _ato the tagged object holding the object we want.
             @param _explicit true if the object is meant to be explicitly
                          tagged false otherwise.
             @exception ArgumentException if the object held by the
                      tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.GetInstance(System.Object)">
             return a RecipientKeyIdentifier object from the given object.
            
             @param _obj the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.RecipientKeyIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             RecipientKeyIdentifier ::= Sequence {
                 subjectKeyIdentifier SubjectKeyIdentifier,
                 date GeneralizedTime OPTIONAL,
                 other OtherKeyAttribute OPTIONAL
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.ScvpReqRes.ToAsn1Object">
            <pre>
               ScvpReqRes ::= SEQUENCE {
               request  [0] EXPLICIT ContentInfo OPTIONAL,
               response     ContentInfo }
            </pre>
            @return  the ASN.1 primitive representation.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cms.SignedData">
            a signed data object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.SignedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SignedData ::= Sequence {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Cms.SignedDataParser">
            <pre>
            SignedData ::= SEQUENCE {
                version CMSVersion,
                digestAlgorithms DigestAlgorithmIdentifiers,
                encapContentInfo EncapsulatedContentInfo,
                certificates [0] IMPLICIT CertificateSet OPTIONAL,
                crls [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                signerInfos SignerInfos
              }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.SignerIdentifier.GetInstance(System.Object)">
             return a SignerIdentifier object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.SignerIdentifier.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             SignerIdentifier ::= CHOICE {
                 issuerAndSerialNumber IssuerAndSerialNumber,
                 subjectKeyIdentifier [0] SubjectKeyIdentifier
             }
            
             SubjectKeyIdentifier ::= OCTET STRING
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  SignerIdentifier sid,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is Generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.Time.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.TimeStampAndCrl.ToAsn1Object">
            <pre>
            TimeStampAndCRL ::= SEQUENCE {
                timeStamp   TimeStampToken,          -- according to RFC 3161
                crl         CertificateList OPTIONAL -- according to RFC 5280
             }
            </pre>
            @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.TimeStampedData.ToAsn1Object">
            <pre>
            TimeStampedData ::= SEQUENCE {
              version              INTEGER { v1(1) },
              dataUri              IA5String OPTIONAL,
              metaData             MetaData OPTIONAL,
              content              OCTET STRING OPTIONAL,
              temporalEvidence     Evidence
            }
            </pre>
            @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.TimeStampTokenEvidence.ToAsn1Object">
            <pre>
            TimeStampTokenEvidence ::=
               SEQUENCE SIZE(1..MAX) OF TimeStampAndCrl
            </pre>
            @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             return an AuthEnvelopedData object from a tagged object.
            
             @param obj      the tagged object holding the object we want.
             @param isExplicit true if the object is meant to be explicitly
                             tagged false otherwise.
             @throws ArgumentException if the object held by the
                                              tagged object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.GetInstance(System.Object)">
             return an AuthEnvelopedData object from the given object.
            
             @param obj the object we want converted.
             @throws ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Cms.Ecc.MQVuserKeyingMaterial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            MQVuserKeyingMaterial ::= SEQUENCE {
              ephemeralPublicKey OriginatorPublicKey,
              addedukm [0] EXPLICIT UserKeyingMaterial OPTIONAL  }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue.ToAsn1Object">
            <pre>
            AttributeTypeAndValue ::= SEQUENCE {
                      type         OBJECT IDENTIFIER,
                      value        ANY DEFINED BY type }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertId.ToAsn1Object">
            <pre>
            CertId ::= SEQUENCE {
                            issuer           GeneralName,
                            serialNumber     INTEGER }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertReqMessages.ToAsn1Object">
            <pre>
            CertReqMessages ::= SEQUENCE SIZE (1..MAX) OF CertReqMsg
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertReqMsg.#ctor(EnterpriseDT.BouncyCastle.Asn1.Crmf.CertRequest,EnterpriseDT.BouncyCastle.Asn1.Crmf.ProofOfPossession,EnterpriseDT.BouncyCastle.Asn1.Crmf.AttributeTypeAndValue[])">
            Creates a new CertReqMsg.
            @param certReq CertRequest
            @param popo may be null
            @param regInfo may be null
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertReqMsg.ToAsn1Object">
            <pre>
            CertReqMsg ::= SEQUENCE {
                               certReq   CertRequest,
                               pop       ProofOfPossession  OPTIONAL,
                               -- content depends upon key type
                               regInfo   SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertRequest.ToAsn1Object">
            <pre>
            CertRequest ::= SEQUENCE {
                                 certReqId     INTEGER,          -- ID for matching request and reply
                                 certTemplate  CertTemplate,  -- Selected fields of cert to be issued
                                 controls      Controls OPTIONAL }   -- Attributes affecting issuance
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertTemplate.ToAsn1Object">
            <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetVersion(System.Int32)">
            Sets the X.509 version. Note: for X509v3, use 2 here. 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetIssuerUID(EnterpriseDT.BouncyCastle.Asn1.DerBitString)">
            Sets the issuer unique ID (deprecated in X.509v3) 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.SetSubjectUID(EnterpriseDT.BouncyCastle.Asn1.DerBitString)">
            Sets the subject unique ID (deprecated in X.509v3) 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.CertTemplateBuilder.Build">
            <pre>
             CertTemplate ::= SEQUENCE {
                 version      [0] Version               OPTIONAL,
                 serialNumber [1] INTEGER               OPTIONAL,
                 signingAlg   [2] AlgorithmIdentifier   OPTIONAL,
                 issuer       [3] Name                  OPTIONAL,
                 validity     [4] OptionalValidity      OPTIONAL,
                 subject      [5] Name                  OPTIONAL,
                 publicKey    [6] SubjectPublicKeyInfo  OPTIONAL,
                 issuerUID    [7] UniqueIdentifier      OPTIONAL,
                 subjectUID   [8] UniqueIdentifier      OPTIONAL,
                 extensions   [9] Extensions            OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.Controls.ToAsn1Object">
            <pre>
            Controls  ::= SEQUENCE SIZE(1..MAX) OF AttributeTypeAndValue
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.EncKeyWithID.ToAsn1Object">
            <pre>
            EncKeyWithID ::= SEQUENCE {
                 privateKey           PrivateKeyInfo,
                 identifier CHOICE {
                    string               UTF8String,
                    generalName          GeneralName
                } OPTIONAL
            }
            </pre>
            @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.EncryptedKey.ToAsn1Object">
            <pre>
               EncryptedKey ::= CHOICE {
                   encryptedValue        EncryptedValue, -- deprecated
                   envelopedData     [0] EnvelopedData }
                   -- The encrypted private key MUST be placed in the envelopedData
                   -- encryptedContentInfo encryptedContent OCTET STRING.
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.EncryptedValue.ToAsn1Object">
            <pre>
            EncryptedValue ::= SEQUENCE {
                                intendedAlg   [0] AlgorithmIdentifier  OPTIONAL,
                                -- the intended algorithm for which the value will be used
                                symmAlg       [1] AlgorithmIdentifier  OPTIONAL,
                                -- the symmetric algorithm used to encrypt the value
                                encSymmKey    [2] BIT STRING           OPTIONAL,
                                -- the (encrypted) symmetric key used to encrypt the value
                                keyAlg        [3] AlgorithmIdentifier  OPTIONAL,
                                -- algorithm used to encrypt the symmetric key
                                valueHint     [4] OCTET STRING         OPTIONAL,
                                -- a brief description or identifier of the encValue content
                                -- (may be meaningful only to the sending entity, and used only
                                -- if EncryptedValue might be re-examined by the sending entity
                                -- in the future)
                                encValue       BIT STRING }
                                -- the encrypted value itself
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.OptionalValidity.ToAsn1Object">
            <pre>
            OptionalValidity ::= SEQUENCE {
                                   notBefore  [0] Time OPTIONAL,
                                   notAfter   [1] Time OPTIONAL } --at least one MUST be present
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PkiArchiveOptions.ToAsn1Object">
            <pre>
             PkiArchiveOptions ::= CHOICE {
                 encryptedPrivKey     [0] EncryptedKey,
                 -- the actual value of the private key
                 keyGenParameters     [1] KeyGenParameters,
                 -- parameters which allow the private key to be re-generated
                 archiveRemGenPrivKey [2] BOOLEAN }
                 -- set to TRUE if sender wishes receiver to archive the private
                 -- key of a key pair that the receiver generates in response to
                 -- this request; set to FALSE if no archival is desired.
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PkiPublicationInfo.ToAsn1Object">
            <pre>
            PkiPublicationInfo ::= SEQUENCE {
                             action     INTEGER {
                                            dontPublish (0),
                                            pleasePublish (1) },
                             pubInfos  SEQUENCE SIZE (1..MAX) OF SinglePubInfo OPTIONAL }
            -- pubInfos MUST NOT be present if action is "dontPublish"
            -- (if action is "pleasePublish" and pubInfos is omitted,
            -- "dontCare" is assumed)
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Crmf.PKMacValue">
            Password-based MAC value for use with POPOSigningKeyInput.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PKMacValue.#ctor(EnterpriseDT.BouncyCastle.Asn1.Cmp.PbmParameter,EnterpriseDT.BouncyCastle.Asn1.DerBitString)">
            Creates a new PKMACValue.
            @param params parameters for password-based MAC
            @param value MAC of the DER-encoded SubjectPublicKeyInfo
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PKMacValue.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.AlgorithmIdentifier,EnterpriseDT.BouncyCastle.Asn1.DerBitString)">
            Creates a new PKMACValue.
            @param aid CMPObjectIdentifiers.passwordBasedMAC, with PBMParameter
            @param value MAC of the DER-encoded SubjectPublicKeyInfo
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PKMacValue.ToAsn1Object">
            <pre>
            PKMACValue ::= SEQUENCE {
                 algId  AlgorithmIdentifier,
                 -- algorithm value shall be PasswordBasedMac 1.2.840.113533.7.66.13
                 -- parameter value is PBMParameter
                 value  BIT STRING }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoPrivKey.ToAsn1Object">
            <pre>
            PopoPrivKey ::= CHOICE {
                   thisMessage       [0] BIT STRING,         -- Deprecated
                    -- possession is proven in this message (which contains the private
                    -- key itself (encrypted for the CA))
                   subsequentMessage [1] SubsequentMessage,
                    -- possession will be proven in a subsequent message
                   dhMAC             [2] BIT STRING,         -- Deprecated
                   agreeMAC          [3] PKMACValue,
                   encryptedKey      [4] EnvelopedData }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoSigningKey.#ctor(EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput,EnterpriseDT.BouncyCastle.Asn1.X509.AlgorithmIdentifier,EnterpriseDT.BouncyCastle.Asn1.DerBitString)">
            Creates a new Proof of Possession object for a signing key.
            @param poposkIn the PopoSigningKeyInput structure, or null if the
                CertTemplate includes both subject and publicKey values.
            @param aid the AlgorithmIdentifier used to sign the proof of possession.
            @param signature a signature over the DER-encoded value of poposkIn,
                or the DER-encoded value of certReq if poposkIn is null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoSigningKey.ToAsn1Object">
            <pre>
            PopoSigningKey ::= SEQUENCE {
                                 poposkInput           [0] PopoSigningKeyInput OPTIONAL,
                                 algorithmIdentifier   AlgorithmIdentifier,
                                 signature             BIT STRING }
             -- The signature (using "algorithmIdentifier") is on the
             -- DER-encoded value of poposkInput.  NOTE: If the CertReqMsg
             -- certReq CertTemplate contains the subject and publicKey values,
             -- then poposkInput MUST be omitted and the signature MUST be
             -- computed on the DER-encoded value of CertReqMsg certReq.  If
             -- the CertReqMsg certReq CertTemplate does not contain the public
             -- key and subject values, then poposkInput MUST be present and
             -- MUST be signed.  This strategy ensures that the public key is
             -- not present in both the poposkInput and CertReqMsg certReq
             -- CertTemplate fields.
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName,EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
            Creates a new PopoSigningKeyInput with sender name as authInfo. 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.#ctor(EnterpriseDT.BouncyCastle.Asn1.Crmf.PKMacValue,EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
            Creates a new PopoSigningKeyInput using password-based MAC. 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.ToAsn1Object">
            <pre>
            PopoSigningKeyInput ::= SEQUENCE {
                   authInfo             CHOICE {
                                            sender              [0] GeneralName,
                                            -- used only if an authenticated identity has been
                                            -- established for the sender (e.g., a DN from a
                                            -- previously-issued and currently-valid certificate
                                            publicKeyMac        PKMacValue },
                                            -- used if no authenticated GeneralName currently exists for
                                            -- the sender; publicKeyMac contains a password-based MAC
                                            -- on the DER-encoded value of publicKey
                   publicKey           SubjectPublicKeyInfo }  -- from CertTemplate
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.Sender">
            Returns the sender field, or null if authInfo is publicKeyMac 
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoSigningKeyInput.PublicKeyMac">
            Returns the publicKeyMac field, or null if authInfo is sender 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor">
            Creates a ProofOfPossession with type raVerified. 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor(EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoSigningKey)">
            Creates a ProofOfPossession for a signing key. 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.ProofOfPossession.#ctor(System.Int32,EnterpriseDT.BouncyCastle.Asn1.Crmf.PopoPrivKey)">
            Creates a ProofOfPossession for key encipherment or agreement.
            @param type one of TYPE_KEY_ENCIPHERMENT or TYPE_KEY_AGREEMENT
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.ProofOfPossession.ToAsn1Object">
            <pre>
            ProofOfPossession ::= CHOICE {
                                      raVerified        [0] NULL,
                                      -- used if the RA has already verified that the requester is in
                                      -- possession of the private key
                                      signature         [1] PopoSigningKey,
                                      keyEncipherment   [2] PopoPrivKey,
                                      keyAgreement      [3] PopoPrivKey }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Crmf.SinglePubInfo.ToAsn1Object">
            <pre>
            SinglePubInfo ::= SEQUENCE {
                   pubMethod    INTEGER {
                      dontCare    (0),
                      x500        (1),
                      web         (2),
                      ldap        (3) },
                  pubLocation  GeneralName OPTIONAL }
            </pre>
            @return a basic ASN.1 object representation.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves">
            table of the available named parameters for GOST 3410-2001.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetByOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the ECDomainParameters object for the given OID, null if it
             isn't present.
            
             @param oid an object identifier representing a named parameters, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.GetName(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.CryptoPro.ECGost3410NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.CryptoPro.Gost28147Parameters.ToAsn1Object">
             <pre>
             Gost28147-89-Parameters ::=
                           SEQUENCE {
                                   iv                   Gost28147-89-IV,
                                   encryptionParamSet   OBJECT IDENTIFIER
                            }
            
               Gost28147-89-IV ::= OCTET STRING (SIZE (8))
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters">
            table of the available named parameters for GOST 3410-94.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters.GetByOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the GOST3410ParamSetParameters object for the given OID, null if it
             isn't present.
            
             @param oid an object identifier representing a named parameters, if present.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.CryptoPro.Gost3410NamedParameters.Names">
            returns an enumeration containing the name strings for parameters
            contained in this structure.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.CertificateValues">
            <remarks>
            RFC 3126: 4.3.1 Certificate Values Attribute Definition
            <code>
            CertificateValues ::= SEQUENCE OF Certificate
            </code>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Esf.CommitmentTypeIndication.ToAsn1Object">
            <pre>
            CommitmentTypeIndication ::= SEQUENCE {
                 commitmentTypeId   CommitmentTypeIdentifier,
                 commitmentTypeQualifier   SEQUENCE SIZE (1..MAX) OF
                         CommitmentTypeQualifier OPTIONAL }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier">
             Commitment type qualifiers, used in the Commitment-Type-Indication attribute (RFC3126).
            
             <pre>
               CommitmentTypeQualifier ::= SEQUENCE {
                   commitmentTypeIdentifier  CommitmentTypeIdentifier,
                   qualifier          ANY DEFINED BY commitmentTypeIdentifier OPTIONAL }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.#ctor(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param commitmentTypeIdentifier a <code>CommitmentTypeIdentifier</code> value
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.#ctor(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param commitmentTypeIdentifier a <code>CommitmentTypeIdentifier</code> value
             @param qualifier the qualifier, defined by the above field.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>CommitmentTypeQualifier</code> instance.
            
             @param as <code>CommitmentTypeQualifier</code> structure
             encoded as an Asn1Sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Esf.CommitmentTypeQualifier.ToAsn1Object">
             Returns a DER-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.CompleteCertificateRefs">
            <remarks>
            RFC 3126: 4.2.1 Complete Certificate Refs Attribute Definition
            <code>
            CompleteCertificateRefs ::= SEQUENCE OF OtherCertID
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.CompleteRevocationRefs">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CompleteRevocationRefs ::= SEQUENCE OF CrlOcspRef
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.CrlIdentifier">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlIdentifier ::= SEQUENCE 
            {
            	crlissuer		Name,
            	crlIssuedTime	UTCTime,
            	crlNumber		INTEGER OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.CrlListID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CRLListID ::= SEQUENCE 
            {
            	crls	SEQUENCE OF CrlValidatedID
            }
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.CrlOcspRef">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlOcspRef ::= SEQUENCE {
            	crlids		[0] CRLListID		OPTIONAL,
            	ocspids		[1] OcspListID		OPTIONAL,
            	otherRev	[2] OtherRevRefs	OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.CrlValidatedID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            CrlValidatedID ::= SEQUENCE {
            	crlHash			OtherHash,
            	crlIdentifier	CrlIdentifier OPTIONAL}
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.OcspIdentifier">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspIdentifier ::= SEQUENCE {
            	ocspResponderID		ResponderID,
            		-- As in OCSP response data
            	producedAt			GeneralizedTime
            		-- As in OCSP response data
            }
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.OcspListID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspListID ::=  SEQUENCE {
            	ocspResponses	SEQUENCE OF OcspResponsesID
            }
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.OcspResponsesID">
            <remarks>
            RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
            <code>
            OcspResponsesID ::= SEQUENCE {
            	ocspIdentifier	OcspIdentifier,
            	ocspRepHash		OtherHash OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.OtherCertID">
            <remarks>
            <code>
            OtherCertID ::= SEQUENCE {
            	otherCertHash	OtherHash,
            	issuerSerial	IssuerSerial OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.OtherHash">
            <remarks>
            <code>
            OtherHash ::= CHOICE {
            	sha1Hash	OtherHashValue, -- This contains a SHA-1 hash
            	otherHash	OtherHashAlgAndValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.OtherHashAlgAndValue">
            <summary>
            Summary description for OtherHashAlgAndValue.
            </summary>
            <remarks>
            <code>
            OtherHashAlgAndValue ::= SEQUENCE {
            	hashAlgorithm	AlgorithmIdentifier,
            	hashValue		OtherHashValue
            }
            
            OtherHashValue ::= OCTET STRING
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.OtherRevRefs">
             <remarks>
             RFC 3126: 4.2.2 Complete Revocation Refs Attribute Definition
             <code>
             OtherRevRefs ::= SEQUENCE 
             {
            		otherRevRefType      OtherRevRefType,
            		otherRevRefs         ANY DEFINED BY otherRevRefType
             }
            
             OtherRevRefType ::= OBJECT IDENTIFIER
             </code>
             </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.OtherRevVals">
             <remarks>
             RFC 3126: 4.3.2 Revocation Values Attribute Definition
             <code>
             OtherRevVals ::= SEQUENCE 
             {
            		otherRevValType      OtherRevValType,
            		otherRevVals         ANY DEFINED BY otherRevValType
             }
            
             OtherRevValType ::= OBJECT IDENTIFIER
             </code>
             </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.OtherSigningCertificate">
            <remarks>
            <code>
            OtherSigningCertificate ::= SEQUENCE {
            	certs		SEQUENCE OF OtherCertID,
            	policies	SEQUENCE OF PolicyInformation OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.RevocationValues">
            <remarks>
            RFC 5126: 6.3.4.  revocation-values Attribute Definition
            <code>
            RevocationValues ::=  SEQUENCE {
            	crlVals			[0] SEQUENCE OF CertificateList     OPTIONAL,
            	ocspVals		[1] SEQUENCE OF BasicOCSPResponse   OPTIONAL,
            	otherRevVals	[2] OtherRevVals OPTIONAL
            }
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.SignaturePolicyId">
            <remarks>
            <code>
            SignaturePolicyId ::= SEQUENCE {
            	sigPolicyIdentifier		SigPolicyId,
            	sigPolicyHash			SigPolicyHash,
            	sigPolicyQualifiers		SEQUENCE SIZE (1..MAX) OF SigPolicyQualifierInfo OPTIONAL
            }
            
            SigPolicyId ::= OBJECT IDENTIFIER
            
            SigPolicyHash ::= OtherHashAlgAndValue
            </code>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.SignaturePolicyIdentifier">
            <remarks>
            <code>
            SignaturePolicyIdentifier ::= CHOICE {
            	SignaturePolicyId		SignaturePolicyId,
            	SignaturePolicyImplied	SignaturePolicyImplied
            }
            
            SignaturePolicyImplied ::= NULL
            </code>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Esf.SignerAttribute.ToAsn1Object">
            
             <pre>
              SignerAttribute ::= SEQUENCE OF CHOICE {
                  claimedAttributes   [0] ClaimedAttributes,
                  certifiedAttributes [1] CertifiedAttributes }
            
              ClaimedAttributes ::= SEQUENCE OF Attribute
              CertifiedAttributes ::= AttributeCertificate -- as defined in RFC 3281: see clause 4.1.
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.SignerLocation">
             Signer-Location attribute (RFC3126).
            
             <pre>
               SignerLocation ::= SEQUENCE {
                   countryName        [0] DirectoryString OPTIONAL,
                   localityName       [1] DirectoryString OPTIONAL,
                   postalAddress      [2] PostalAddress OPTIONAL }
            
               PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Esf.SignerLocation.ToAsn1Object">
             <pre>
               SignerLocation ::= SEQUENCE {
                   countryName        [0] DirectoryString OPTIONAL,
                   localityName       [1] DirectoryString OPTIONAL,
                   postalAddress      [2] PostalAddress OPTIONAL }
            
               PostalAddress ::= SEQUENCE SIZE(1..6) OF DirectoryString
            
               DirectoryString ::= CHOICE {
                     teletexString           TeletexString (SIZE (1..MAX)),
                     printableString         PrintableString (SIZE (1..MAX)),
                     universalString         UniversalString (SIZE (1..MAX)),
                     utf8String              UTF8String (SIZE (1.. MAX)),
                     bmpString               BMPString (SIZE (1..MAX)) }
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Esf.SigPolicyQualifierInfo">
            <remarks>
            <code>
            SigPolicyQualifierInfo ::= SEQUENCE {
            	sigPolicyQualifierId  SigPolicyQualifierId,
            	sigQualifier          ANY DEFINED BY sigPolicyQualifierId
            }
            
            SigPolicyQualifierId ::= OBJECT IDENTIFIER
            </code>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.ContentHints.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.ContentHints.ToAsn1Object">
            <pre>
            ContentHints ::= SEQUENCE {
              contentDescription UTF8String (SIZE (1..MAX)) OPTIONAL,
              contentType ContentType }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.ContentIdentifier.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1OctetString)">
            Create from OCTET STRING whose octets represent the identifier.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.ContentIdentifier.#ctor(System.Byte[])">
            Create from byte array representing the identifier.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.ContentIdentifier.ToAsn1Object">
            The definition of ContentIdentifier is
            <pre>
            ContentIdentifier ::=  OCTET STRING
            </pre>
            id-aa-contentIdentifier OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 7 }
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.EssCertID.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.EssCertID.ToAsn1Object">
            <pre>
            EssCertID ::= SEQUENCE {
                certHash Hash,
                issuerSerial IssuerSerial OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.EssCertIDv2.ToAsn1Object">
             <pre>
             EssCertIDv2 ::=  SEQUENCE {
                 hashAlgorithm     AlgorithmIdentifier
                          DEFAULT {algorithm id-sha256},
                 certHash          Hash,
                 issuerSerial      IssuerSerial OPTIONAL
             }
            
             Hash ::= OCTET STRING
            
             IssuerSerial ::= SEQUENCE {
                 issuer         GeneralNames,
                 serialNumber   CertificateSerialNumber
             }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.OtherCertID.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.OtherCertID.ToAsn1Object">
             <pre>
             OtherCertID ::= SEQUENCE {
                 otherCertHash    OtherHash,
                 issuerSerial     IssuerSerial OPTIONAL }
            
             OtherHash ::= CHOICE {
                 sha1Hash     OCTET STRING,
                 otherHash    OtherHashAlgAndValue }
            
             OtherHashAlgAndValue ::= SEQUENCE {
                 hashAlgorithm    AlgorithmIdentifier,
                 hashValue        OCTET STRING }
            
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.OtherSigningCertificate.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            constructors
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.OtherSigningCertificate.ToAsn1Object">
            The definition of OtherSigningCertificate is
            <pre>
            OtherSigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF OtherCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-ets-otherSigCert OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 19 }
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.SigningCertificate.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            constructors
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.SigningCertificate.ToAsn1Object">
            The definition of SigningCertificate is
            <pre>
            SigningCertificate ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertID,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificate OBJECT IDENTIFIER ::= { iso(1)
             member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
             smime(16) id-aa(2) 12 }
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ess.SigningCertificateV2.ToAsn1Object">
            The definition of SigningCertificateV2 is
            <pre>
            SigningCertificateV2 ::=  SEQUENCE {
                 certs        SEQUENCE OF EssCertIDv2,
                 policies     SEQUENCE OF PolicyInformation OPTIONAL
            }
            </pre>
            id-aa-signingCertificateV2 OBJECT IDENTIFIER ::= { iso(1)
               member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs9(9)
               smime(16) id-aa(2) 47 }
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Icao.CscaMasterList">
             The CscaMasterList object. This object can be wrapped in a
             CMSSignedData to be published in LDAP.
            
             <pre>
             CscaMasterList ::= SEQUENCE {
               version                CscaMasterListVersion,
               certList               SET OF Certificate }
               
             CscaMasterListVersion :: INTEGER {v0(0)}
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Icao.DataGroupHash">
             The DataGroupHash object.
             <pre>
             DataGroupHash  ::=  SEQUENCE {
                  dataGroupNumber         DataGroupNumber,
                  dataGroupHashValue     OCTET STRING }
            
             DataGroupNumber ::= INTEGER {
                     dataGroup1    (1),
                     dataGroup1    (2),
                     dataGroup1    (3),
                     dataGroup1    (4),
                     dataGroup1    (5),
                     dataGroup1    (6),
                     dataGroup1    (7),
                     dataGroup1    (8),
                     dataGroup1    (9),
                     dataGroup1    (10),
                     dataGroup1    (11),
                     dataGroup1    (12),
                     dataGroup1    (13),
                     dataGroup1    (14),
                     dataGroup1    (15),
                     dataGroup1    (16) }
            
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Icao.LdsSecurityObject">
             The LDSSecurityObject object (V1.8).
             <pre>
             LDSSecurityObject ::= SEQUENCE {
               version                LDSSecurityObjectVersion,
               hashAlgorithm          DigestAlgorithmIdentifier,
               dataGroupHashValues    SEQUENCE SIZE (2..ub-DataGroups) OF DataHashGroup,
               ldsVersionInfo         LDSVersionInfo OPTIONAL
                 -- if present, version MUST be v1 }
            
             DigestAlgorithmIdentifier ::= AlgorithmIdentifier,
            
             LDSSecurityObjectVersion :: INTEGER {V0(0)}
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Icao.LdsVersionInfo.ToAsn1Object">
            <pre>
            LDSVersionInfo ::= SEQUENCE {
               ldsVersion PRINTABLE STRING
               unicodeVersion PRINTABLE STRING
             }
            </pre>
            @return
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttCPAccredited">
            The id-isismtt-cp-accredited OID indicates that the certificate is a
            qualified certificate according to Directive 1999/93/EC of the European
            Parliament and of the Council of 13 December 1999 on a Community
            Framework for Electronic Signatures, which additionally conforms the
            special requirements of the SigG and has been issued by an accredited CA.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDateOfCertGen">
             Certificate extensionDate of certificate generation
             
             <pre>
            		DateOfCertGenSyntax ::= GeneralizedTime
             </pre>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATProcuration">
            Attribute to indicate that the certificate holder may sign in the name of
            a third person. May also be used as extension in a certificate.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdmission">
            Attribute to indicate admissions to certain professions. May be used as
            attribute in attribute certificate or as extension in a certificate
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATMonetaryLimit">
            Monetary limit for transactions. The QcEuMonetaryLimit QC statement MUST
            be used in new certificates in place of the extension/attribute
            MonetaryLimit since January 1, 2004. For the sake of backward
            compatibility with certificates already in use, SigG conforming
            components MUST support MonetaryLimit (as well as QcEuLimitValue).
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATDeclarationOfMajority">
            A declaration of majority. May be used as attribute in attribute
            certificate or as extension in a certificate
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATIccsn">
             
             Serial number of the smart card containing the corresponding private key
             
             <pre>
            		ICCSNSyntax ::= OCTET STRING (SIZE(8..20))
             </pre>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATPKReference">
             
             Reference for a file of a smartcard that stores the public key of this
             certificate and that is used as �security anchor�.
             
             <pre>
            		PKReferenceSyntax ::= OCTET STRING (SIZE(20))
             </pre>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRestriction">
             Some other restriction regarding the usage of this certificate. May be
             used as attribute in attribute certificate or as extension in a
             certificate.
             
             <pre>
            		RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
             
             @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Restriction
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRetrieveIfAllowed">
             
             (Single)Request extension: Clients may include this extension in a
             (single) Request to request the responder to send the certificate in the
             response message along with the status information. Besides the LDAP
             service, this extension provides another mechanism for the distribution
             of certificates, which MAY optionally be provided by certificate
             repositories.
             
             <pre>
            		RetrieveIfAllowed ::= BOOLEAN
             </pre>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATRequestedCertificate">
            SingleOCSPResponse extension: The certificate requested by the client by
            inserting the RetrieveIfAllowed extension in the request, will be
            returned in this extension.
            
            @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNamingAuthorities">
            Base ObjectIdentifier for naming authorities
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertInDirSince">
             SingleOCSPResponse extension: Date, when certificate has been published
             in the directory and status information has become available. Currently,
             accrediting authorities enforce that SigG-conforming OCSP servers include
             this extension in the responses.
             
             <pre>
            		CertInDirSince ::= GeneralizedTime
             </pre>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATCertHash">
             Hash of a certificate in OCSP.
            
             @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATNameAtBirth">
             <pre>
            		NameAtBirth ::= DirectoryString(SIZE(1..64)
             </pre>
             
             Used in
             {@link EnterpriseDT.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes SubjectDirectoryAttributes}
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATAdditionalInformation">
            Some other information of non-restrictive nature regarding the usage of
            this certificate. May be used as attribute in atribute certificate or as
            extension in a certificate.
            
            <pre>
                          AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
            </pre>
            
            @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.IsisMttObjectIdentifiers.IdIsisMttATLiabilityLimitationFlag">
             Indicates that an attribute certificate exists, which limits the
             usability of this public key certificate. Whenever verifying a signature
             with the help of this certificate, the content of the corresponding
             attribute certificate should be concerned. This extension MUST be
             included in a PKC, if a corresponding attribute certificate (having the
             PKC as base certificate) contains some attribute that restricts the
             usability of the PKC too. Attribute certificates with restricting content
             MUST always be included in the signed document.
             
             <pre>
            		LiabilityLimitationFlagSyntax ::= BOOLEAN
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash">
            ISIS-MTT PROFILE: The responder may include this extension in a response to
            send the hash of the requested certificate to the responder. This hash is
            cryptographically bound to the certificate and serves as evidence that the
            certificate is known to the responder (i.e. it has been issued and is present
            in the directory). Hence, this extension is a means to provide a positive
            statement of availability as described in T8.[8]. As explained in T13.[1],
            clients may rely on this information to be able to validate signatures after
            the expiry of the corresponding certificate. Hence, clients MUST support this
            extension. If a positive statement of availability is to be delivered, this
            extension syntax and OID MUST be used.
            <p/>
            <p/>
            <pre>
                CertHash ::= SEQUENCE {
                  hashAlgorithm AlgorithmIdentifier,
                  certificateHash OCTET STRING
                }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type CertHash:
             <p/>
             <pre>
                 CertHash ::= SEQUENCE {
                   hashAlgorithm AlgorithmIdentifier,
                   certificateHash OCTET STRING
                 }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
             Constructor from a given details.
            
             @param hashAlgorithm   The hash algorithm identifier.
             @param certificateHash The hash of the whole DER encoding of the certificate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.Ocsp.CertHash.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 CertHash ::= SEQUENCE {
                   hashAlgorithm AlgorithmIdentifier,
                   certificateHash OCTET STRING
                 }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate">
            ISIS-MTT-Optional: The certificate requested by the client by inserting the
            RetrieveIfAllowed extension in the request, will be returned in this
            extension.
            <p/>
            ISIS-MTT-SigG: The signature act allows publishing certificates only then,
            when the certificate owner gives his isExplicit permission. Accordingly, there
            may be �nondownloadable� certificates, about which the responder must provide
            status information, but MUST NOT include them in the response. Clients may
            get therefore the following three kind of answers on a single request
            including the RetrieveIfAllowed extension:
            <ul>
            <li> a) the responder supports the extension and is allowed to publish the
            certificate: RequestedCertificate returned including the requested
            certificate</li>
            <li>b) the responder supports the extension but is NOT allowed to publish
            the certificate: RequestedCertificate returned including an empty OCTET
            STRING</li>
            <li>c) the responder does not support the extension: RequestedCertificate is
            not included in the response</li>
            </ul>
            Clients requesting RetrieveIfAllowed MUST be able to handle these cases. If
            any of the OCTET STRING options is used, it MUST contain the DER encoding of
            the requested certificate.
            <p/>
            <pre>
                       RequestedCertificate ::= CHOICE {
                         Certificate Certificate,
                         publicKeyCertificate [0] EXPLICIT OCTET STRING,
                         attributeCertificate [1] EXPLICIT OCTET STRING
                       }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.X509CertificateStructure)">
             Constructor from a given details.
             <p/>
             Only one parameter can be given. All other must be <code>null</code>.
            
             @param certificate Given as Certificate
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.Ocsp.RequestedCertificate.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                        RequestedCertificate ::= CHOICE {
                          Certificate Certificate,
                          publicKeyCertificate [0] EXPLICIT OCTET STRING,
                          attributeCertificate [1] EXPLICIT OCTET STRING
                        }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax">
            Some other information of non-restrictive nature regarding the usage of this
            certificate.
            
            <pre>
               AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.#ctor(System.String)">
             Constructor from a given details.
            
             @param information The describtion of the information.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdditionalInformationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
               AdditionalInformationSyntax ::= DirectoryString (SIZE(1..2048))
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Admissions">
             An Admissions structure.
             <p/>
             <pre>
                        Admissions ::= SEQUENCE
                        {
                          admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                          namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                          professionInfos SEQUENCE OF ProfessionInfo
                        }
             <p/>
             </pre>
            
             @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax
             @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo
             @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Admissions.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                        Admissions ::= SEQUENCE
                        {
                          admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                          namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                          professionInfos SEQUENCE OF ProfessionInfo
                        }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Admissions.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName,EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority,EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo[])">
             Constructor from a given details.
             <p/>
             Parameter <code>professionInfos</code> is mandatory.
            
             @param admissionAuthority The admission authority.
             @param namingAuthority    The naming authority.
             @param professionInfos    The profession infos.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Admissions.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   Admissions ::= SEQUENCE
                   {
                     admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                     namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                     professionInfos SEQUENCE OF ProfessionInfo
                   }
             <p/>
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax">
             Attribute to indicate admissions to certain professions.
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
             <p/>
             <p/>
             ISIS-MTT PROFILE: The relatively complex structure of AdmissionSyntax
             supports the following concepts and requirements:
             <ul>
             <li> External institutions (e.g. professional associations, chambers, unions,
             administrative bodies, companies, etc.), which are responsible for granting
             and verifying professional admissions, are indicated by means of the data
             field admissionAuthority. An admission authority is indicated by a
             GeneralName object. Here an X.501 directory name (distinguished name) can be
             indicated in the field directoryName, a URL address can be indicated in the
             field uniformResourceIdentifier, and an object identifier can be indicated in
             the field registeredId.</li>
             <li> The names of authorities which are responsible for the administration of
             title registers are indicated in the data field namingAuthority. The name of
             the authority can be identified by an object identifier in the field
             namingAuthorityId, by means of a text string in the field
             namingAuthorityText, by means of a URL address in the field
             namingAuthorityUrl, or by a combination of them. For example, the text string
             can contain the name of the authority, the country and the name of the title
             register. The URL-option refers to a web page which contains lists with
             officially registered professions (text and possibly OID) as well as
             further information on these professions. Object identifiers for the
             component namingAuthorityId are grouped under the OID-branch
             id-isis-at-namingAuthorities and must be applied for.</li>
             <li>See http://www.teletrust.de/anwend.asp?Id=30200&amp;Sprache=E_&amp;HomePG=0
             for an application form and http://www.teletrust.de/links.asp?id=30220,11
             for an overview of registered naming authorities.</li>
             <li> By means of the data type ProfessionInfo certain professions,
             specializations, disciplines, fields of activity, etc. are identified. A
             profession is represented by one or more text strings, resp. profession OIDs
             in the fields professionItems and professionOIDs and by a registration number
             in the field registrationNumber. An indication in text form must always be
             present, whereas the other indications are optional. The component
             addProfessionInfo may contain additional applicationspecific information in
             DER-encoded form.</li>
             </ul>
             <p/>
             By means of different namingAuthority-OIDs or profession OIDs hierarchies of
             professions, specializations, disciplines, fields of activity, etc. can be
             expressed. The issuing admission authority should always be indicated (field
             admissionAuthority), whenever a registration number is presented. Still,
             information on admissions can be given without indicating an admission or a
             naming authority by the exclusive use of the component professionItems. In
             this case the certification authority is responsible for the verification of
             the admission information.
             <p/>
             <p/>
             <p/>
             This attribute is single-valued. Still, several admissions can be captured in
             the sequence structure of the component contentsOfAdmissions of
             AdmissionSyntax or in the component professionInfos of Admissions. The
             component admissionAuthority of AdmissionSyntax serves as default value for
             the component admissionAuthority of Admissions. Within the latter component
             the default value can be overwritten, in case that another authority is
             responsible. The component namingAuthority of Admissions serves as a default
             value for the component namingAuthority of ProfessionInfo. Within the latter
             component the default value can be overwritten, in case that another naming
             authority needs to be recorded.
             <p/>
             The length of the string objects is limited to 128 characters. It is
             recommended to indicate a namingAuthorityURL in all issued attribute
             certificates. If a namingAuthorityURL is indicated, the field professionItems
             of ProfessionInfo should contain only registered titles. If the field
             professionOIDs exists, it has to contain the OIDs of the professions listed
             in professionItems in the same order. In general, the field professionInfos
             should contain only one entry, unless the admissions that are to be listed
             are logically connected (e.g. they have been issued under the same admission
             number).
            
             @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Admissions
             @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo
             @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName,EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from given details.
            
             @param admissionAuthority   The admission authority.
             @param contentsOfAdmissions The admissions.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 AdmissionSyntax ::= SEQUENCE
                 {
                   admissionAuthority GeneralName OPTIONAL,
                   contentsOfAdmissions SEQUENCE OF Admissions
                 }
             <p/>
                 Admissions ::= SEQUENCE
                 {
                   admissionAuthority [0] EXPLICIT GeneralName OPTIONAL
                   namingAuthority [1] EXPLICIT NamingAuthority OPTIONAL
                   professionInfos SEQUENCE OF ProfessionInfo
                 }
             <p/>
                 NamingAuthority ::= SEQUENCE
                 {
                   namingAuthorityId OBJECT IDENTIFIER OPTIONAL,
                   namingAuthorityUrl IA5String OPTIONAL,
                   namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                 }
             <p/>
                 ProfessionInfo ::= SEQUENCE
                 {
                   namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                   professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                   professionOIDs SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                   registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                   addProfessionInfo OCTET STRING OPTIONAL
                 }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.GetContentsOfAdmissions">
            @return Returns the contentsOfAdmissions.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax.AdmissionAuthority">
            @return Returns the admissionAuthority if present, null otherwise.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority">
            A declaration of majority.
            <p/>
            <pre>
                      DeclarationOfMajoritySyntax ::= CHOICE
                      {
                        notYoungerThan [0] IMPLICIT INTEGER,
                        fullAgeAtCountry [1] IMPLICIT SEQUENCE
                        {
                          fullAge BOOLEAN DEFAULT TRUE,
                          country PrintableString (SIZE(2))
                        }
                        dateOfBirth [2] IMPLICIT GeneralizedTime
                      }
            </pre>
            <p/>
            fullAgeAtCountry indicates the majority of the owner with respect to the laws
            of a specific country.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                       DeclarationOfMajoritySyntax ::= CHOICE
                       {
                         notYoungerThan [0] IMPLICIT INTEGER,
                         fullAgeAtCountry [1] IMPLICIT SEQUENCE
                         {
                           fullAge BOOLEAN DEFAULT TRUE,
                           country PrintableString (SIZE(2))
                         }
                         dateOfBirth [2] IMPLICIT GeneralizedTime
                       }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.DeclarationOfMajority.NotYoungerThan">
            @return notYoungerThan if that's what we are, -1 otherwise
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit">
            Monetary limit for transactions. The QcEuMonetaryLimit QC statement MUST be
            used in new certificates in place of the extension/attribute MonetaryLimit
            since January 1, 2004. For the sake of backward compatibility with
            certificates already in use, components SHOULD support MonetaryLimit (as well
            as QcEuLimitValue).
            <p/>
            Indicates a monetary limit within which the certificate holder is authorized
            to act. (This value DOES NOT express a limit on the liability of the
            certification authority).
            <p/>
            <pre>
               MonetaryLimitSyntax ::= SEQUENCE
               {
                 currency PrintableString (SIZE(3)),
                 amount INTEGER,
                 exponent INTEGER
               }
            </pre>
            <p/>
            currency must be the ISO code.
            <p/>
            value = amount�10*exponent
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.#ctor(System.String,System.Int32,System.Int32)">
             Constructor from a given details.
             <p/>
             <p/>
             value = amount�10^exponent
            
             @param currency The currency. Must be the ISO code.
             @param amount   The amount
             @param exponent The exponent
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.MonetaryLimit.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                MonetaryLimitSyntax ::= SEQUENCE
                {
                  currency PrintableString (SIZE(3)),
                  amount INTEGER,
                  exponent INTEGER
                }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority">
            Names of authorities which are responsible for the administration of title
            registers.
            
            <pre>
                        NamingAuthority ::= SEQUENCE 
                        {
                          namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                          namingAuthorityUrl IA5String OPTIONAL,
                          namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                        }
            </pre>
            @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax
            
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.IdIsisMttATNamingAuthoritiesRechtWirtschaftSteuern">
            Profession OIDs should always be defined under the OID branch of the
            responsible naming authority. At the time of this writing, the work group
            �Recht, Wirtschaft, Steuern� (�Law, Economy, Taxes�) is registered as the
            first naming authority under the OID id-isismtt-at-namingAuthorities.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             <p/>
             <pre>
                         NamingAuthority ::= SEQUENCE
                         {
                           namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                           namingAuthorityUrl IA5String OPTIONAL,
                           namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                         }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.#ctor(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.String,EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString)">
             Constructor from given details.
             <p/>
             All parameters can be combined.
            
             @param namingAuthorityID   ObjectIdentifier for naming authority.
             @param namingAuthorityUrl  URL for naming authority.
             @param namingAuthorityText Textual representation of naming authority.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                         NamingAuthority ::= SEQUENCE
                         {
                           namingAuthorityID OBJECT IDENTIFIER OPTIONAL,
                           namingAuthorityUrl IA5String OPTIONAL,
                           namingAuthorityText DirectoryString(SIZE(1..128)) OPTIONAL
                         }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityID">
            @return Returns the namingAuthorityID.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityText">
            @return Returns the namingAuthorityText.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority.NamingAuthorityUrl">
            @return Returns the namingAuthorityUrl.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax">
            Attribute to indicate that the certificate holder may sign in the name of a
            third person.
            <p>
            ISIS-MTT PROFILE: The corresponding ProcurationSyntax contains either the
            name of the person who is represented (subcomponent thirdPerson) or a
            reference to his/her base certificate (in the component signingFor,
            subcomponent certRef), furthermore the optional components country and
            typeSubstitution to indicate the country whose laws apply, and respectively
            the type of procuration (e.g. manager, procuration, custody).
            </p>
            <p>
            ISIS-MTT PROFILE: The GeneralName MUST be of type directoryName and MAY only
            contain: - RFC3039 attributes, except pseudonym (countryName, commonName,
            surname, givenName, serialNumber, organizationName, organizationalUnitName,
            stateOrProvincename, localityName, postalAddress) and - SubjectDirectoryName
            attributes (title, dateOfBirth, placeOfBirth, gender, countryOfCitizenship,
            countryOfResidence and NameAtBirth).
            </p>
            <pre>
                          ProcurationSyntax ::= SEQUENCE {
                            country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                            typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                            signingFor [3] EXPLICIT SigningFor 
                          }
                          
                          SigningFor ::= CHOICE 
                          { 
                            thirdPerson GeneralName,
                            certRef IssuerSerial 
                          }
            </pre>
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type ProcurationSyntax:
             <p/>
             <pre>
                           ProcurationSyntax ::= SEQUENCE {
                             country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                             typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                             signingFor [3] EXPLICIT SigningFor
                           }
             <p/>
                           SigningFor ::= CHOICE
                           {
                             thirdPerson GeneralName,
                             certRef IssuerSerial
                           }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString,EnterpriseDT.BouncyCastle.Asn1.X509.IssuerSerial)">
             Constructor from a given details.
             <p/>
             <p/>
             Either <code>generalName</code> or <code>certRef</code> MUST be
             <code>null</code>.
            
             @param country            The country code whose laws apply.
             @param typeOfSubstitution The type of procuration.
             @param certRef            Reference to certificate of the person who is represented.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.#ctor(System.String,EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString,EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName)">
             Constructor from a given details.
             <p/>
             <p/>
             Either <code>generalName</code> or <code>certRef</code> MUST be
             <code>null</code>.
            
             @param country            The country code whose laws apply.
             @param typeOfSubstitution The type of procuration.
             @param thirdPerson        The GeneralName of the person who is represented.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProcurationSyntax.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                           ProcurationSyntax ::= SEQUENCE {
                             country [1] EXPLICIT PrintableString(SIZE(2)) OPTIONAL,
                             typeOfSubstitution [2] EXPLICIT DirectoryString (SIZE(1..128)) OPTIONAL,
                             signingFor [3] EXPLICIT SigningFor
                           }
             <p/>
                           SigningFor ::= CHOICE
                           {
                             thirdPerson GeneralName,
                             certRef IssuerSerial
                           }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo">
            Professions, specializations, disciplines, fields of activity, etc.
            
            <pre>
                          ProfessionInfo ::= SEQUENCE 
                          {
                            namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                            professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                            professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                            registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                            addProfessionInfo OCTET STRING OPTIONAL 
                          }
            </pre>
            
            @see EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.AdmissionSyntax
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwltin">
            Rechtsanw�ltin
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsanwalt">
            Rechtsanwalt
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Rechtsbeistand">
            Rechtsbeistand
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberaterin">
            Steuerberaterin
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerberater">
            Steuerberater
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigte">
            Steuerbevollm�chtigte
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Steuerbevollmchtigter">
            Steuerbevollm�chtigter
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarin">
            Notarin
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notar">
            Notar
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreterin">
            Notarvertreterin
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notarvertreter">
            Notarvertreter
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalterin">
            Notariatsverwalterin
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Notariatsverwalter">
            Notariatsverwalter
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprferin">
            Wirtschaftspr�ferin
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Wirtschaftsprfer">
            Wirtschaftspr�fer
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.VereidigteBuchprferin">
            Vereidigte Buchpr�ferin
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.VereidigterBuchprfer">
            Vereidigter Buchpr�fer
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwltin">
            Patentanw�ltin
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.Patentanwalt">
            Patentanwalt
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             <p/>
             <pre>
                           ProfessionInfo ::= SEQUENCE
                           {
                             namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                             professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                             professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                             registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                             addProfessionInfo OCTET STRING OPTIONAL
                           }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.#ctor(EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.NamingAuthority,EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString[],EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier[],System.String,EnterpriseDT.BouncyCastle.Asn1.Asn1OctetString)">
             Constructor from given details.
             <p/>
             <code>professionItems</code> is mandatory, all other parameters are
             optional.
            
             @param namingAuthority    The naming authority.
             @param professionItems    Directory strings of the profession.
             @param professionOids     DERObjectIdentfier objects for the
                                       profession.
             @param registrationNumber Registration number.
             @param addProfessionInfo  Additional infos in encoded form.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                           ProfessionInfo ::= SEQUENCE
                           {
                             namingAuthority [0] EXPLICIT NamingAuthority OPTIONAL,
                             professionItems SEQUENCE OF DirectoryString (SIZE(1..128)),
                             professionOids SEQUENCE OF OBJECT IDENTIFIER OPTIONAL,
                             registrationNumber PrintableString(SIZE(1..128)) OPTIONAL,
                             addProfessionInfo OCTET STRING OPTIONAL
                           }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionItems">
            @return Returns the professionItems.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.GetProfessionOids">
            @return Returns the professionOids.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.AddProfessionInfo">
            @return Returns the addProfessionInfo.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.NamingAuthority">
            @return Returns the namingAuthority.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.ProfessionInfo.RegistrationNumber">
            @return Returns the registrationNumber.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Restriction">
            Some other restriction regarding the usage of this certificate.
            <p/>
            <pre>
             RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Restriction.#ctor(EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString)">
             Constructor from DirectoryString.
             <p/>
             The DirectoryString is of type RestrictionSyntax:
             <p/>
             <pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             </pre>
            
             @param restriction A IAsn1String.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Restriction.#ctor(System.String)">
             Constructor from a given details.
            
             @param restriction The description of the restriction.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.IsisMtt.X509.Restriction.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                  RestrictionSyntax ::= DirectoryString (SIZE(1..1024))
             <p/>
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Misc.Cast5CbcParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            cast5CBCParameters ::= Sequence {
                                      iv         OCTET STRING DEFAULT 0,
                                             -- Initialization vector
                                      keyLength  Integer
                                             -- Key length, in bits
                                 }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Misc.IdeaCbcPar.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            IDEA-CBCPar ::= Sequence {
                                 iv    OCTET STRING OPTIONAL -- exactly 8 octets
                             }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Misc.NetscapeCertType">
            The NetscapeCertType object.
            <pre>
               NetscapeCertType ::= BIT STRING {
                    SSLClient               (0),
                    SSLServer               (1),
                    S/MIME                  (2),
                    Object Signing          (3),
                    Reserved                (4),
                    SSL CA                  (5),
                    S/MIME CA               (6),
                    Object Signing CA       (7) }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Misc.NetscapeCertType.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (X509NetscapeCertType.sslCA | X509NetscapeCertType.smimeCA)
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Mozilla.PublicKeyAndChallenge">
             This is designed to parse
             the PublicKeyAndChallenge created by the KEYGEN tag included by
             Mozilla based browsers.
              <pre>
              PublicKeyAndChallenge ::= SEQUENCE {
                spki SubjectPublicKeyInfo,
                challenge IA5STRING
              }
            
              </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Nist.NistNamedCurves">
            Utility class for fetching curves using their NIST names as published in FIPS-PUB 186-3
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Nist.NistNamedCurves.GetByOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Nist.NistNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Nist.NistNamedCurves.GetName(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Nist.NistNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Ntt.NttObjectIdentifiers">
            <summary>From RFC 3657</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.BasicOcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            BasicOcspResponse       ::= Sequence {
                 tbsResponseData      ResponseData,
                 signatureAlgorithm   AlgorithmIdentifier,
                 signature            BIT STRING,
                 certs                [0] EXPLICIT Sequence OF Certificate OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.CertID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CertID          ::=     Sequence {
                hashAlgorithm       AlgorithmIdentifier,
                issuerNameHash      OCTET STRING, -- Hash of Issuer's DN
                issuerKeyHash       OCTET STRING, -- Hash of Issuers public key
                serialNumber        CertificateSerialNumber }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.CertStatus.#ctor">
            create a CertStatus object with a tag of zero.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.CertStatus.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             CertStatus ::= CHOICE {
                             good        [0]     IMPLICIT Null,
                             revoked     [1]     IMPLICIT RevokedInfo,
                             unknown     [2]     IMPLICIT UnknownInfo }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.CrlID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CrlID ::= Sequence {
                crlUrl               [0]     EXPLICIT IA5String OPTIONAL,
                crlNum               [1]     EXPLICIT Integer OPTIONAL,
                crlTime              [2]     EXPLICIT GeneralizedTime OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.OcspRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspRequest     ::=     Sequence {
                tbsRequest                  TBSRequest,
                optionalSignature   [0]     EXPLICIT Signature OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.OcspResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            OcspResponse ::= Sequence {
                responseStatus         OcspResponseStatus,
                responseBytes          [0] EXPLICIT ResponseBytes OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.OcspResponseStatus.#ctor(System.Int32)">
            The OcspResponseStatus enumeration.
            <pre>
            OcspResponseStatus ::= Enumerated {
                successful            (0),  --Response has valid confirmations
                malformedRequest      (1),  --Illegal confirmation request
                internalError         (2),  --Internal error in issuer
                tryLater              (3),  --Try again later
                                            --(4) is not used
                sigRequired           (5),  --Must sign the request
                unauthorized          (6)   --Request unauthorized
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.Request.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Request         ::=     Sequence {
                reqCert                     CertID,
                singleRequestExtensions     [0] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.ResponderID.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponderID ::= CHOICE {
                 byName          [1] Name,
                 byKey           [2] KeyHash }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.ResponseBytes.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseBytes ::=       Sequence {
                responseType   OBJECT IDENTIFIER,
                response       OCTET STRING }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.ResponseData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ResponseData ::= Sequence {
                version              [0] EXPLICIT Version DEFAULT v1,
                responderID              ResponderID,
                producedAt               GeneralizedTime,
                responses                Sequence OF SingleResponse,
                responseExtensions   [1] EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.RevokedInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            RevokedInfo ::= Sequence {
                 revocationTime              GeneralizedTime,
                 revocationReason    [0]     EXPLICIT CRLReason OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.ServiceLocator.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ServiceLocator ::= Sequence {
                issuer    Name,
                locator   AuthorityInfoAccessSyntax OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.Signature.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Signature       ::=     Sequence {
                signatureAlgorithm      AlgorithmIdentifier,
                signature               BIT STRING,
                certs               [0] EXPLICIT Sequence OF Certificate OPTIONAL}
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.SingleResponse.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             SingleResponse ::= Sequence {
                     certID                       CertID,
                     certStatus                   CertStatus,
                     thisUpdate                   GeneralizedTime,
                     nextUpdate         [0]       EXPLICIT GeneralizedTime OPTIONAL,
                     singleExtensions   [1]       EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Ocsp.TbsRequest.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            TBSRequest      ::=     Sequence {
                version             [0]     EXPLICIT Version DEFAULT v1,
                requestorName       [1]     EXPLICIT GeneralName OPTIONAL,
                requestList                 Sequence OF Request,
                requestExtensions   [2]     EXPLICIT Extensions OPTIONAL }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.AttributePkcs.GetInstance(System.Object)">
             return an Attribute object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.AttributePkcs.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Pkcs.CertificationRequest">
            Pkcs10 Certfication request object.
            <pre>
            CertificationRequest ::= Sequence {
              certificationRequestInfo  CertificationRequestInfo,
              signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
              signature                 BIT STRING
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Pkcs.CertificationRequestInfo">
             Pkcs10 CertificationRequestInfo object.
             <pre>
              CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.ContentInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            ContentInfo ::= Sequence {
                     contentType ContentType,
                     content
                     [0] EXPLICIT ANY DEFINED BY contentType OPTIONAL }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Pkcs.EncryptedData">
             The EncryptedData object.
             <pre>
                  EncryptedData ::= Sequence {
                       version Version,
                       encryptedContentInfo EncryptedContentInfo
                  }
            
            
                  EncryptedContentInfo ::= Sequence {
                      contentType ContentType,
                      contentEncryptionAlgorithm  ContentEncryptionAlgorithmIdentifier,
                      encryptedContent [0] IMPLICIT EncryptedContent OPTIONAL
                }
            
                EncryptedContent ::= OCTET STRING
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.EncryptedPrivateKeyInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
             EncryptedPrivateKeyInfo ::= Sequence {
                  encryptionAlgorithm AlgorithmIdentifier {{KeyEncryptionAlgorithms}},
                  encryptedData EncryptedData
             }
            
             EncryptedData ::= OCTET STRING
            
             KeyEncryptionAlgorithms ALGORITHM-IDENTIFIER ::= {
                      ... -- For local profiles
             }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AlgorithmIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
                 AlgorithmIdentifier ::= Sequence {
                                       algorithm OBJECT IDENTIFIER,
                                       parameters ANY DEFINED BY algorithm OPTIONAL }
            </pre>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.AlgorithmIdentifier.Algorithm">
            <summary>
            Return the OID in the Algorithm entry of this identifier.
            </summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.AlgorithmIdentifier.Parameters">
            <summary>
            Return the parameters structure in the Parameters entry of this identifier.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.MacData.ToAsn1Object">
            <pre>
            MacData ::= SEQUENCE {
                mac      DigestInfo,
                macSalt  OCTET STRING,
                iterations INTEGER DEFAULT 1
                -- Note: The default is for historic reasons and its use is deprecated. A
                -- higher value, like 1024 is recommended.
            </pre>
            @return the basic DERObject construction.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Pkcs.Pfx">
            the infamous Pfx from Pkcs12
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.PrivateKeyInfo.ToAsn1Object">
             write out an RSA private key with its associated information
             as described in Pkcs8.
             <pre>
                  PrivateKeyInfo ::= Sequence {
                                          version Version,
                                          privateKeyAlgorithm AlgorithmIdentifier {{PrivateKeyAlgorithms}},
                                          privateKey PrivateKey,
                                          attributes [0] IMPLICIT Attributes OPTIONAL
                                      }
                  Version ::= Integer {v1(0)} (v1,...)
            
                  PrivateKey ::= OCTET STRING
            
                  Attributes ::= Set OF Attr
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.#ctor">
            The default version
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.RsaesOaepParameters.ToAsn1Object">
             <pre>
              RSAES-OAEP-params ::= SEQUENCE {
                 hashAlgorithm      [0] OAEP-PSSDigestAlgorithms     DEFAULT sha1,
                 maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                 pSourceAlgorithm   [2] PKCS1PSourceAlgorithms  DEFAULT pSpecifiedEmpty
               }
            
               OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-sha1 PARAMETERS NULL   }|
                 { OID id-sha256 PARAMETERS NULL }|
                 { OID id-sha384 PARAMETERS NULL }|
                 { OID id-sha512 PARAMETERS NULL },
                 ...  -- Allows for future expansion --
               }
               PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
               }
               PKCS1PSourceAlgorithms    ALGORITHM-IDENTIFIER ::= {
                 { OID id-pSpecified PARAMETERS OCTET STRING },
                 ...  -- Allows for future expansion --
              }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.RsaPrivateKeyStructure.ToAsn1Object">
             This outputs the key in Pkcs1v2 format.
             <pre>
                  RsaPrivateKey ::= Sequence {
                                      version Version,
                                      modulus Integer, -- n
                                      publicExponent Integer, -- e
                                      privateExponent Integer, -- d
                                      prime1 Integer, -- p
                                      prime2 Integer, -- q
                                      exponent1 Integer, -- d mod (p-1)
                                      exponent2 Integer, -- d mod (q-1)
                                      coefficient Integer -- (inverse of q) mod p
                                  }
            
                  Version ::= Integer
             </pre>
             <p>This routine is written to output Pkcs1 version 0, private keys.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.#ctor">
            The default version
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.RsassaPssParameters.ToAsn1Object">
             <pre>
             RSASSA-PSS-params ::= SEQUENCE {
               hashAlgorithm      [0] OAEP-PSSDigestAlgorithms  DEFAULT sha1,
                maskGenAlgorithm   [1] PKCS1MGFAlgorithms  DEFAULT mgf1SHA1,
                saltLength         [2] INTEGER  DEFAULT 20,
                trailerField       [3] TrailerField  DEFAULT trailerFieldBC
              }
            
             OAEP-PSSDigestAlgorithms    ALGORITHM-IDENTIFIER ::= {
                { OID id-sha1 PARAMETERS NULL   }|
                { OID id-sha256 PARAMETERS NULL }|
                { OID id-sha384 PARAMETERS NULL }|
                { OID id-sha512 PARAMETERS NULL },
                ...  -- Allows for future expansion --
             }
            
             PKCS1MGFAlgorithms    ALGORITHM-IDENTIFIER ::= {
               { OID id-mgf1 PARAMETERS OAEP-PSSDigestAlgorithms },
                ...  -- Allows for future expansion --
             }
            
             TrailerField ::= INTEGER { trailerFieldBC(1) }
             </pre>
             @return the asn1 primitive representing the parameters.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Pkcs.SignedData">
            a Pkcs#7 signed data object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.SignedData.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             SignedData ::= Sequence {
                 version Version,
                 digestAlgorithms DigestAlgorithmIdentifiers,
                 contentInfo ContentInfo,
                 certificates
                     [0] IMPLICIT ExtendedCertificatesAndCertificates
                              OPTIONAL,
                 crls
                     [1] IMPLICIT CertificateRevocationLists OPTIONAL,
                 signerInfos SignerInfos }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Pkcs.SignerInfo">
            a Pkcs#7 signer info object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Pkcs.SignerInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              SignerInfo ::= Sequence {
                  version Version,
                  issuerAndSerialNumber IssuerAndSerialNumber,
                  digestAlgorithm DigestAlgorithmIdentifier,
                  authenticatedAttributes [0] IMPLICIT Attributes OPTIONAL,
                  digestEncryptionAlgorithm DigestEncryptionAlgorithmIdentifier,
                  encryptedDigest EncryptedDigest,
                  unauthenticatedAttributes [1] IMPLICIT Attributes OPTIONAL
              }
            
              EncryptedDigest ::= OCTET STRING
            
              DigestAlgorithmIdentifier ::= AlgorithmIdentifier
            
              DigestEncryptionAlgorithmIdentifier ::= AlgorithmIdentifier
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure">
            the elliptic curve private key object from SEC 1
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Sec.ECPrivateKeyStructure.ToAsn1Object">
            ECPrivateKey ::= SEQUENCE {
                version INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
                privateKey OCTET STRING,
                parameters [0] Parameters OPTIONAL,
                publicKey [1] BIT STRING OPTIONAL }
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Sec.SecNamedCurves.GetByOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Sec.SecNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Sec.SecNamedCurves.GetName(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.Sec.SecNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.Sec.SecObjectIdentifiers.EllipticCurve">
            EllipticCurve OBJECT IDENTIFIER ::= {
                  iso(1) identified-organization(3) certicom(132) curve(0)
            }
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapabilities">
            Handler class for dealing with S/MIME Capabilities
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapabilities.PreferSignedData">
            general preferences
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapabilities.Aes256Cbc">
            encryption algorithms preferences
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapabilities.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapabilities.GetCapabilitiesForOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            returns an ArrayList with 0 or more objects of all the capabilities
            matching the passed in capability Oid. If the Oid passed is null the
            entire set is returned.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapabilities.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapabilities ::= Sequence OF SMIMECapability
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AttributeX509.GetInstance(System.Object)">
             return an Attr object from the given object.
            
             @param o the object we want converted.
             @exception ArgumentException if the object cannot be converted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AttributeX509.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Attr ::= Sequence {
                attrType OBJECT IDENTIFIER,
                attrValues Set OF AttributeValue
            }
            </pre>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapability.PreferSignedData">
            general preferences
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapability.DesCbc">
            encryption algorithms preferences
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapability.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SMIMECapability ::= Sequence {
                capabilityID OBJECT IDENTIFIER,
                parameters ANY DEFINED BY capabilityID OPTIONAL
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeCapabilityVector">
            Handler for creating a vector S/MIME Capabilities
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute">
            The SmimeEncryptionKeyPreference object.
            <pre>
            SmimeEncryptionKeyPreference ::= CHOICE {
                issuerAndSerialNumber   [0] IssuerAndSerialNumber,
                receipentKeyId          [1] RecipientKeyIdentifier,
                subjectAltKeyIdentifier [2] SubjectKeyIdentifier
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Smime.SmimeEncryptionKeyPreferenceAttribute.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1OctetString)">
            @param sKeyId the subjectKeyIdentifier value (normally the X.509 one)
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves">
            elliptic curves defined in "ECC Brainpool Standard Curves and Curve Generation"
            http://www.ecc-brainpool.org/download/draft_pkix_additional_ecc_dp.txt
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetByOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.GetName(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.TeleTrust.TeleTrusTNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Tsp.Accuracy.ToAsn1Object">
            <pre>
            Accuracy ::= SEQUENCE {
                        seconds        INTEGER              OPTIONAL,
                        millis     [0] INTEGER  (1..999)    OPTIONAL,
                        micros     [1] INTEGER  (1..999)    OPTIONAL
                        }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Tsp.MessageImprint.GetInstance(System.Object)">
            @param o
            @return a MessageImprint object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Tsp.MessageImprint.ToAsn1Object">
            <pre>
               MessageImprint ::= SEQUENCE  {
                  hashAlgorithm                AlgorithmIdentifier,
                  hashedMessage                OCTET STRING  }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Tsp.TimeStampReq.ToAsn1Object">
            <pre>
            TimeStampReq ::= SEQUENCE  {
             version                      INTEGER  { v1(1) },
             messageImprint               MessageImprint,
               --a hash algorithm OID and the hash value of the data to be
               --time-stamped
             reqPolicy             TSAPolicyId              OPTIONAL,
             nonce                 INTEGER                  OPTIONAL,
             certReq               BOOLEAN                  DEFAULT FALSE,
             extensions            [0] IMPLICIT Extensions  OPTIONAL
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Tsp.TimeStampResp.ToAsn1Object">
            <pre>
            TimeStampResp ::= SEQUENCE  {
              status                  PkiStatusInfo,
              timeStampToken          TimeStampToken     OPTIONAL  }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Tsp.TstInfo.ToAsn1Object">
             <pre>
            
                 TstInfo ::= SEQUENCE  {
                    version                      INTEGER  { v1(1) },
                    policy                       TSAPolicyId,
                    messageImprint               MessageImprint,
                      -- MUST have the same value as the similar field in
                      -- TimeStampReq
                    serialNumber                 INTEGER,
                     -- Time-Stamping users MUST be ready to accommodate integers
                     -- up to 160 bits.
                    genTime                      GeneralizedTime,
                    accuracy                     Accuracy                 OPTIONAL,
                    ordering                     BOOLEAN             DEFAULT FALSE,
                    nonce                        INTEGER                  OPTIONAL,
                      -- MUST be present if the similar field was present
                      -- in TimeStampReq.  In that case it MUST have the same value.
                    tsa                          [0] GeneralName          OPTIONAL,
                    extensions                   [1] IMPLICIT Extensions   OPTIONAL  }
            
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Utilities.Asn1Dump.AsString(System.String,System.Boolean,EnterpriseDT.BouncyCastle.Asn1.Asn1Object,System.Text.StringBuilder)">
             dump a Der object as a formatted string with indentation
            
             @param obj the Asn1Object to be dumped out.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Utilities.Asn1Dump.DumpAsString(EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
             dump out a DER object as a formatted string, in non-verbose mode
            
             @param obj the Asn1Encodable to be dumped out.
             @return  the resulting string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.Utilities.Asn1Dump.DumpAsString(EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable,System.Boolean)">
             Dump out the object as a string
            
             @param obj the Asn1Encodable to be dumped out.
             @param verbose  if true, dump out the contents of octet and bit strings.
             @return  the resulting string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString.ToAsn1Object">
            <pre>
             DirectoryString ::= CHOICE {
               teletexString               TeletexString (SIZE (1..MAX)),
               printableString             PrintableString (SIZE (1..MAX)),
               universalString             UniversalString (SIZE (1..MAX)),
               utf8String                  UTF8String (SIZE (1..MAX)),
               bmpString                   BMPString (SIZE (1..MAX))  }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.AccessDescription">
            The AccessDescription object.
            <pre>
            AccessDescription  ::=  SEQUENCE {
                  accessMethod          OBJECT IDENTIFIER,
                  accessLocation        GeneralName  }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AccessDescription.#ctor(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName)">
            create an AccessDescription with the oid and location provided.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.AccessDescription.AccessMethod">
            
             @return the access method.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.AccessDescription.AccessLocation">
            
             @return the access location
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AttCertIssuer.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralNames)">
            <summary>
            Don't use this one if you are trying to be RFC 3281 compliant.
            Use it for v1 attribute certificates only.
            </summary>
            <param name="names">Our GeneralNames structure</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AttCertIssuer.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertIssuer ::= CHOICE {
                  v1Form   GeneralNames,  -- MUST NOT be used in this
                                          -- profile
                  v2Form   [0] V2Form     -- v2 only
             }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AttCertValidityPeriod.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttCertValidityPeriod  ::= Sequence {
                  notBeforeTime  GeneralizedTime,
                  notAfterTime   GeneralizedTime
             }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AttributeCertificate.GetInstance(System.Object)">
            @param obj
            @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AttributeCertificate.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             AttributeCertificate ::= Sequence {
                  acinfo               AttributeCertificateInfo,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING
             }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AttributeCertificateInfo.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <pre>
              AttributeCertificateInfo ::= Sequence {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           Sequence OF Attr,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
              }
            
              AttCertVersion ::= Integer { v2(1) }
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.AuthorityInformationAccess">
             The AuthorityInformationAccess object.
             <pre>
             id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }
            
             AuthorityInfoAccessSyntax  ::=
                  Sequence SIZE (1..MAX) OF AccessDescription
             AccessDescription  ::=  Sequence {
                   accessMethod          OBJECT IDENTIFIER,
                   accessLocation        GeneralName  }
            
             id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
             id-ad-caIssuers OBJECT IDENTIFIER ::= { id-ad 2 }
             id-ad-ocsp OBJECT IDENTIFIER ::= { id-ad 1 }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AuthorityInformationAccess.#ctor(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName)">
            create an AuthorityInformationAccess with the oid and location provided.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier">
             The AuthorityKeyIdentifier object.
             <pre>
             id-ce-authorityKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 35 }
            
               AuthorityKeyIdentifier ::= Sequence {
                  keyIdentifier             [0] IMPLICIT KeyIdentifier           OPTIONAL,
                  authorityCertIssuer       [1] IMPLICIT GeneralNames            OPTIONAL,
                  authorityCertSerialNumber [2] IMPLICIT CertificateSerialNumber OPTIONAL  }
            
               KeyIdentifier ::= OCTET STRING
             </pre>
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
                     *
                     * Calulates the keyidentifier using a SHA1 hash over the BIT STRING
                     * from SubjectPublicKeyInfo as defined in RFC2459.
                     *
                     * Example of making a AuthorityKeyIdentifier:
                     * <pre>
            	     *   SubjectPublicKeyInfo apki = new SubjectPublicKeyInfo((ASN1Sequence)new ASN1InputStream(
            		 *       publicKey.getEncoded()).readObject());
                     *   AuthorityKeyIdentifier aki = new AuthorityKeyIdentifier(apki);
                     * </pre>
                     *
                     *
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo,EnterpriseDT.BouncyCastle.Asn1.X509.GeneralNames,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            create an AuthorityKeyIdentifier with the GeneralNames tag and
            the serial number provided as well.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralNames,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            create an AuthorityKeyIdentifier with the GeneralNames tag and
            the serial number provided.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[])">
            create an AuthorityKeyIdentifier with a precomputed key identifier
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.#ctor(System.Byte[],EnterpriseDT.BouncyCastle.Asn1.X509.GeneralNames,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            create an AuthorityKeyIdentifier with a precomupted key identifier
            and the GeneralNames tag and the serial number provided as well.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.AuthorityKeyIdentifier.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.BasicConstraints.#ctor(System.Int32)">
             create a cA=true object for the given path length constraint.
            
             @param pathLenConstraint
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.BasicConstraints.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            BasicConstraints := Sequence {
               cA                  Boolean DEFAULT FALSE,
               pathLenConstraint   Integer (0..MAX) OPTIONAL
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.CertificateList">
             PKIX RFC-2459
            
             The X.509 v2 CRL syntax is as follows.  For signature calculation,
             the data that is to be signed is ASN.1 Der encoded.
            
             <pre>
             CertificateList  ::=  Sequence  {
                  tbsCertList          TbsCertList,
                  signatureAlgorithm   AlgorithmIdentifier,
                  signatureValue       BIT STRING  }
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.CertificatePair">
             This class helps to support crossCerfificatePairs in a LDAP directory
             according RFC 2587
            
             <pre>
                 crossCertificatePairATTRIBUTE::={
                   WITH SYNTAX   CertificatePair
                   EQUALITY MATCHING RULE certificatePairExactMatch
                   ID joint-iso-ccitt(2) ds(5) attributeType(4) crossCertificatePair(40)}
             </pre>
            
             <blockquote> The forward elements of the crossCertificatePair attribute of a
             CA's directory entry shall be used to store all, except self-issued
             certificates issued to this CA. Optionally, the reverse elements of the
             crossCertificatePair attribute, of a CA's directory entry may contain a
             subset of certificates issued by this CA to other CAs. When both the forward
             and the reverse elements are present in a single attribute value, issuer name
             in one certificate shall match the subject name in the other and vice versa,
             and the subject public key in one certificate shall be capable of verifying
             the digital signature on the other certificate and vice versa.
            
             When a reverse element is present, the forward element value and the reverse
             element value need not be stored in the same attribute value; in other words,
             they can be stored in either a single attribute value or two attribute
             values. </blockquote>
            
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.CertificatePair.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type CertificatePair:
             <p/>
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.CertificatePair.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.X509CertificateStructure,EnterpriseDT.BouncyCastle.Asn1.X509.X509CertificateStructure)">
             Constructor from a given details.
            
             @param forward Certificates issued to this CA.
             @param reverse Certificates issued by this CA to other CAs.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.CertificatePair.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   CertificatePair ::= SEQUENCE {
                     forward		[0]	Certificate OPTIONAL,
                     reverse		[1]	Certificate OPTIONAL,
                     -- at least one of the pair shall be present -- }
             </pre>
            
             @return a DERObject
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.CertificatePair.Forward">
            @return Returns the forward.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.CertificatePair.Reverse">
            @return Returns the reverse.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.CertificatePolicies.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.PolicyInformation)">
            Construct a CertificatePolicies object containing one PolicyInformation.
            
            @param name the name to be contained.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.CertificatePolicies.ToAsn1Object">
            Produce an object suitable for an ASN1OutputStream.
            <pre>
            CertificatePolicies ::= SEQUENCE SIZE {1..MAX} OF PolicyInformation
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.CertPolicyID">
             CertPolicyId, used in the CertificatePolicies and PolicyMappings
             X509V3 Extensions.
            
             <pre>
                 CertPolicyId ::= OBJECT IDENTIFIER
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.CrlDistPoint.GetDistributionPoints">
             Return the distribution points making up the sequence.
            
             @return DistributionPoint[]
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.CrlDistPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            CrlDistPoint ::= Sequence SIZE {1..MAX} OF DistributionPoint
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.CrlNumber">
            The CRLNumber object.
            <pre>
            CRLNumber::= Integer(0..MAX)
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.CrlReason">
            The CRLReason enumeration.
            <pre>
            CRLReason ::= Enumerated {
             unspecified             (0),
             keyCompromise           (1),
             cACompromise            (2),
             affiliationChanged      (3),
             superseded              (4),
             cessationOfOperation    (5),
             certificateHold         (6),
             removeFromCRL           (8),
             privilegeWithdrawn      (9),
             aACompromise           (10)
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.DigestInfo">
            The DigestInfo object.
            <pre>
            DigestInfo::=Sequence{
                     digestAlgorithm  AlgorithmIdentifier,
                     digest OCTET STRING }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText">
             <code>DisplayText</code> class, used in
             <code>CertificatePolicies</code> X509 V3 extensions (in policy qualifiers).
            
             <p>It stores a string in a chosen encoding.
             <pre>
             DisplayText ::= CHOICE {
                  ia5String        IA5String      (SIZE (1..200)),
                  visibleString    VisibleString  (SIZE (1..200)),
                  bmpString        BMPString      (SIZE (1..200)),
                  utf8String       UTF8String     (SIZE (1..200)) }
             </pre></p>
             @see PolicyQualifierInfo
             @see PolicyInformation
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText.ContentTypeIA5String">
             Constant corresponding to ia5String encoding.
            
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText.ContentTypeBmpString">
             Constant corresponding to bmpString encoding.
            
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText.ContentTypeUtf8String">
             Constant corresponding to utf8String encoding.
            
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText.ContentTypeVisibleString">
             Constant corresponding to visibleString encoding.
            
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText.DisplayTextMaximumSize">
             Describe constant <code>DisplayTextMaximumSize</code> here.
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText.#ctor(System.Int32,System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param type the desired encoding type for the text.
             @param text the text to store. Strings longer than 200
             characters are truncated.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText.#ctor(System.String)">
             Creates a new <code>DisplayText</code> instance.
            
             @param text the text to encapsulate. Strings longer than 200
             characters are truncated.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText.#ctor(EnterpriseDT.BouncyCastle.Asn1.IAsn1String)">
             Creates a new <code>DisplayText</code> instance.
             <p>Useful when reading back a <code>DisplayText</code> class
             from it's Asn1Encodable form.</p>
            
             @param contents an <code>Asn1Encodable</code> instance.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText.GetString">
             Returns the stored <code>string</code> object.
            
             @return the stored text as a <code>string</code>.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.DistributionPoint">
            The DistributionPoint object.
            <pre>
            DistributionPoint ::= Sequence {
                 distributionPoint [0] DistributionPointName OPTIONAL,
                 reasons           [1] ReasonFlags OPTIONAL,
                 cRLIssuer         [2] GeneralNames OPTIONAL
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.DistributionPointName">
            The DistributionPointName object.
            <pre>
            DistributionPointName ::= CHOICE {
                fullName                 [0] GeneralNames,
                nameRelativeToCRLIssuer  [1] RDN
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.ExtendedKeyUsage">
            The extendedKeyUsage object.
            <pre>
                 extendedKeyUsage ::= Sequence SIZE (1..MAX) OF KeyPurposeId
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.ExtendedKeyUsage.GetAllUsages">
            Returns all extended key usages.
            The returned ArrayList contains DerObjectIdentifier instances.
            @return An ArrayList with all key purposes.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName">
             The GeneralName object.
             <pre>
             GeneralName ::= CHOICE {
                  otherName                       [0]     OtherName,
                  rfc822Name                      [1]     IA5String,
                  dNSName                         [2]     IA5String,
                  x400Address                     [3]     ORAddress,
                  directoryName                   [4]     Name,
                  ediPartyName                    [5]     EDIPartyName,
                  uniformResourceIdentifier       [6]     IA5String,
                  iPAddress                       [7]     OCTET STRING,
                  registeredID                    [8]     OBJECT IDENTIFIER}
            
             OtherName ::= Sequence {
                  type-id    OBJECT IDENTIFIER,
                  value      [0] EXPLICIT ANY DEFINED BY type-id }
            
             EDIPartyName ::= Sequence {
                  nameAssigner            [0]     DirectoryString OPTIONAL,
                  partyName               [1]     DirectoryString }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Object,System.Int32)">
             When the subjectAltName extension contains an Internet mail address,
             the address MUST be included as an rfc822Name. The format of an
             rfc822Name is an "addr-spec" as defined in RFC 822 [RFC 822].
            
             When the subjectAltName extension contains a domain name service
             label, the domain name MUST be stored in the dNSName (an IA5String).
             The name MUST be in the "preferred name syntax," as specified by RFC
             1034 [RFC 1034].
            
             When the subjectAltName extension contains a URI, the name MUST be
             stored in the uniformResourceIdentifier (an IA5String). The name MUST
             be a non-relative URL, and MUST follow the URL syntax and encoding
             rules specified in [RFC 1738].  The name must include both a scheme
             (e.g., "http" or "ftp") and a scheme-specific-part.  The scheme-
             specific-part must include a fully qualified domain name or IP
             address as the host.
            
             When the subjectAltName extension contains a iPAddress, the address
             MUST be stored in the octet string in "network byte order," as
             specified in RFC 791 [RFC 791]. The least significant bit (LSB) of
             each octet is the LSB of the corresponding byte in the network
             address. For IP Version 4, as specified in RFC 791, the octet string
             MUST contain exactly four octets.  For IP Version 6, as specified in
             RFC 1883, the octet string MUST contain exactly sixteen octets [RFC
             1883].
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName.#ctor(System.Int32,System.String)">
             Create a GeneralName for the given tag from the passed in string.
             <p>
             This constructor can handle:
             <ul>
             <li>rfc822Name</li>
             <li>iPAddress</li>
             <li>directoryName</li>
             <li>dNSName</li>
             <li>uniformResourceIdentifier</li>
             <li>registeredID</li>
             </ul>
             For x400Address, otherName and ediPartyName there is no common string
             format defined.
             </p><p>
             Note: A directory name can be encoded in different ways into a byte
             representation. Be aware of this if the byte representation is used for
             comparing results.
             </p>
            
             @param tag tag number
             @param name string representation of name
             @throws ArgumentException if the string encoding is not correct or
                         not supported.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.GeneralNames.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName)">
            <summary>Construct a GeneralNames object containing one GeneralName.</summary>
            <param name="name">The name to be contained.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.GeneralNames.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            GeneralNames ::= Sequence SIZE {1..MAX} OF GeneralName
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.GeneralSubtree">
             Class for containing a restriction object subtrees in NameConstraints. See
             RFC 3280.
            
             <pre>
            
                   GeneralSubtree ::= SEQUENCE
                   {
                     baseName                    GeneralName,
                     minimum         [0]     BaseDistance DEFAULT 0,
                     maximum         [1]     BaseDistance OPTIONAL
                   }
             </pre>
            
             @see org.bouncycastle.asn1.x509.NameConstraints
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.GeneralSubtree.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
             Constructor from a given details.
            
             According RFC 3280, the minimum and maximum fields are not used with any
             name forms, thus minimum MUST be zero, and maximum MUST be absent.
             <p>
             If minimum is <code>null</code>, zero is assumed, if
             maximum is <code>null</code>, maximum is absent.</p>
            
             @param baseName
                        A restriction.
             @param minimum
                        Minimum
            
             @param maximum
                        Maximum
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.GeneralSubtree.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                   GeneralSubtree ::= SEQUENCE
                   {
                     baseName                    GeneralName,
                     minimum         [0]     BaseDistance DEFAULT 0,
                     maximum         [1]     BaseDistance OPTIONAL
                   }
             </pre>
            
             @return a DERObject
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.Holder">
            The Holder object.
            <p>
            For an v2 attribute certificate this is:
            
            <pre>
                       Holder ::= SEQUENCE {
                             baseCertificateID   [0] IssuerSerial OPTIONAL,
                                      -- the issuer and serial number of
                                      -- the holder's Public Key Certificate
                             entityName          [1] GeneralNames OPTIONAL,
                                      -- the name of the claimant or role
                             objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                                      -- used to directly authenticate the holder,
                                      -- for example, an executable
                       }
            </pre>
            </p>
            <p>
            For an v1 attribute certificate this is:
            
            <pre>
                    subject CHOICE {
                     baseCertificateID [0] IssuerSerial,
                     -- associated with a Public Key Certificate
                     subjectName [1] GeneralNames },
                     -- associated with a name
            </pre>
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Holder.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject)">
            Constructor for a holder for an v1 attribute certificate.
            
            @param tagObj The ASN.1 tagged holder object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Holder.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor for a holder for an v2 attribute certificate. *
            
            @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Holder.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.IssuerSerial,System.Int32)">
            Constructs a holder from a IssuerSerial.
            @param baseCertificateID The IssuerSerial.
            @param version The version of the attribute certificate. 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Holder.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralNames)">
            Constructs a holder with an entityName for v2 attribute certificates or
            with a subjectName for v1 attribute certificates.
            
            @param entityName The entity or subject name.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Holder.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralNames,System.Int32)">
            Constructs a holder with an entityName for v2 attribute certificates or
            with a subjectName for v1 attribute certificates.
            
            @param entityName The entity or subject name.
            @param version The version of the attribute certificate. 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Holder.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.ObjectDigestInfo)">
            Constructs a holder from an object digest info.
            
            @param objectDigestInfo The object digest info object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Holder.ToAsn1Object">
            The Holder object.
            <pre>
             Holder ::= Sequence {
                   baseCertificateID   [0] IssuerSerial OPTIONAL,
                            -- the issuer and serial number of
                            -- the holder's Public Key Certificate
                   entityName          [1] GeneralNames OPTIONAL,
                            -- the name of the claimant or role
                   objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
                            -- used to directly authenticate the holder,
                            -- for example, an executable
             }
            </pre>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.Holder.Version">
            Returns 1 for v2 attribute certificates or 0 for v1 attribute
            certificates. 
            @return The version of the attribute certificate.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.Holder.EntityName">
            Returns the entityName for an v2 attribute certificate or the subjectName
            for an v1 attribute certificate.
            
            @return The entityname or subjectname.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.IetfAttrSyntax">
            Implementation of <code>IetfAttrSyntax</code> as specified by RFC3281.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.IetfAttrSyntax.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.IetfAttrSyntax.ToAsn1Object">
            
             <pre>
            
              IetfAttrSyntax ::= Sequence {
                policyAuthority [0] GeneralNames OPTIONAL,
                values Sequence OF CHOICE {
                  octets OCTET STRING,
                  oid OBJECT IDENTIFIER,
                  string UTF8String
                }
              }
            
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.IssuerSerial.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             IssuerSerial  ::=  Sequence {
                  issuer         GeneralNames,
                  serial         CertificateSerialNumber,
                  issuerUid      UniqueIdentifier OPTIONAL
             }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.IssuingDistributionPoint">
            <pre>
            IssuingDistributionPoint ::= SEQUENCE { 
              distributionPoint          [0] DistributionPointName OPTIONAL, 
              onlyContainsUserCerts      [1] BOOLEAN DEFAULT FALSE, 
              onlyContainsCACerts        [2] BOOLEAN DEFAULT FALSE, 
              onlySomeReasons            [3] ReasonFlags OPTIONAL, 
              indirectCRL                [4] BOOLEAN DEFAULT FALSE,
              onlyContainsAttributeCerts [5] BOOLEAN DEFAULT FALSE }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.IssuingDistributionPoint.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.DistributionPointName,System.Boolean,System.Boolean,EnterpriseDT.BouncyCastle.Asn1.X509.ReasonFlags,System.Boolean,System.Boolean)">
            Constructor from given details.
            
            @param distributionPoint
                       May contain an URI as pointer to most current CRL.
            @param onlyContainsUserCerts Covers revocation information for end certificates.
            @param onlyContainsCACerts Covers revocation information for CA certificates.
            
            @param onlySomeReasons
                       Which revocation reasons does this point cover.
            @param indirectCRL
                       If <code>true</code> then the CRL contains revocation
                       information about certificates ssued by other CAs.
            @param onlyContainsAttributeCerts Covers revocation information for attribute certificates.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.IssuingDistributionPoint.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor from Asn1Sequence
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.IssuingDistributionPoint.DistributionPoint">
            @return Returns the distributionPoint.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.IssuingDistributionPoint.OnlySomeReasons">
            @return Returns the onlySomeReasons.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.KeyPurposeID">
            The KeyPurposeID object.
            <pre>
                KeyPurposeID ::= OBJECT IDENTIFIER
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.KeyUsage">
             The KeyUsage object.
             <pre>
                id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
            
                KeyUsage ::= BIT STRING {
                     digitalSignature        (0),
                     nonRepudiation          (1),
                     keyEncipherment         (2),
                     dataEncipherment        (3),
                     keyAgreement            (4),
                     keyCertSign             (5),
                     cRLSign                 (6),
                     encipherOnly            (7),
                     decipherOnly            (8) }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.KeyUsage.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (KeyUsage.keyEncipherment | KeyUsage.dataEncipherment)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.NameConstraints.#ctor(System.Collections.IList,System.Collections.IList)">
             Constructor from a given details.
            
             <p>permitted and excluded are Vectors of GeneralSubtree objects.</p>
            
             @param permitted Permitted subtrees
             @param excluded Excluded subtrees
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.NoticeReference">
             <code>NoticeReference</code> class, used in
             <code>CertificatePolicies</code> X509 V3 extensions
             (in policy qualifiers).
            
             <pre>
              NoticeReference ::= Sequence {
                  organization     DisplayText,
                  noticeNumbers    Sequence OF Integer }
            
             </pre>
            
             @see PolicyQualifierInfo
             @see PolicyInformation
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.NoticeReference.#ctor(System.String,System.Collections.IList)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param organization a <code>String</code> value
             @param numbers a <code>Vector</code> value
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.NoticeReference.#ctor(System.String,EnterpriseDT.BouncyCastle.Asn1.Asn1EncodableVector)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param organization a <code>String</code> value
             @param noticeNumbers an <code>ASN1EncodableVector</code> value
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.NoticeReference.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText,EnterpriseDT.BouncyCastle.Asn1.Asn1EncodableVector)">
             Creates a new <code>NoticeReference</code> instance.
            
             @param organization displayText
             @param noticeNumbers an <code>ASN1EncodableVector</code> value
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.NoticeReference.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>NoticeReference</code> instance.
             <p>Useful for reconstructing a <code>NoticeReference</code>
             instance from its encodable/encoded form.</p>
            
             @param as an <code>Asn1Sequence</code> value obtained from either
             calling @{link ToAsn1Object()} for a <code>NoticeReference</code>
             instance or from parsing it from a Der-encoded stream.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.NoticeReference.ToAsn1Object">
             Describe <code>ToAsn1Object</code> method here.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.ObjectDigestInfo">
            ObjectDigestInfo ASN.1 structure used in v2 attribute certificates.
            
            <pre>
             
               ObjectDigestInfo ::= SEQUENCE {
                    digestedObjectType  ENUMERATED {
                            publicKey            (0),
                            publicKeyCert        (1),
                            otherObjectTypes     (2) },
                                    -- otherObjectTypes MUST NOT
                                    -- be used in this profile
                    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                    digestAlgorithm     AlgorithmIdentifier,
                    objectDigest        BIT STRING
               }
              
            </pre>
            
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.ObjectDigestInfo.PublicKey">
            The public key is hashed.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.ObjectDigestInfo.PublicKeyCert">
            The public key certificate is hashed.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.ObjectDigestInfo.OtherObjectDigest">
            An other object is hashed.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.ObjectDigestInfo.#ctor(System.Int32,System.String,EnterpriseDT.BouncyCastle.Asn1.X509.AlgorithmIdentifier,System.Byte[])">
            Constructor from given details.
            <p>
            If <code>digestedObjectType</code> is not {@link #publicKeyCert} or
            {@link #publicKey} <code>otherObjectTypeID</code> must be given,
            otherwise it is ignored.</p>
            
            @param digestedObjectType The digest object type.
            @param otherObjectTypeID The object type ID for
                       <code>otherObjectDigest</code>.
            @param digestAlgorithm The algorithm identifier for the hash.
            @param objectDigest The hash value.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.ObjectDigestInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            <pre>
             
               ObjectDigestInfo ::= SEQUENCE {
                    digestedObjectType  ENUMERATED {
                            publicKey            (0),
                            publicKeyCert        (1),
                            otherObjectTypes     (2) },
                                    -- otherObjectTypes MUST NOT
                                    -- be used in this profile
                    otherObjectTypeID   OBJECT IDENTIFIER OPTIONAL,
                    digestAlgorithm     AlgorithmIdentifier,
                    objectDigest        BIT STRING
               }
              
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.PolicyMappings">
             PolicyMappings V3 extension, described in RFC3280.
             <pre>
                PolicyMappings ::= Sequence SIZE (1..MAX) OF Sequence {
                  issuerDomainPolicy      CertPolicyId,
                  subjectDomainPolicy     CertPolicyId }
             </pre>
            
             @see <a href="http://www.faqs.org/rfc/rfc3280.txt">RFC 3280, section 4.2.1.6</a>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.PolicyMappings.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>PolicyMappings</code> instance.
            
             @param seq an <code>Asn1Sequence</code> constructed as specified
             in RFC 3280
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.PolicyMappings.#ctor(System.Collections.IDictionary)">
             Creates a new <code>PolicyMappings</code> instance.
            
             @param mappings a <code>HashMap</code> value that maps
             <code>string</code> oids
             to other <code>string</code> oids.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.PolicyQualifierID">
             PolicyQualifierId, used in the CertificatePolicies
             X509V3 extension.
            
             <pre>
                id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }
                id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
                id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
              PolicyQualifierId ::=
                   OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.PolicyQualifierInfo">
             Policy qualifiers, used in the X509V3 CertificatePolicies
             extension.
            
             <pre>
               PolicyQualifierInfo ::= Sequence {
                   policyQualifierId  PolicyQualifierId,
                   qualifier          ANY DEFINED BY policyQualifierId }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.PolicyQualifierInfo.#ctor(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param policyQualifierId a <code>PolicyQualifierId</code> value
             @param qualifier the qualifier, defined by the above field.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.PolicyQualifierInfo.#ctor(System.String)">
             Creates a new <code>PolicyQualifierInfo</code> containing a
             cPSuri qualifier.
            
             @param cps the CPS (certification practice statement) uri as a
             <code>string</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.PolicyQualifierInfo.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>PolicyQualifierInfo</code> instance.
            
             @param as <code>PolicyQualifierInfo</code> X509 structure
             encoded as an Asn1Sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.PolicyQualifierInfo.ToAsn1Object">
             Returns a Der-encodable representation of this instance.
            
             @return a <code>Asn1Object</code> value
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.PrivateKeyUsagePeriod">
            <remarks>
            <pre>
            PrivateKeyUsagePeriod ::= SEQUENCE
            {
            notBefore       [0]     GeneralizedTime OPTIONAL,
            notAfter        [1]     GeneralizedTime OPTIONAL }
            </pre>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.ReasonFlags">
            The ReasonFlags object.
            <pre>
            ReasonFlags ::= BIT STRING {
               unused(0),
               keyCompromise(1),
               cACompromise(2),
               affiliationChanged(3),
               superseded(4),
               cessationOfOperation(5),
               certficateHold(6)
            }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.ReasonFlags.#ctor(System.Int32)">
            @param reasons - the bitwise OR of the Key Reason flags giving the
            allowed uses for the key.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax">
             Implementation of the RoleSyntax object as specified by the RFC3281.
            
             <pre>
             RoleSyntax ::= SEQUENCE {
                             roleAuthority  [0] GeneralNames OPTIONAL,
                             roleName       [1] GeneralName
                       }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.GetInstance(System.Object)">
            RoleSyntax factory method.
            @param obj the object used to construct an instance of <code>
            RoleSyntax</code>. It must be an instance of <code>RoleSyntax
            </code> or <code>Asn1Sequence</code>.
            @return the instance of <code>RoleSyntax</code> built from the
            supplied object.
            @throws java.lang.ArgumentException if the object passed
            to the factory is not an instance of <code>RoleSyntax</code> or
            <code>Asn1Sequence</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralNames,EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName)">
            Constructor.
            @param roleAuthority the role authority of this RoleSyntax.
            @param roleName    the role name of this RoleSyntax.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName)">
            Constructor. Invoking this constructor is the same as invoking
            <code>new RoleSyntax(null, roleName)</code>.
            @param roleName    the role name of this RoleSyntax.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(System.String)">
            Utility constructor. Takes a <code>string</code> argument representing
            the role name, builds a <code>GeneralName</code> to hold the role name
            and calls the constructor that takes a <code>GeneralName</code>.
            @param roleName
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor that builds an instance of <code>RoleSyntax</code> by
            extracting the encoded elements from the <code>Asn1Sequence</code>
            object supplied.
            @param seq    an instance of <code>Asn1Sequence</code> that holds
            the encoded elements used to build this <code>RoleSyntax</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.GetRoleNameAsString">
            Gets the role name as a <code>java.lang.string</code> object.
            @return    the role name of this RoleSyntax represented as a
            <code>string</code> object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.GetRoleAuthorityAsString">
            Gets the role authority as a <code>string[]</code> object.
            @return the role authority of this RoleSyntax represented as a
            <code>string[]</code> array.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.ToAsn1Object">
             Implementation of the method <code>ToAsn1Object</code> as
             required by the superclass <code>ASN1Encodable</code>.
            
             <pre>
             RoleSyntax ::= SEQUENCE {
                             roleAuthority  [0] GeneralNames OPTIONAL,
                             roleName       [1] GeneralName
                       }
             </pre>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.RoleAuthority">
            Gets the role authority of this RoleSyntax.
            @return    an instance of <code>GeneralNames</code> holding the
            role authority of this RoleSyntax.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.RoleSyntax.RoleName">
            Gets the role name of this RoleSyntax.
            @return    an instance of <code>GeneralName</code> holding the
            role name of this RoleSyntax.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.RsaPublicKeyStructure.ToAsn1Object">
            This outputs the key in Pkcs1v2 format.
            <pre>
                 RSAPublicKey ::= Sequence {
                                     modulus Integer, -- n
                                     publicExponent Integer, -- e
                                 }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes">
             This extension may contain further X.500 attributes of the subject. See also
             RFC 3039.
            
             <pre>
                 SubjectDirectoryAttributes ::= Attributes
                 Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                 Attribute ::= SEQUENCE
                 {
                   type AttributeType
                   values SET OF AttributeValue
                 }
            
                 AttributeType ::= OBJECT IDENTIFIER
                 AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @see org.bouncycastle.asn1.x509.X509Name for AttributeType ObjectIdentifiers.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
            
             The sequence is of type SubjectDirectoryAttributes:
            
             <pre>
                  SubjectDirectoryAttributes ::= Attributes
                  Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                  Attribute ::= SEQUENCE
                  {
                    type AttributeType
                    values SET OF AttributeValue
                  }
            
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @param seq
                        The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.#ctor(System.Collections.IList)">
             Constructor from an ArrayList of attributes.
            
             The ArrayList consists of attributes of type {@link Attribute Attribute}
            
             @param attributes The attributes.
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
            
             Returns:
            
             <pre>
                  SubjectDirectoryAttributes ::= Attributes
                  Attributes ::= SEQUENCE SIZE (1..MAX) OF Attribute
                  Attribute ::= SEQUENCE
                  {
                    type AttributeType
                    values SET OF AttributeValue
                  }
            
                  AttributeType ::= OBJECT IDENTIFIER
                  AttributeValue ::= ANY DEFINED BY AttributeType
             </pre>
            
             @return a DERObject
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectDirectoryAttributes.Attributes">
            @return Returns the attributes.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectKeyIdentifier">
            The SubjectKeyIdentifier object.
            <pre>
            SubjectKeyIdentifier::= OCTET STRING
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
             Calculates the keyIdentifier using a SHA1 hash over the BIT STRING
             from SubjectPublicKeyInfo as defined in RFC3280.
            
             @param spki the subject public key info.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.CreateSha1KeyIdentifier(EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
            Return a RFC 3280 type 1 key identifier. As in:
            <pre>
            (1) The keyIdentifier is composed of the 160-bit SHA-1 hash of the
            value of the BIT STRING subjectPublicKey (excluding the tag,
            length, and number of unused bits).
            </pre>
            @param keyInfo the key info object containing the subjectPublicKey field.
            @return the key identifier.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectKeyIdentifier.CreateTruncatedSha1KeyIdentifier(EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
            Return a RFC 3280 type 2 key identifier. As in:
            <pre>
            (2) The keyIdentifier is composed of a four bit type field with
            the value 0100 followed by the least significant 60 bits of the
            SHA-1 hash of the value of the BIT STRING subjectPublicKey.
            </pre>
            @param keyInfo the key info object containing the subjectPublicKey field.
            @return the key identifier.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo">
            The object that contains the public key stored in a certficate.
            <p>
            The GetEncoded() method in the public keys in the JCE produces a DER
            encoded one of these.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.GetPublicKey">
             for when the public key is an encoded object - if the bitstring
             can't be decoded this routine raises an IOException.
            
             @exception IOException - if the bit string doesn't represent a Der
             encoded object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            SubjectPublicKeyInfo ::= Sequence {
                                     algorithm AlgorithmIdentifier,
                                     publicKey BIT STRING }
            </pre>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo.PublicKeyData">
            for when the public key is raw bits...
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.Target">
            Target structure used in target information extension for attribute
            certificates from RFC 3281.
            
            <pre>
                Target  ::= CHOICE {
                  targetName          [0] GeneralName,
                  targetGroup         [1] GeneralName,
                  targetCert          [2] TargetCert
                }
            </pre>
            
            <p>
            The targetCert field is currently not supported and must not be used
            according to RFC 3281.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Target.GetInstance(System.Object)">
            Creates an instance of a Target from the given object.
            <p>
            <code>obj</code> can be a Target or a {@link Asn1TaggedObject}</p>
            
            @param obj The object.
            @return A Target instance.
            @throws ArgumentException if the given object cannot be
                        interpreted as Target.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Target.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject)">
            Constructor from Asn1TaggedObject.
            
            @param tagObj The tagged object.
            @throws ArgumentException if the encoding is wrong.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Target.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.Target.Choice,EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName)">
             Constructor from given details.
             <p>
             Exactly one of the parameters must be not <code>null</code>.</p>
            
             @param type the choice type to apply to the name.
             @param name the general name.
             @throws ArgumentException if type is invalid.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Target.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                Target  ::= CHOICE {
                  targetName          [0] GeneralName,
                  targetGroup         [1] GeneralName,
                  targetCert          [2] TargetCert
                }
            </pre>
            
            @return an Asn1Object
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.Target.TargetGroup">
            @return Returns the targetGroup.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.Target.TargetName">
            @return Returns the targetName.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.TargetInformation">
            Target information extension for attributes certificates according to RFC
            3281.
            
            <pre>
                      SEQUENCE OF Targets
            </pre>
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.TargetInformation.GetInstance(System.Object)">
            Creates an instance of a TargetInformation from the given object.
            <p>
            <code>obj</code> can be a TargetInformation or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A TargetInformation instance.
            @throws ArgumentException if the given object cannot be interpreted as TargetInformation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.TargetInformation.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor from a Asn1Sequence.
            
            @param seq The Asn1Sequence.
            @throws ArgumentException if the sequence does not contain
                        correctly encoded Targets elements.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.TargetInformation.GetTargetsObjects">
            Returns the targets in this target information extension.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.TargetInformation.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.Targets)">
            Constructs a target information from a single targets element. 
            According to RFC 3281 only one targets element must be produced.
            
            @param targets A Targets instance.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.TargetInformation.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.Target[])">
             According to RFC 3281 only one targets element must be produced. If
             multiple targets are given they must be merged in
             into one targets element.
            
             @param targets An array with {@link Targets}.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.TargetInformation.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                     SEQUENCE OF Targets
            </pre>
            
            <p>
            According to RFC 3281 only one targets element must be produced. If
            multiple targets are given in the constructor they are merged into one
            targets element. If this was produced from a
            {@link EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence} the encoding is kept.</p>
            
            @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.Targets">
            Targets structure used in target information extension for attribute
            certificates from RFC 3281.
            
            <pre>
                       Targets ::= SEQUENCE OF Target
                      
                       Target  ::= CHOICE {
                         targetName          [0] GeneralName,
                         targetGroup         [1] GeneralName,
                         targetCert          [2] TargetCert
                       }
                      
                       TargetCert  ::= SEQUENCE {
                         targetCertificate    IssuerSerial,
                         targetName           GeneralName OPTIONAL,
                         certDigestInfo       ObjectDigestInfo OPTIONAL
                       }
            </pre>
            
            @see org.bouncycastle.asn1.x509.Target
            @see org.bouncycastle.asn1.x509.TargetInformation
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Targets.GetInstance(System.Object)">
            Creates an instance of a Targets from the given object.
            <p>
            <code>obj</code> can be a Targets or a {@link Asn1Sequence}</p>
            
            @param obj The object.
            @return A Targets instance.
            @throws ArgumentException if the given object cannot be interpreted as Target.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Targets.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
            Constructor from Asn1Sequence.
            
            @param targets The ASN.1 SEQUENCE.
            @throws ArgumentException if the contents of the sequence are
                        invalid.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Targets.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.Target[])">
            Constructor from given targets.
            <p>
            The ArrayList is copied.</p>
            
            @param targets An <code>ArrayList</code> of {@link Target}s.
            @see Target
            @throws ArgumentException if the ArrayList contains not only Targets.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Targets.GetTargets">
            Returns the targets in an <code>ArrayList</code>.
            <p>
            The ArrayList is cloned before it is returned.</p>
            
            @return Returns the targets.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Targets.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            
            Returns:
            
            <pre>
                       Targets ::= SEQUENCE OF Target
            </pre>
            
            @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.TbsCertificateStructure">
            The TbsCertificate object.
            <pre>
            TbsCertificate ::= Sequence {
                 version          [ 0 ]  Version DEFAULT v1(0),
                 serialNumber            CertificateSerialNumber,
                 signature               AlgorithmIdentifier,
                 issuer                  Name,
                 validity                Validity,
                 subject                 Name,
                 subjectPublicKeyInfo    SubjectPublicKeyInfo,
                 issuerUniqueID    [ 1 ] IMPLICIT UniqueIdentifier OPTIONAL,
                 subjectUniqueID   [ 2 ] IMPLICIT UniqueIdentifier OPTIONAL,
                 extensions        [ 3 ] Extensions OPTIONAL
                 }
            </pre>
            <p>
            Note: issuerUniqueID and subjectUniqueID are both deprecated by the IETF. This class
            will parse them, but you really shouldn't be creating new ones.</p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.TbsCertificateList">
            PKIX RFC-2459 - TbsCertList object.
            <pre>
            TbsCertList  ::=  Sequence  {
                 version                 Version OPTIONAL,
                                              -- if present, shall be v2
                 signature               AlgorithmIdentifier,
                 issuer                  Name,
                 thisUpdate              Time,
                 nextUpdate              Time OPTIONAL,
                 revokedCertificates     Sequence OF Sequence  {
                      userCertificate         CertificateSerialNumber,
                      revocationDate          Time,
                      crlEntryExtensions      Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }  OPTIONAL,
                 crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                                    -- if present, shall be v2
                                           }
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Time.#ctor(System.DateTime)">
            creates a time object from a given date - if the date is between 1950
            and 2049 a UTCTime object is Generated, otherwise a GeneralizedTime
            is used.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Time.ToDateTime">
            <summary>
            Return our time as DateTime.
            </summary>
            <returns>A date time.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.Time.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Time ::= CHOICE {
                        utcTime        UTCTime,
                        generalTime    GeneralizedTime }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.UserNotice">
             <code>UserNotice</code> class, used in
             <code>CertificatePolicies</code> X509 extensions (in policy
             qualifiers).
             <pre>
             UserNotice ::= Sequence {
                  noticeRef        NoticeReference OPTIONAL,
                  explicitText     DisplayText OPTIONAL}
            
             </pre>
            
             @see PolicyQualifierId
             @see PolicyInformation
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.UserNotice.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.NoticeReference,EnterpriseDT.BouncyCastle.Asn1.X509.DisplayText)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param explicitText a <code>DisplayText</code> value
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.UserNotice.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.NoticeReference,System.String)">
             Creates a new <code>UserNotice</code> instance.
            
             @param noticeRef a <code>NoticeReference</code> value
             @param str the explicitText field as a string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.UserNotice.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Creates a new <code>UserNotice</code> instance.
             <p>Useful from reconstructing a <code>UserNotice</code> instance
             from its encodable/encoded form.
            
             @param as an <code>ASN1Sequence</code> value obtained from either
             calling @{link toASN1Object()} for a <code>UserNotice</code>
             instance or from parsing it from a DER-encoded stream.</p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.V1TbsCertificateGenerator">
             Generator for Version 1 TbsCertificateStructures.
             <pre>
             TbsCertificate ::= Sequence {
                  version          [ 0 ]  Version DEFAULT v1(0),
                  serialNumber            CertificateSerialNumber,
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  validity                Validity,
                  subject                 Name,
                  subjectPublicKeyInfo    SubjectPublicKeyInfo,
                  }
             </pre>
            
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator">
             Generator for Version 2 AttributeCertificateInfo
             <pre>
             AttributeCertificateInfo ::= Sequence {
                   version              AttCertVersion -- version is v2,
                   holder               Holder,
                   issuer               AttCertIssuer,
                   signature            AlgorithmIdentifier,
                   serialNumber         CertificateSerialNumber,
                   attrCertValidityPeriod   AttCertValidityPeriod,
                   attributes           Sequence OF Attr,
                   issuerUniqueID       UniqueIdentifier OPTIONAL,
                   extensions           Extensions OPTIONAL
             }
             </pre>
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.V2AttributeCertificateInfoGenerator.AddAttribute(EnterpriseDT.BouncyCastle.Asn1.X509.AttributeX509)">
            @param attribute
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.V2Form.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             V2Form ::= Sequence {
                  issuerName            GeneralNames  OPTIONAL,
                  baseCertificateID     [0] IssuerSerial  OPTIONAL,
                  objectDigestInfo      [1] ObjectDigestInfo  OPTIONAL
                    -- issuerName MUST be present in this profile
                    -- baseCertificateID and objectDigestInfo MUST NOT
                    -- be present in this profile
             }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.V2TbsCertListGenerator">
             Generator for Version 2 TbsCertList structures.
             <pre>
              TbsCertList  ::=  Sequence  {
                   version                 Version OPTIONAL,
                                                -- if present, shall be v2
                   signature               AlgorithmIdentifier,
                   issuer                  Name,
                   thisUpdate              Time,
                   nextUpdate              Time OPTIONAL,
                   revokedCertificates     Sequence OF Sequence  {
                        userCertificate         CertificateSerialNumber,
                        revocationDate          Time,
                        crlEntryExtensions      Extensions OPTIONAL
                                                      -- if present, shall be v2
                                             }  OPTIONAL,
                   crlExtensions           [0]  EXPLICIT Extensions OPTIONAL
                                                      -- if present, shall be v2
                                             }
             </pre>
            
             <b>Note: This class may be subject to change</b>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.V3TbsCertificateGenerator">
             Generator for Version 3 TbsCertificateStructures.
             <pre>
             TbsCertificate ::= Sequence {
                  version          [ 0 ]  Version DEFAULT v1(0),
                  serialNumber            CertificateSerialNumber,
                  signature               AlgorithmIdentifier,
                  issuer                  Name,
                  validity                Validity,
                  subject                 Name,
                  subjectPublicKeyInfo    SubjectPublicKeyInfo,
                  issuerUniqueID    [ 1 ] IMPLICIT UniqueIdentifier OPTIONAL,
                  subjectUniqueID   [ 2 ] IMPLICIT UniqueIdentifier OPTIONAL,
                  extensions        [ 3 ] Extensions OPTIONAL
                  }
             </pre>
            
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.X509CertificateStructure">
            an X509Certificate structure.
            <pre>
             Certificate ::= Sequence {
                 tbsCertificate          TbsCertificate,
                 signatureAlgorithm      AlgorithmIdentifier,
                 signature               BIT STRING
             }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.X509DefaultEntryConverter">
            The default converter for X509 DN entries when going from their
            string value to ASN.1 strings.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.X509NameEntryConverter">
                 * It turns out that the number of standard ways the fields in a DN should be
                 * encoded into their ASN.1 counterparts is rapidly approaching the
                 * number of machines on the internet. By default the X509Name class
                 * will produce UTF8Strings in line with the current recommendations (RFC 3280).
                 * <p>
                 * An example of an encoder look like below:
                 * <pre>
                 * public class X509DirEntryConverter
                 *     : X509NameEntryConverter
                 * {
                 *     public Asn1Object GetConvertedValue(
                 *         DerObjectIdentifier  oid,
                 *         string               value)
                 *     {
                 *         if (str.Length() != 0 &amp;&amp; str.charAt(0) == '#')
                 *         {
                 *             return ConvertHexEncoded(str, 1);
                 *         }
                 *         if (oid.Equals(EmailAddress))
                 *         {
                 *             return new DerIA5String(str);
                 *         }
                 *         else if (CanBePrintable(str))
                 *         {
                 *             return new DerPrintableString(str);
                 *         }
                 *         else if (CanBeUTF8(str))
                 *         {
                 *             return new DerUtf8String(str);
                 *         }
                 *         else
                 *         {
                 *             return new DerBmpString(str);
                 *         }
                 *     }
                 * }
            	 * </pre>
            	 * </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509NameEntryConverter.ConvertHexEncoded(System.String,System.Int32)">
             Convert an inline encoded hex string rendition of an ASN.1
             object back into its corresponding ASN.1 object.
            
             @param str the hex encoded object
             @param off the index at which the encoding starts
             @return the decoded object
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509NameEntryConverter.CanBePrintable(System.String)">
            return true if the passed in string can be represented without
            loss as a PrintableString, false otherwise.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509NameEntryConverter.GetConvertedValue(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.String)">
             Convert the passed in string value into the appropriate ASN.1
             encoded object.
            
             @param oid the oid associated with the value in the DN.
             @param value the value of the particular DN component.
             @return the ASN.1 equivalent for the value.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509DefaultEntryConverter.GetConvertedValue(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.String)">
             Apply default conversion for the given value depending on the oid
             and the character range of the value.
            
             @param oid the object identifier for the DN entry
             @param value the value associated with it
             @return the ASN.1 equivalent for the string value.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extension">
            an object for the elements in the X.509 V3 extension block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extension.ConvertValueToObject(EnterpriseDT.BouncyCastle.Asn1.X509.X509Extension)">
            <sumary>Convert the value of the passed in extension to an object.</sumary>
            <param name="ext">The extension to parse.</param>
            <returns>The object the value string contains.</returns>
            <exception cref="T:System.ArgumentException">If conversion is not possible.</exception>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.SubjectDirectoryAttributes">
            Subject Directory Attributes
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.SubjectKeyIdentifier">
            Subject Key Identifier
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.KeyUsage">
            Key Usage
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.PrivateKeyUsagePeriod">
            Private Key Usage Period
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.SubjectAlternativeName">
            Subject Alternative Name
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.IssuerAlternativeName">
            Issuer Alternative Name
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.BasicConstraints">
            Basic Constraints
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.CrlNumber">
            CRL Number
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.ReasonCode">
            Reason code
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.InstructionCode">
            Hold Instruction Code
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.InvalidityDate">
            Invalidity Date
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.DeltaCrlIndicator">
            Delta CRL indicator
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.IssuingDistributionPoint">
            Issuing Distribution Point
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.CertificateIssuer">
            Certificate Issuer
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.NameConstraints">
            Name Constraints
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.CrlDistributionPoints">
            CRL Distribution Points
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.CertificatePolicies">
            Certificate Policies
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.PolicyMappings">
            Policy Mappings
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.AuthorityKeyIdentifier">
            Authority Key Identifier
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.PolicyConstraints">
            Policy Constraints
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.ExtendedKeyUsage">
            Extended Key Usage
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.FreshestCrl">
            Freshest CRL
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.InhibitAnyPolicy">
            Inhibit Any Policy
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.AuthorityInfoAccess">
            Authority Info Access
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.SubjectInfoAccess">
            Subject Info Access
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.LogoType">
            Logo Type
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.BiometricInfo">
            BiometricInfo
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.QCStatements">
            QCStatements
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.AuditIdentity">
            Audit identity extension in attribute certificates.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.NoRevAvail">
            NoRevAvail extension in attribute certificates.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.TargetInformation">
            TargetInformation extension in attribute certificates.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
            
             the extensions are a list of constructed sequences, either with (Oid, OctetString) or (Oid, Boolean, OctetString)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.IDictionary)">
            constructor from a table of extensions.
            <p>
            it's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.IList,System.Collections.IDictionary)">
            Constructor from a table of extensions with ordering.
            <p>
            It's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.IList,System.Collections.IList)">
             Constructor from two vectors
            
             @param objectIDs an ArrayList of the object identifiers.
             @param values an ArrayList of the extension values.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.Hashtable)">
            constructor from a table of extensions.
            <p>
            it's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.ArrayList,System.Collections.Hashtable)">
            Constructor from a table of extensions with ordering.
            <p>
            It's is assumed the table contains Oid/string pairs.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.#ctor(System.Collections.ArrayList,System.Collections.ArrayList)">
             Constructor from two vectors
            
             @param objectIDs an ArrayList of the object identifiers.
             @param values an ArrayList of the extension values.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.GetExtension(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the extension represented by the object identifier
             passed in.
            
             @return the extension if it's present, null otherwise.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.ToAsn1Object">
             <pre>
                 Extensions        ::=   SEQUENCE SIZE (1..MAX) OF Extension
            
                 Extension         ::=   SEQUENCE {
                    extnId            EXTENSION.&amp;id ({ExtensionSet}),
                    critical          BOOLEAN DEFAULT FALSE,
                    extnValue         OCTET STRING }
             </pre>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions.ExtensionOids">
            return an Enumeration of the extension field's object ids.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.X509ExtensionsGenerator">
            <remarks>Generator for X.509 extensions</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.Reset">
            <summary>Reset the generator</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.AddExtension(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>
            Add an extension with the given oid and the passed in value to be included
            in the OCTET STRING associated with the extension.
            </summary>
            <param name="oid">OID for the extension.</param>
            <param name="critical">True if critical, false otherwise.</param>
            <param name="extValue">The ASN.1 object to be included in the extension.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.AddExtension(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            <summary>
            Add an extension with the given oid and the passed in byte array to be wrapped
            in the OCTET STRING associated with the extension.
            </summary>
            <param name="oid">OID for the extension.</param>
            <param name="critical">True if critical, false otherwise.</param>
            <param name="extValue">The byte array to be wrapped.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.Generate">
            <summary>Generate an X509Extensions object based on the current state of the generator.</summary>
            <returns>An <c>X509Extensions</c> object</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.X509ExtensionsGenerator.IsEmpty">
            <summary>Return true if there are no extension present in this generator.</summary>
            <returns>True if empty, false otherwise</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name">
             <pre>
                 RDNSequence ::= SEQUENCE OF RelativeDistinguishedName
            
                 RelativeDistinguishedName ::= SET SIZE (1..MAX) OF AttributeTypeAndValue
            
                 AttributeTypeAndValue ::= SEQUENCE {
                                               type  OBJECT IDENTIFIER,
                                               value ANY }
             </pre>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.C">
            country code - StringType(SIZE(2))
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.O">
            organization - StringType(SIZE(1..64))
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.OU">
            organizational unit name - StringType(SIZE(1..64))
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.T">
            Title
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.CN">
            common name - StringType(SIZE(1..64))
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.Street">
            street - StringType(SIZE(1..64))
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.SerialNumber">
            device serial number name - StringType(SIZE(1..64))
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.L">
            locality name - StringType(SIZE(1..64))
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.ST">
            state, or province name - StringType(SIZE(1..64))
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.Surname">
            Naming attributes of type X520name
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.BusinessCategory">
            businessCategory - DirectoryString(SIZE(1..128)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.PostalCode">
            postalCode - DirectoryString(SIZE(1..40)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.DnQualifier">
            dnQualifier - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.Pseudonym">
            RFC 3039 Pseudonym - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.DateOfBirth">
            RFC 3039 DateOfBirth - GeneralizedTime - YYYYMMDD000000Z
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.PlaceOfBirth">
            RFC 3039 PlaceOfBirth - DirectoryString(SIZE(1..128)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.Gender">
            RFC 3039 DateOfBirth - PrintableString (SIZE(1)) -- "M", "F", "m" or "f"
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.CountryOfCitizenship">
            RFC 3039 CountryOfCitizenship - PrintableString (SIZE (2)) -- ISO 3166
            codes only
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.CountryOfResidence">
            RFC 3039 CountryOfCitizenship - PrintableString (SIZE (2)) -- ISO 3166
            codes only
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.NameAtBirth">
            ISIS-MTT NameAtBirth - DirectoryString(SIZE(1..64)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.PostalAddress">
            RFC 3039 PostalAddress - SEQUENCE SIZE (1..6) OF
            DirectoryString(SIZE(1..30))
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.DmdName">
            RFC 2256 dmdName
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.TelephoneNumber">
            id-at-telephoneNumber
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.Name">
            id-at-name
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.EmailAddress">
            Email address (RSA PKCS#9 extension) - IA5String.
            <p>Note: if you're trying to be ultra orthodox, don't use this! It shouldn't be in here.</p>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.UnstructuredName">
            more from PKCS#9
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.E">
            email address in Verisign certificates
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.UID">
            LDAP User id.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.DefaultSymbols">
            default look up table translating OID values into their common symbols following
            the convention in RFC 2253 with a few extras
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.RFC2253Symbols">
            look up table translating OID values into their common symbols following the convention in RFC 2253
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.RFC1779Symbols">
             look up table translating OID values into their common symbols following the convention in RFC 1779
            
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.DefaultLookup">
            look up table translating common symbols into their OIDS.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.GetInstance(EnterpriseDT.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
             Return a X509Name based on the passed in tagged object.
            
             @param obj tag object holding name.
             @param explicitly true if explicitly tagged false otherwise.
             @return the X509Name
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence
            
             the principal will be a list of constructed sets, each containing an (OID, string) pair.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IDictionary)">
            Constructor from a table of attributes with ordering.
            <p>
            it's is assumed the table contains OID/string pairs, and the contents
            of the table are copied into an internal table as part of the
            construction process. The ordering ArrayList should contain the OIDs
            in the order they are meant to be encoded or printed in ToString.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IDictionary,EnterpriseDT.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Constructor from a table of attributes with ordering.
            <p>
            it's is assumed the table contains OID/string pairs, and the contents
            of the table are copied into an internal table as part of the
            construction process. The ordering ArrayList should contain the OIDs
            in the order they are meant to be encoded or printed in ToString.</p>
            <p>
            The passed in converter will be used to convert the strings into their
            ASN.1 counterparts.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IList)">
            Takes two vectors one of the oids and the other of the values.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Collections.IList,System.Collections.IList,EnterpriseDT.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Takes two vectors one of the oids and the other of the values.
            <p>
            The passed in converter will be used to convert the strings into their
            ASN.1 counterparts.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.String,EnterpriseDT.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. If reverse
            is true, create the encoded version of the sequence starting from the
            last element in the string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.String,EnterpriseDT.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes with each
            string value being converted to its associated ASN.1 type using the passed
            in converter. If reverse is true the ASN.1 sequence representing the DN will
            be built by starting at the end of the string, rather than the start.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.IDictionary,System.String)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. lookUp
            should provide a table of lookups, indexed by lowercase only strings and
            yielding a DerObjectIdentifier, other than that OID. and numeric oids
            will be processed automatically.
            <br/>
            If reverse is true, create the encoded version of the sequence
            starting from the last element in the string.
            @param reverse true if we should start scanning from the end (RFC 2553).
            @param lookUp table of names and their oids.
            @param dirName the X.500 string to be parsed.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.#ctor(System.Boolean,System.Collections.IDictionary,System.String,EnterpriseDT.BouncyCastle.Asn1.X509.X509NameEntryConverter)">
            Takes an X509 dir name as a string of the format "C=AU, ST=Victoria", or
            some such, converting it into an ordered set of name attributes. lookUp
            should provide a table of lookups, indexed by lowercase only strings and
            yielding a DerObjectIdentifier, other than that OID. and numeric oids
            will be processed automatically. The passed in converter is used to convert the
            string values to the right of each equals sign to their ASN.1 counterparts.
            <br/>
            @param reverse true if we should start scanning from the end, false otherwise.
            @param lookUp table of names and oids.
            @param dirName the string dirName
            @param converter the converter to convert string values into their ASN.1 equivalents
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.GetOidList">
            return an IList of the oids in the name, in the order they were found.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.GetValueList">
            return an IList of the values found in the name, in the order they
            were found.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.GetValueList(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            return an IList of the values found in the name, in the order they
            were found, with the DN label corresponding to passed in oid.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.Equivalent(EnterpriseDT.BouncyCastle.Asn1.X509.X509Name,System.Boolean)">
            <param name="other">The X509Name object to test equivalency against.</param>
            <param name="inOrder">If true, the order of elements must be the same,
            as well as the values associated with each element.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.Equivalent(EnterpriseDT.BouncyCastle.Asn1.X509.X509Name)">
            test for equivalence - note: case is ignored.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.ToString(System.Boolean,System.Collections.IDictionary)">
             convert the structure to a string - if reverse is true the
             oids and values are listed out starting with the last element
             in the sequence (ala RFC 2253), otherwise the string will begin
             with the first element of the structure. If no string definition
             for the oid is found in oidSymbols the string value of the oid is
             added. Two standard symbol tables are provided DefaultSymbols, and
             RFC2253Symbols as part of this class.
            
             @param reverse if true start at the end of the sequence and work back.
             @param oidSymbols look up table strings for oids.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X509.X509Name.DefaultReverse">
            determines whether or not strings should be processed and printed
            from back to front.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.X509NameTokenizer">
            class for breaking up an X500 Name into it's component tokens, ala
            java.util.StringTokenizer. We need this class as some of the
            lightweight Java environment don't support classes like
            StringTokenizer.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.Qualified.BiometricData">
            The BiometricData object.
            <pre>
            BiometricData  ::=  SEQUENCE {
                  typeOfBiometricData  TypeOfBiometricData,
                  hashAlgorithm        AlgorithmIdentifier,
                  biometricDataHash    OCTET STRING,
                  sourceDataUri        IA5String OPTIONAL  }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.Qualified.Iso4217CurrencyCode">
            The Iso4217CurrencyCode object.
            <pre>
            Iso4217CurrencyCode  ::=  CHOICE {
                  alphabetic              PrintableString (SIZE 3), --Recommended
                  numeric              INTEGER (1..999) }
            -- Alphabetic or numeric currency code as defined in ISO 4217
            -- It is recommended that the Alphabetic form is used
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.Qualified.MonetaryValue">
            The MonetaryValue object.
            <pre>
            MonetaryValue  ::=  SEQUENCE {
                  currency              Iso4217CurrencyCode,
                  amount               INTEGER,
                  exponent             INTEGER }
            -- value = amount * 10^exponent
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.Qualified.QCStatement">
            The QCStatement object.
            <pre>
            QCStatement ::= SEQUENCE {
              statementId        OBJECT IDENTIFIER,
              statementInfo      ANY DEFINED BY statementId OPTIONAL}
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.Qualified.SemanticsInformation">
             The SemanticsInformation object.
             <pre>
                   SemanticsInformation ::= SEQUENCE {
                     semanticsIdentifier        OBJECT IDENTIFIER   OPTIONAL,
                     nameRegistrationAuthorities NameRegistrationAuthorities
                                                                     OPTIONAL }
                     (WITH COMPONENTS {..., semanticsIdentifier PRESENT}|
                      WITH COMPONENTS {..., nameRegistrationAuthorities PRESENT})
            
                 NameRegistrationAuthorities ::=  SEQUENCE SIZE (1..MAX) OF
                     GeneralName
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.Qualified.TypeOfBiometricData">
             The TypeOfBiometricData object.
             <pre>
             TypeOfBiometricData ::= CHOICE {
               predefinedBiometricType   PredefinedBiometricType,
               biometricDataOid          OBJECT IDENTIFIER }
            
             PredefinedBiometricType ::= INTEGER {
               picture(0),handwritten-signature(1)}
               (picture|handwritten-signature)
             </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym">
            Structure for a name or pseudonym.
            
            <pre>
                  NameOrPseudonym ::= CHOICE {
                	   surAndGivenName SEQUENCE {
                	     surName DirectoryString,
                	     givenName SEQUENCE OF DirectoryString 
                    },
                	   pseudonym DirectoryString 
                  }
            </pre>
            
            @see org.bouncycastle.asn1.x509.sigi.PersonalData
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString)">
            Constructor from DERString.
            <p/>
            The sequence is of type NameOrPseudonym:
            <p/>
            <pre>
                  NameOrPseudonym ::= CHOICE {
                	   surAndGivenName SEQUENCE {
                	     surName DirectoryString,
                	     givenName SEQUENCE OF DirectoryString
                    },
                	   pseudonym DirectoryString
                  }
            </pre>
            @param pseudonym pseudonym value to use.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type NameOrPseudonym:
             <p/>
             <pre>
                   NameOrPseudonym ::= CHOICE {
                 	   surAndGivenName SEQUENCE {
                 	     surName DirectoryString,
                 	     givenName SEQUENCE OF DirectoryString
                     },
                 	   pseudonym DirectoryString
                   }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(System.String)">
             Constructor from a given details.
            
             @param pseudonym The pseudonym.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.#ctor(EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString,EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from a given details.
            
             @param surname   The surname.
             @param givenName A sequence of directory strings making up the givenName
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                   NameOrPseudonym ::= CHOICE {
                 	   surAndGivenName SEQUENCE {
                 	     surName DirectoryString,
                 	     givenName SEQUENCE OF DirectoryString
                     },
                 	   pseudonym DirectoryString
                   }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.PersonalData">
             Contains personal data for the otherName field in the subjectAltNames
             extension.
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @see org.bouncycastle.asn1.x509.sigi.NameOrPseudonym
             @see org.bouncycastle.asn1.x509.sigi.SigIObjectIdentifiers
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.PersonalData.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Sequence)">
             Constructor from Asn1Sequence.
             <p/>
             The sequence is of type NameOrPseudonym:
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @param seq The ASN.1 sequence.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.PersonalData.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.SigI.NameOrPseudonym,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Asn1.DerGeneralizedTime,EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString,System.String,EnterpriseDT.BouncyCastle.Asn1.X500.DirectoryString)">
             Constructor from a given details.
            
             @param nameOrPseudonym  Name or pseudonym.
             @param nameDistinguisher Name distinguisher.
             @param dateOfBirth      Date of birth.
             @param placeOfBirth     Place of birth.
             @param gender           Gender.
             @param postalAddress    Postal Address.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.PersonalData.ToAsn1Object">
             Produce an object suitable for an Asn1OutputStream.
             <p/>
             Returns:
             <p/>
             <pre>
                 PersonalData ::= SEQUENCE {
                   nameOrPseudonym NameOrPseudonym,
                   nameDistinguisher [0] INTEGER OPTIONAL,
                   dateOfBirth [1] GeneralizedTime OPTIONAL,
                   placeOfBirth [2] DirectoryString OPTIONAL,
                   gender [3] PrintableString OPTIONAL,
                   postalAddress [4] DirectoryString OPTIONAL
                   }
             </pre>
            
             @return an Asn1Object
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers">
            Object Identifiers of SigI specifciation (German Signature Law
            Interoperability specification).
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKP">
            Key purpose IDs for German SigI (Signature Interoperability
            Specification)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICP">
            Certificate policy IDs for German SigI (Signature Interoperability
            Specification)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigION">
            Other Name IDs for German SigI (Signature Interoperability Specification)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIKPDirectoryService">
            To be used for for the generation of directory service certificates.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigIONPersonalData">
            ID for PersonalData
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X509.SigI.SigIObjectIdentifiers.IdSigICPSigConform">
            Certificate is conform to german signature law.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X9.ECNamedCurveTable">
            A general class that reads all X9.62 style EC curve tables.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.ECNamedCurveTable.GetByName(System.String)">
             return a X9ECParameters object representing the passed in named
             curve. The routine returns null if the curve is not present.
            
             @param name the name of the curve requested
             @return an X9ECParameters object or null if the curve is not available.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.ECNamedCurveTable.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.ECNamedCurveTable.GetByOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return a X9ECParameters object representing the passed in named
             curve.
            
             @param oid the object id of the curve requested
             @return an X9ECParameters object or null if the curve is not available.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X9.ECNamedCurveTable.Names">
             return an enumeration of the names of the available curves.
            
             @return an enumeration of the names of the available curves.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X9.KeySpecificInfo">
            ASN.1 def for Diffie-Hellman key exchange KeySpecificInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.KeySpecificInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             KeySpecificInfo ::= Sequence {
                 algorithm OBJECT IDENTIFIER,
                 counter OCTET STRING SIZE (4..4)
             }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X9.OtherInfo">
            ANS.1 def for Diffie-Hellman key exchange OtherInfo structure. See
            RFC 2631, or X9.42, for further details.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.OtherInfo.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             OtherInfo ::= Sequence {
                 keyInfo KeySpecificInfo,
                 partyAInfo [0] OCTET STRING OPTIONAL,
                 suppPubInfo [2] OCTET STRING
             }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X9.X962NamedCurves">
            table of the current named curves defined in X.962 EC-DSA.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X962NamedCurves.GetByOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X962NamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X962NamedCurves.GetName(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X9.X962NamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X962Parameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
            Parameters ::= CHOICE {
               ecParameters ECParameters,
               namedCurve   CURVES.&amp;id({CurveNames}),
               implicitlyCA Null
            }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X9.X9Curve">
            ASN.1 def for Elliptic-Curve Curve structure. See
            X9.62, for further details.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X9Curve.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             Curve ::= Sequence {
                 a               FieldElement,
                 b               FieldElement,
                 seed            BIT STRING      OPTIONAL
             }
            </pre>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X9.X9ECParameters">
            ASN.1 def for Elliptic-Curve ECParameters structure. See
            X9.62, for further details.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X9ECParameters.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECParameters ::= Sequence {
                 version         Integer { ecpVer1(1) } (ecpVer1),
                 fieldID         FieldID {{FieldTypes}},
                 curve           X9Curve,
                 base            X9ECPoint,
                 order           Integer,
                 cofactor        Integer OPTIONAL
             }
            </pre>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X9.X9ECParameters.CurveEntry">
             Return the ASN.1 entry representing the Curve.
            
             @return the X9Curve for the curve in these parameters.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X9.X9ECParameters.FieldIDEntry">
             Return the ASN.1 entry representing the FieldID.
            
             @return the X9FieldID for the FieldID in these parameters.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Asn1.X9.X9ECParameters.BaseEntry">
             Return the ASN.1 entry representing the base point G.
            
             @return the X9ECPoint for the base point in these parameters.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X9.X9ECPoint">
            class for describing an ECPoint as a Der object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X9ECPoint.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             ECPoint ::= OCTET STRING
            </pre>
            <p>
            Octet string produced using ECPoint.GetEncoded().</p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X9.X9FieldElement">
            Class for processing an ECFieldElement as a DER object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X9FieldElement.ToAsn1Object">
            Produce an object suitable for an Asn1OutputStream.
            <pre>
             FieldElement ::= OCTET STRING
            </pre>
            <p>
            <ol>
            <li> if <i>q</i> is an odd prime then the field element is
            processed as an Integer and converted to an octet string
            according to x 9.62 4.3.1.</li>
            <li> if <i>q</i> is 2<sup>m</sup> then the bit string
            contained in the field element is converted into an octet
            string with the same ordering padded at the front if necessary.
            </li>
            </ol>
            </p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Asn1.X9.X9FieldID">
            ASN.1 def for Elliptic-Curve Field ID structure. See
            X9.62, for further details.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X9FieldID.#ctor(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Constructor for elliptic curves over prime fields
            <code>F<sub>2</sub></code>.
            @param primeP The prime <code>p</code> defining the prime field.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X9FieldID.#ctor(System.Int32,System.Int32)">
            Constructor for elliptic curves over binary fields
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X9FieldID.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            Constructor for elliptic curves over binary fields
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>..
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Asn1.X9.X9FieldID.ToAsn1Object">
            Produce a Der encoding of the following structure.
            <pre>
             FieldID ::= Sequence {
                 fieldType       FIELD-ID.&amp;id({IOSet}),
                 parameters      FIELD-ID.&amp;Type({IOSet}{&#64;fieldType})
             }
            </pre>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.IdDsaWithSha1">
            id-dsa-with-sha1 OBJECT IDENTIFIER ::=  { iso(1) member-body(2)
                  us(840) x9-57 (10040) x9cm(4) 3 }
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.X9x63Scheme">
            X9.63
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Asn1.X9.X9ObjectIdentifiers.ansi_x9_42">
            X9.42
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.AsymmetricCipherKeyPair">
            a holding class for public/private parameter pairs.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.AsymmetricCipherKeyPair.#ctor(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
             basic constructor.
            
             @param publicParam a public key parameters object.
             @param privateParam the corresponding private key parameters.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.AsymmetricCipherKeyPair.Public">
             return the public key parameters.
            
             @return the public key parameters.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.AsymmetricCipherKeyPair.Private">
             return the private key parameters.
            
             @return the private key parameters.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.ICipherParameters">
            all parameter classes implement this.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.BufferedAeadBlockCipher">
            The AEAD block ciphers already handle buffering internally, so this class
            just takes care of implementing IBufferedCipher methods.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IBufferedCipher">
            <remarks>Block cipher engines are expected to conform to this interface.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBufferedCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBufferedCipher.Reset">
            <summary>
            Reset the cipher. After resetting the cipher is in the same state
            as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IBufferedCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAeadBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAeadBlockCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAeadBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAeadBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAeadBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAeadBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAeadBlockCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher">
            a buffer wrapper for an asymmetric block cipher, allowing input
            to be accumulated in a piecemeal fashion until final processing.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher)">
             base constructor.
            
             @param cipher the cipher this buffering object wraps.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.GetBufferPosition">
             return the amount of data sitting in the buffer.
            
             @return the amount of data sitting in the buffer.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the buffer and the underlying cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.DoFinal">
             process the contents of the buffer using the underlying
             cipher.
            
             @return the result of the encryption/decryption process on the
             buffer.
             @exception InvalidCipherTextException if we are given a garbage block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedAsymmetricBlockCipher.Reset">
            <summary>Reset the buffer</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion. The BufferedBlockCipher outputs a block only when the
            buffer is full and more data is being added, or on a doFinal.
            <p>
            Note: in the case where the underlying cipher is either a CFB cipher or an
            OFB one the last block may not be a multiple of the block size.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.#ctor">
            constructor for subclasses
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             Create a buffered block cipher without padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             false otherwise.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.GetBlockSize">
             return the blocksize for the underlying cipher.
            
             @return the blocksize for the underlying cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output, or the input is not block size aligned and should be.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
             @exception DataLengthException if the input is not block size
             aligned.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher.Reset">
            Reset the buffer and cipher. After resetting the object is in the same
            state as it was after the last init (if there was one).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.CipherKeyGenerator">
            The base class for symmetric, or secret, cipher key generators.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.CipherKeyGenerator.Init(EnterpriseDT.BouncyCastle.Crypto.KeyGenerationParameters)">
             initialise the key generator.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.CipherKeyGenerator.GenerateKey">
             Generate a secret key.
            
             @return a byte array containing the key value.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.DataLengthException">
            this exception is thrown if a buffer that is meant to have output
            copied into it turns out to be too short, or if we've been given
            insufficient input. In general this exception will Get thrown rather
            than an ArrayOutOfBounds exception.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.DataLengthException.#ctor">
            base constructor.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.DataLengthException.#ctor(System.String)">
             create a DataLengthException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher">
            <remarks>Base interface for a public/private key block cipher.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher.GetInputBlockSize">
            <returns>The maximum size, in bytes, an input block may be.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher.GetOutputBlockSize">
            <returns>The maximum size, in bytes, an output block will be.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="inLen">The length of the input block.</param>
            <exception cref="T:EnterpriseDT.BouncyCastle.Crypto.InvalidCipherTextException">Input decrypts improperly.</exception>
            <exception cref="T:EnterpriseDT.BouncyCastle.Crypto.DataLengthException">Input is too large for the cipher.</exception>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator">
            interface that a public/private key pair generator should conform to.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator.Init(EnterpriseDT.BouncyCastle.Crypto.KeyGenerationParameters)">
             intialise the key pair generator.
            
             @param the parameters the key pair is to be initialised with.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IAsymmetricCipherKeyPairGenerator.GenerateKeyPair">
             return an AsymmetricCipherKeyPair containing the Generated keys.
            
             @return an AsymmetricCipherKeyPair containing the Generated keys.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IBasicAgreement">
            The basic interface that basic Diffie-Hellman implementations
            conforms to.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBasicAgreement.Init(EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            initialise the agreement engine.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBasicAgreement.GetFieldSize">
            return the field size for the agreement algorithm in bytes.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBasicAgreement.CalculateAgreement(EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            given a public key from a given party calculate the next
            message in the agreement sequence.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IBlockCipher">
            <remarks>Base interface for a symmetric key block cipher.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            <summary>Process a block.</summary>
            <param name="inBuf">The input buffer.</param>
            <param name="inOff">The offset into <paramref>inBuf</paramref> that the input block begins.</param>
            <param name="outBuf">The output buffer.</param>
            <param name="outOff">The offset into <paramref>outBuf</paramref> to write the output block.</param>
            <exception cref="T:EnterpriseDT.BouncyCastle.Crypto.DataLengthException">If input block is wrong size, or outBuf too small.</exception>
            <returns>The number of bytes processed and produced.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBlockCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IBlockCipher.IsPartialBlockOkay">
            <summary>Indicates whether this cipher can handle partial blocks.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IBlockResult">
            <summary>
            Operators that reduce their input to a single block return an object
            of this type.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBlockResult.Collect">
            <summary>
            Return the final result of the operation.
            </summary>
            <returns>A block of bytes, representing the result of an operation.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IBlockResult.Collect(System.Byte[],System.Int32)">
            <summary>
            Store the final result of the operation by copying it into the destination array.
            </summary>
            <returns>The number of bytes copied into destination.</returns>
            <param name="destination">The byte array to copy the result into.</param>
            <param name="offset">The offset into destination to start copying the result at.</param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IDerivationFunction">
            base interface for general purpose byte derivation functions.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IDerivationFunction.Digest">
            return the message digest used as the basis for the function
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IDerivationParameters">
            Parameters for key/byte stream derivation classes
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IDigest">
            interface that a message digest conforms to.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IDigest.GetDigestSize">
             return the size, in bytes, of the digest produced by this message digest.
            
             @return the size, in bytes, of the digest produced by this message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IDigest.GetByteLength">
             return the size, in bytes, of the internal buffer used by this digest.
            
             @return the size, in bytes, of the internal buffer used by this digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IDigest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param inByte the input byte to be entered.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IDigest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param input the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IDigest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param output the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IDigest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IDigest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IDsa">
            interface for classes implementing the Digital Signature Algorithm
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IDsa.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the signer for signature generation or signature
             verification.
            
             @param forSigning true if we are generating a signature, false
             otherwise.
             @param param key parameters for signature generation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IDsa.GenerateSignature(System.Byte[])">
             sign the passed in message (usually the output of a hash function).
            
             @param message the message to be signed.
             @return two big integers representing the r and s values respectively.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IDsa.VerifySignature(System.Byte[],EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
             verify the message message against the signature values r and s.
            
             @param message the message that was supposed to have been signed.
             @param r the r signature value.
             @param s the s signature value.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IEntropySource">
            <summary>
            Base interface describing an entropy source for a DRBG.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IEntropySource.GetEntropy">
            <summary>
            Return a byte array of entropy.
            </summary>
            <returns>The entropy bytes.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IEntropySource.IsPredictionResistant">
            <summary>
            Return whether or not this entropy source is regarded as prediction resistant.
            </summary>
            <value><c>true</c> if this instance is prediction resistant; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IEntropySource.EntropySize">
            <summary>
            Return the number of bits of entropy this source can produce.
            </summary>
            <value>The size, in bits, of the return value of getEntropy.</value>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IEntropySourceProvider">
            <summary>
            Base interface describing a provider of entropy sources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IEntropySourceProvider.Get(System.Int32)">
            <summary>
            Return an entropy source providing a block of entropy.
            </summary>
            <param name="bitsRequired">The size of the block of entropy required.</param>
            <returns>An entropy source providing bitsRequired blocks of entropy.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IMac">
            The base interface for implementations of message authentication codes (MACs).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IMac.Init(EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the MAC.
            
             @param param the key and other data required by the MAC.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IMac.GetMacSize">
             Return the block size for this MAC (in bytes).
            
             @return the block size for this MAC in bytes.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IMac.Update(System.Byte)">
             add a single byte to the mac for processing.
            
             @param in the byte to be processed.
             @exception InvalidOperationException if the MAC is not initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IMac.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            @param in the array containing the input.
            @param inOff the index in the array the data begins at.
            @param len the length of the input starting at inOff.
            @exception InvalidOperationException if the MAC is not initialised.
            @exception DataLengthException if there isn't enough data in in.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IMac.DoFinal(System.Byte[],System.Int32)">
            Compute the final stage of the MAC writing the output to the out
            parameter.
            <p>
            doFinal leaves the MAC in the same state it was after the last init.
            </p>
            @param out the array the MAC is to be output to.
            @param outOff the offset into the out buffer the output is to start at.
            @exception DataLengthException if there isn't enough space in out.
            @exception InvalidOperationException if the MAC is not initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IMac.Reset">
            Reset the MAC. At the end of resetting the MAC should be in the
            in the same state it was after the last init (if there was one).
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IMac.AlgorithmName">
             Return the name of the algorithm the MAC implements.
            
             @return the name of the algorithm the MAC implements.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.InvalidCipherTextException">
            this exception is thrown whenever we find something we don't expect in a
            message.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.InvalidCipherTextException.#ctor">
            base constructor.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.InvalidCipherTextException.#ctor(System.String)">
             create a InvalidCipherTextException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.ISignatureFactory">
            <summary>
            Base interface for operators that serve as stream-based signature calculators.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISignatureFactory.CreateCalculator">
            <summary>
            Create a stream calculator for this signature calculator. The stream
            calculator is used for the actual operation of entering the data to be signed
            and producing the signature block.
            </summary>
            <returns>A calculator producing an IBlockResult with a signature in it.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.ISignatureFactory.AlgorithmDetails">
            <summary>The algorithm details object for this calculator.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISigner.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISigner.Reset">
            reset the internal state
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.ISigner.AlgorithmName">
             Return the name of the algorithm the signer implements.
            
             @return the name of the algorithm the signer implements.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.ISignerWithRecovery">
            Signer with message recovery.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISignerWithRecovery.HasFullMessage">
             Returns true if the signer has recovered the full message as
             part of signature verification.
            
             @return true if full message recovered.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISignerWithRecovery.GetRecoveredMessage">
             Returns a reference to what message was recovered (if any).
            
             @return full/partial message, null if nothing.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.ISignerWithRecovery.UpdateWithRecoveredMessage(System.Byte[])">
             Perform an update with the recovered message before adding any other data. This must
             be the first update method called, and calling it will result in the signer assuming
             that further calls to update will include message content past what is recoverable.
            
             @param signature the signature that we are in the process of verifying.
             @throws IllegalStateException
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IStreamCalculator">
            <summary>
            Base interface for cryptographic operations such as Hashes, MACs, and Signatures which reduce a stream of data
            to a single value.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IStreamCalculator.GetResult">
            <summary>
            Return the result of processing the stream. This value is only available once the stream
            has been closed.
            </summary>
            <returns>The result of processing the stream.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IStreamCalculator.Stream">
            <summary>Return a "sink" stream which only exists to update the implementing object.</summary>
            <returns>A stream to write to in order to update the implementing object.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IStreamCipher">
            <summary>The interface stream ciphers conform to.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IStreamCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <param name="forEncryption">If true the cipher is initialised for encryption,
            if false for decryption.</param>
            <param name="parameters">The key and other data required by the cipher.</param>
            <exception cref="T:System.ArgumentException">
            If the parameters argument is inappropriate.
            </exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IStreamCipher.ReturnByte(System.Byte)">
            <summary>encrypt/decrypt a single byte returning the result.</summary>
            <param name="input">the byte to be processed.</param>
            <returns>the result of processing the input byte.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IStreamCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process a block of bytes from <c>input</c> putting the result into <c>output</c>.
            </summary>
            <param name="input">The input byte array.</param>
            <param name="inOff">
            The offset into <c>input</c> where the data to be processed starts.
            </param>
            <param name="length">The number of bytes to be processed.</param>
            <param name="output">The output buffer the processed bytes go into.</param>
            <param name="outOff">
            The offset into <c>output</c> the processed data starts at.
            </param>
            <exception cref="T:EnterpriseDT.BouncyCastle.Crypto.DataLengthException">If the output buffer is too small.</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IStreamCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IStreamCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IVerifier">
            <summary>
            Operators that reduce their input to the validation of a signature produce this type.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IVerifier.IsVerified(System.Byte[])">
            <summary>
            Return true if the passed in data matches what is expected by the verification result.
            </summary>
            <param name="data">The bytes representing the signature.</param>
            <returns>true if the signature verifies, false otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IVerifier.IsVerified(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Return true if the length bytes from off in the source array match the signature
            expected by the verification result.
            </summary>
            <param name="source">Byte array containing the signature.</param>
            <param name="off">The offset into the source array where the signature starts.</param>
            <param name="length">The number of bytes in source making up the signature.</param>
            <returns>true if the signature verifies, false otherwise.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IVerifierFactory">
            <summary>
            Base interface for operators that serve as stream-based signature verifiers.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IVerifierFactory.CreateCalculator">
            <summary>
            Create a stream calculator for this verifier. The stream
            calculator is used for the actual operation of entering the data to be verified
            and producing a result which can be used to verify the original signature.
            </summary>
            <returns>A calculator producing an IVerifier which can verify the signature.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IVerifierFactory.AlgorithmDetails">
            <summary>The algorithm details object for this verifier.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IVerifierFactoryProvider">
            <summary>
            Base interface for a provider to support the dynamic creation of signature verifiers.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IVerifierFactoryProvider.CreateVerifierFactory(System.Object)">
            <summary>
            Return a signature verfier for signature algorithm described in the passed in algorithm details object.
            </summary>
            <param name="algorithmDetails">The details of the signature algorithm verification is required for.</param>
            <returns>A new signature verifier.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.IWrapper.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.IXof">
            <remarks>
            With FIPS PUB 202 a new kind of message digest was announced which supported extendable output, or variable digest sizes.
            This interface provides the extra method required to support variable output on a digest implementation.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.IXof.DoFinal(System.Byte[],System.Int32,System.Int32)">
             Output the results of the final calculation for this digest to outLen number of bytes.
            
             @param out output array to write the output bytes to.
             @param outOff offset to start writing the bytes at.
             @param outLen the number of output bytes requested.
             @return the number of bytes written
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.KeyGenerationParameters">
            The base class for parameters to key generators.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.KeyGenerationParameters.#ctor(EnterpriseDT.BouncyCastle.Security.SecureRandom,System.Int32)">
             initialise the generator with a source of randomness
             and a strength (in bits).
            
             @param random the random byte source.
             @param strength the size, in bits, of the keys we want to produce.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.KeyGenerationParameters.Random">
             return the random source associated with this
             generator.
            
             @return the generators random source.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.KeyGenerationParameters.Strength">
             return the bit strength for keys produced by this generator,
            
             @return the strength of the keys this generator produces (in bits).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.MaxBytesExceededException">
            <summary>
            This exception is thrown whenever a cipher requires a change of key, iv
            or similar after x amount of bytes enciphered
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator">
            super class for all Password Based Encyrption (Pbe) parameter generator classes.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.#ctor">
            base constructor.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.Init(System.Byte[],System.Byte[],System.Int32)">
             initialise the Pbe generator.
            
             @param password the password converted into bytes (see below).
             @param salt the salt to be mixed with the password.
             @param iterationCount the number of iterations the "mixing" function
             is to be applied for.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.GetPassword">
             return the password byte array.
            
             @return the password byte array.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.GetSalt">
             return the salt byte array.
            
             @return the salt byte array.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate derived parameters for a key of length keySize.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate derived parameters for a key of length keySize, and
             an initialisation vector (IV) of length ivSize.
            
             @param keySize the length, in bits, of the key required.
             @param ivSize the length, in bits, of the iv required.
             @return a parameters object representing a key and an IV.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate derived parameters for a key of length keySize, specifically
             for use with a MAC.
            
             @param keySize the length, in bits, of the key required.
             @return a parameters object representing a key.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs5PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             Pkcs5 (ascii, no padding)
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs5PasswordToUtf8Bytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             PKCS5 (UTF-8, no padding)
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.Pkcs12PasswordToBytes(System.Char[])">
             converts a password to a byte array according to the scheme in
             Pkcs12 (unicode, big endian, 2 zero pad bytes at the end).
            
             @param password a character array representing the password.
             @return a byte array representing the password.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.PbeParametersGenerator.IterationCount">
             return the iteration count.
            
             @return the iteration count.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.StreamBlockCipher">
            a wrapper for block ciphers with a single byte block size, so that they
            can be treated like stream ciphers.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.StreamBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             basic constructor.
            
             @param cipher the block cipher to be wrapped.
             @exception ArgumentException if the cipher has a block size other than
             one.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.StreamBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the underlying cipher.
            
             @param forEncryption true if we are setting up for encryption, false otherwise.
             @param param the necessary parameters for the underlying cipher to be initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.StreamBlockCipher.ReturnByte(System.Byte)">
             encrypt/decrypt a single byte returning the result.
            
             @param in the byte to be processed.
             @return the result of processing the input byte.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.StreamBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process a block of bytes from in putting the result into out.
            
             @param in the input byte array.
             @param inOff the offset into the in array where the data to be processed starts.
             @param len the number of bytes to be processed.
             @param out the output buffer the processed bytes go into.
             @param outOff the offset into the output byte array the processed data stars at.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.StreamBlockCipher.Reset">
            reset the underlying cipher. This leaves it in the same state
            it was at after the last init (if there was one).
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.StreamBlockCipher.AlgorithmName">
             return the name of the algorithm we are wrapping.
            
             @return the name of the algorithm we are wrapping.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.DHAgreement">
            a Diffie-Hellman key exchange engine.
            <p>
            note: This uses MTI/A0 key agreement in order to make the key agreement
            secure against passive attacks. If you're doing Diffie-Hellman and both
            parties have long term public keys you should look at using this. For
            further information have a look at RFC 2631.</p>
            <p>
            It's possible to extend this to more than two parties as well, for the moment
            that is left as an exercise for the reader.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.DHAgreement.CalculateMessage">
            calculate our initial message.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.DHAgreement.CalculateAgreement(EnterpriseDT.BouncyCastle.Crypto.Parameters.DHPublicKeyParameters,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            given a message from a given party and the corresponding public key
            calculate the next message in the agreement sequence. In this case
            this will represent the shared secret.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.DHBasicAgreement">
            a Diffie-Hellman key agreement class.
            <p>
            note: This is only the basic algorithm, it doesn't take advantage of
            long term public keys if they are available. See the DHAgreement class
            for a "better" implementation.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.DHBasicAgreement.CalculateAgreement(EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            given a short term public key from a given party calculate the next
            message in the agreement sequence.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.DHStandardGroups">
            <summary>Standard Diffie-Hellman groups from various IETF specifications.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.ECDHBasicAgreement">
             P1363 7.2.1 ECSVDP-DH
            
             ECSVDP-DH is Elliptic Curve Secret Value Derivation Primitive,
             Diffie-Hellman version. It is based on the work of [DH76], [Mil86],
             and [Kob87]. This primitive derives a shared secret value from one
             party's private key and another party's public key, where both have
             the same set of EC domain parameters. If two parties correctly
             execute this primitive, they will produce the same output. This
             primitive can be invoked by a scheme to derive a shared secret key;
             specifically, it may be used with the schemes ECKAS-DH1 and
             DL/ECKAS-DH2. It assumes that the input keys are valid (see also
             Section 7.2.2).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.ECDHCBasicAgreement">
             P1363 7.2.2 ECSVDP-DHC
            
             ECSVDP-DHC is Elliptic Curve Secret Value Derivation Primitive,
             Diffie-Hellman version with cofactor multiplication. It is based on
             the work of [DH76], [Mil86], [Kob87], [LMQ98] and [Kal98a]. This
             primitive derives a shared secret value from one party's private key
             and another party's public key, where both have the same set of EC
             domain parameters. If two parties correctly execute this primitive,
             they will produce the same output. This primitive can be invoked by a
             scheme to derive a shared secret key; specifically, it may be used
             with the schemes ECKAS-DH1 and DL/ECKAS-DH2. It does not assume the
             validity of the input public key (see also Section 7.2.1).
             <p>
             Note: As stated P1363 compatibility mode with ECDH can be preset, and
             in this case the implementation doesn't have a ECDH compatibility mode
             (if you want that just use ECDHBasicAgreement and note they both implement
             BasicAgreement!).</p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant">
             <summary>
             A participant in a Password Authenticated Key Exchange by Juggling (J-PAKE) exchange.
            
             The J-PAKE exchange is defined by Feng Hao and Peter Ryan in the paper
             <a href="http://grouper.ieee.org/groups/1363/Research/contributions/hao-ryan-2008.pdf">
             "Password Authenticated Key Exchange by Juggling, 2008."</a>
            
             The J-PAKE protocol is symmetric.
             There is no notion of a <i>client</i> or <i>server</i>, but rather just two <i>participants</i>.
             An instance of JPakeParticipant represents one participant, and
             is the primary interface for executing the exchange.
            
             To execute an exchange, construct a JPakeParticipant on each end,
             and call the following 7 methods
             (once and only once, in the given order, for each participant, sending messages between them as described):
            
             CreateRound1PayloadToSend() - and send the payload to the other participant
             ValidateRound1PayloadReceived(JPakeRound1Payload) - use the payload received from the other participant
             CreateRound2PayloadToSend() - and send the payload to the other participant
             ValidateRound2PayloadReceived(JPakeRound2Payload) - use the payload received from the other participant
             CalculateKeyingMaterial()
             CreateRound3PayloadToSend(BigInteger) - and send the payload to the other participant
             ValidateRound3PayloadReceived(JPakeRound3Payload, BigInteger) - use the payload received from the other participant
            
             Each side should derive a session key from the keying material returned by CalculateKeyingMaterial().
             The caller is responsible for deriving the session key using a secure key derivation function (KDF).
            
             Round 3 is an optional key confirmation process.
             If you do not execute round 3, then there is no assurance that both participants are using the same key.
             (i.e. if the participants used different passwords, then their session keys will differ.)
            
             If the round 3 validation succeeds, then the keys are guaranteed to be the same on both sides.
            
             The symmetric design can easily support the asymmetric cases when one party initiates the communication.
             e.g. Sometimes the round1 payload and round2 payload may be sent in one pass.
             Also, in some cases, the key confirmation payload can be sent together with the round2 payload.
             These are the trivial techniques to optimize the communication.
            
             The key confirmation process is implemented as specified in
             <a href="http://csrc.nist.gov/publications/nistpubs/800-56A/SP800-56A_Revision1_Mar08-2007.pdf">NIST SP 800-56A Revision 1</a>,
             Section 8.2 Unilateral Key Confirmation for Key Agreement Schemes.
            
             This class is stateful and NOT threadsafe.
             Each instance should only be used for ONE complete J-PAKE exchange
             (i.e. a new JPakeParticipant should be constructed for each new J-PAKE exchange).
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.#ctor(System.String,System.Char[])">
             <summary>
             Convenience constructor for a new JPakeParticipant that uses
             the JPakePrimeOrderGroups#NIST_3072 prime order group,
             a SHA-256 digest, and a default SecureRandom implementation.
            
             After construction, the State state will be STATE_INITIALIZED.
             
             Throws NullReferenceException if any argument is null. Throws
             ArgumentException if password is empty.
             </summary>
             <param name="participantId">Unique identifier of this participant.
                  The two participants in the exchange must NOT share the same id.</param>
             <param name="password">Shared secret.
                  A defensive copy of this array is made (and cleared once CalculateKeyingMaterial() is called).
                  Caller should clear the input password as soon as possible.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.#ctor(System.String,System.Char[],EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup)">
             <summary>
             Convenience constructor for a new JPakeParticipant that uses
             a SHA-256 digest, and a default SecureRandom implementation.
            
             After construction, the State state will be STATE_INITIALIZED.
             
             Throws NullReferenceException if any argument is null. Throws
             ArgumentException if password is empty.
             </summary>
             <param name="participantId">Unique identifier of this participant.
                  The two participants in the exchange must NOT share the same id.</param>
             <param name="password">Shared secret.
                  A defensive copy of this array is made (and cleared once CalculateKeyingMaterial() is called).
                  Caller should clear the input password as soon as possible.</param>
             <param name="group">Prime order group. See JPakePrimeOrderGroups for standard groups.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.#ctor(System.String,System.Char[],EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup,EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             <summary>
             Constructor for a new JPakeParticipant.
            
             After construction, the State state will be STATE_INITIALIZED.
             
             Throws NullReferenceException if any argument is null. Throws
             ArgumentException if password is empty.
             </summary>
             <param name="participantId">Unique identifier of this participant.
                  The two participants in the exchange must NOT share the same id.</param>
             <param name="password">Shared secret.
                  A defensive copy of this array is made (and cleared once CalculateKeyingMaterial() is called).
                  Caller should clear the input password as soon as possible.</param>
             <param name="group">Prime order group. See JPakePrimeOrderGroups for standard groups.</param>
             <param name="digest">Digest to use during zero knowledge proofs and key confirmation
                 (SHA-256 or stronger preferred).</param>
             <param name="random">Source of secure random data for x1 and x2, and for the zero knowledge proofs.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.CreateRound1PayloadToSend">
             <summary>
             Creates and returns the payload to send to the other participant during round 1.
            
             After execution, the State state} will be STATE_ROUND_1_CREATED}.
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.ValidateRound1PayloadReceived(EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload)">
             <summary>
             Validates the payload received from the other participant during round 1.
            
             Must be called prior to CreateRound2PayloadToSend().
            
             After execution, the State state will be  STATE_ROUND_1_VALIDATED.
             
             Throws CryptoException if validation fails. Throws InvalidOperationException
             if called multiple times.
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.CreateRound2PayloadToSend">
             <summary>
             Creates and returns the payload to send to the other participant during round 2.
            
             ValidateRound1PayloadReceived(JPakeRound1Payload) must be called prior to this method.
            
             After execution, the State state will be  STATE_ROUND_2_CREATED.
            
             Throws InvalidOperationException if called prior to ValidateRound1PayloadReceived(JPakeRound1Payload), or multiple times
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.ValidateRound2PayloadReceived(EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload)">
             <summary>
             Validates the payload received from the other participant during round 2.
             Note that this DOES NOT detect a non-common password.
             The only indication of a non-common password is through derivation
             of different keys (which can be detected explicitly by executing round 3 and round 4)
            
             Must be called prior to CalculateKeyingMaterial().
            
             After execution, the State state will be STATE_ROUND_2_VALIDATED.
            
             Throws CryptoException if validation fails. Throws
             InvalidOperationException if called prior to ValidateRound1PayloadReceived(JPakeRound1Payload), or multiple times
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.CalculateKeyingMaterial">
             <summary>
             Calculates and returns the key material.
             A session key must be derived from this key material using a secure key derivation function (KDF).
             The KDF used to derive the key is handled externally (i.e. not by JPakeParticipant).
            
             The keying material will be identical for each participant if and only if
             each participant's password is the same.  i.e. If the participants do not
             share the same password, then each participant will derive a different key.
             Therefore, if you immediately start using a key derived from
             the keying material, then you must handle detection of incorrect keys.
             If you want to handle this detection explicitly, you can optionally perform
             rounds 3 and 4.  See JPakeParticipant for details on how to execute
             rounds 3 and 4.
            
             The keying material will be in the range <tt>[0, p-1]</tt>.
            
             ValidateRound2PayloadReceived(JPakeRound2Payload) must be called prior to this method.
             
             As a side effect, the internal password array is cleared, since it is no longer needed.
            
             After execution, the State state will be STATE_KEY_CALCULATED.
            
             Throws InvalidOperationException if called prior to ValidateRound2PayloadReceived(JPakeRound2Payload),
             or if called multiple times.
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.CreateRound3PayloadToSend(EnterpriseDT.BouncyCastle.Math.BigInteger)">
             <summary>
             Creates and returns the payload to send to the other participant during round 3.
            
             See JPakeParticipant for more details on round 3.
            
             After execution, the State state} will be  STATE_ROUND_3_CREATED.
             Throws InvalidOperationException if called prior to CalculateKeyingMaterial, or multiple
             times.
             </summary>
             <param name="keyingMaterial">The keying material as returned from CalculateKeyingMaterial().</param> 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.ValidateRound3PayloadReceived(EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload,EnterpriseDT.BouncyCastle.Math.BigInteger)">
             <summary>
             Validates the payload received from the other participant during round 3.
            
             See JPakeParticipant for more details on round 3.
            
             After execution, the State state will be STATE_ROUND_3_VALIDATED.
             
             Throws CryptoException if validation fails. Throws InvalidOperationException if called prior to
             CalculateKeyingMaterial or multiple times
             </summary>
             <param name="round3PayloadReceived">The round 3 payload received from the other participant.</param> 
             <param name="keyingMaterial">The keying material as returned from CalculateKeyingMaterial().</param> 
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeParticipant.State">
            <summary>
            Gets the current state of this participant.
            See the <tt>STATE_*</tt> constants for possible values.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup">
             <summary>
             A pre-computed prime order group for use during a J-PAKE exchange.
            
             Typically a Schnorr group is used.  In general, J-PAKE can use any prime order group
             that is suitable for public key cryptography, including elliptic curve cryptography.
            
             See JPakePrimeOrderGroups for convenient standard groups.
            
             NIST <a href="http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/DSA2_All.pdf">publishes</a>
             many groups that can be used for the desired level of security.
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup.#ctor(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
             <summary>
             Constructs a new JPakePrimeOrderGroup.
            
             In general, you should use one of the pre-approved groups from
             JPakePrimeOrderGroups, rather than manually constructing one.
            
             The following basic checks are performed:
            
             p-1 must be evenly divisible by q
             g must be in [2, p-1]
             g^q mod p must equal 1
             p must be prime (within reasonably certainty)
             q must be prime (within reasonably certainty)
            
             The prime checks are performed using BigInteger#isProbablePrime(int),
             and are therefore subject to the same probability guarantees.
            
             These checks prevent trivial mistakes.
             However, due to the small uncertainties if p and q are not prime,
             advanced attacks are not prevented.
             Use it at your own risk.
             
             Throws NullReferenceException if any argument is null. Throws
             InvalidOperationException is any of the above validations fail.
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroup.#ctor(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,System.Boolean)">
            <summary>
            Constructor used by the pre-approved groups in JPakePrimeOrderGroups.
            These pre-approved groups can avoid the expensive checks.
            User-specified groups should not use this constructor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups">
            <summary>
            Standard pre-computed prime order groups for use by J-PAKE.
            (J-PAKE can use pre-computed prime order groups, same as DSA and Diffie-Hellman.)
            <p/>
            This class contains some convenient constants for use as input for
            constructing {@link JPAKEParticipant}s.
            <p/>
            The prime order groups below are taken from Sun's JDK JavaDoc (docs/guide/security/CryptoSpec.html#AppB),
            and from the prime order groups
            <a href="http://csrc.nist.gov/groups/ST/toolkit/documents/Examples/DSA2_All.pdf">published by NIST</a>.
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups.SUN_JCE_1024">
            <summary>
            From Sun's JDK JavaDoc (docs/guide/security/CryptoSpec.html#AppB)
            1024-bit p, 160-bit q and 1024-bit g for 80-bit security.
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups.NIST_2048">
            <summary>
            From NIST.
            2048-bit p, 224-bit q and 2048-bit g for 112-bit security.
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakePrimeOrderGroups.NIST_3072">
            <summary>
            From NIST.
            3072-bit p, 256-bit q and 3072-bit g for 128-bit security.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload">
            <summary>
            The payload sent/received during the first round of a J-PAKE exchange.
            
            Each JPAKEParticipant creates and sends an instance of this payload to
            the other. The payload to send should be created via 
            JPAKEParticipant.CreateRound1PayloadToSend().
            
            Each participant must also validate the payload received from the other.
            The received payload should be validated via 
            JPAKEParticipant.ValidateRound1PayloadReceived(JPakeRound1Payload).
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.participantId">
            <summary>
            The id of the JPAKEParticipant who created/sent this payload.
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.gx1">
            <summary>
            The value of g^x1
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.gx2">
            <summary>
            The value of g^x2
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.knowledgeProofForX1">
            <summary>
            The zero knowledge proof for x1.
            
            This is a two element array, containing {g^v, r} for x1.
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound1Payload.knowledgeProofForX2">
            <summary>
            The zero knowledge proof for x2.
            
            This is a two element array, containing {g^v, r} for x2.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload">
            <summary>
            The payload sent/received during the second round of a J-PAKE exchange.
            
            Each JPAKEParticipant creates and sends an instance
            of this payload to the other JPAKEParticipant.
            The payload to send should be created via
            JPAKEParticipant#createRound2PayloadToSend()
            
            Each JPAKEParticipant must also validate the payload
            received from the other JPAKEParticipant.
            The received payload should be validated via
            JPAKEParticipant#validateRound2PayloadReceived(JPakeRound2Payload)
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload.participantId">
            <summary>
            The id of the JPAKEParticipant who created/sent this payload.
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload.a">
            <summary>
            The value of A, as computed during round 2.
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound2Payload.knowledgeProofForX2s">
            <summary>
            The zero knowledge proof for x2 * s.
            
            This is a two element array, containing {g^v, r} for x2 * s.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload">
             <summary>
             The payload sent/received during the optional third round of a J-PAKE exchange,
             which is for explicit key confirmation.
            
             Each JPAKEParticipant creates and sends an instance
             of this payload to the other JPAKEParticipant.
             The payload to send should be created via
             JPAKEParticipant#createRound3PayloadToSend(BigInteger)
            
             Eeach JPAKEParticipant must also validate the payload
             received from the other JPAKEParticipant.
             The received payload should be validated via
             JPAKEParticipant#validateRound3PayloadReceived(JPakeRound3Payload, BigInteger)
             </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload.participantId">
            <summary>
            The id of the {@link JPAKEParticipant} who created/sent this payload.
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeRound3Payload.macTag">
            <summary>
            The value of MacTag, as computed by round 3.
            
            See JPAKEUtil#calculateMacTag(string, string, BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, org.bouncycastle.crypto.Digest)
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities">
            <summary>
            Primitives needed for a J-PAKE exchange.
            
            The recommended way to perform a J-PAKE exchange is by using
            two JPAKEParticipants.  Internally, those participants
            call these primitive operations in JPakeUtilities.
            
            The primitives, however, can be used without a JPAKEParticipant if needed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.GenerateX1(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary>
            Return a value that can be used as x1 or x3 during round 1.
            The returned value is a random value in the range [0, q-1].
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.GenerateX2(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary>
            Return a value that can be used as x2 or x4 during round 1.
            The returned value is a random value in the range [1, q-1].
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateS(System.Char[])">
            <summary>
            Converts the given password to a BigInteger
            for use in arithmetic calculations.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateGx(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Calculate g^x mod p as done in round 1.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateGA(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Calculate ga as done in round 2.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateX2s(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Calculate x2 * s as done in round 2.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateA(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Calculate A as done in round 2. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateZeroKnowledgeProof(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,System.String,EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary>
            Calculate a zero knowledge proof of x using Schnorr's signature.
            The returned array has two elements {g^v, r = v-x*h} for x.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateGx4(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Validates that g^x4 is not 1.
            throws CryptoException if g^x4 is 1
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateGa(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Validates that ga is not 1.
            
            As described by Feng Hao...
            Alice could simply check ga != 1 to ensure it is a generator.
            In fact, as we will explain in Section 3, (x1 + x3 + x4 ) is random over Zq even in the face of active attacks.
            Hence, the probability for ga = 1 is extremely small - on the order of 2^160 for 160-bit q.
            
            throws CryptoException if ga is 1
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateZeroKnowledgeProof(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger[],System.String,EnterpriseDT.BouncyCastle.Crypto.IDigest)">
            <summary>
            Validates the zero knowledge proof (generated by
            calculateZeroKnowledgeProof(BigInteger, BigInteger, BigInteger, BigInteger, BigInteger, string, Digest, SecureRandom)
            is correct.
            
            throws CryptoException if the zero knowledge proof is not correct
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateKeyingMaterial(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Calculates the keying material, which can be done after round 2 has completed.
            A session key must be derived from this key material using a secure key derivation function (KDF).
            The KDF used to derive the key is handled externally (i.e. not by JPAKEParticipant).
            
            KeyingMaterial = (B/g^{x2*x4*s})^x2
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateParticipantIdsDiffer(System.String,System.String)">
             <summary>
             Validates that the given participant ids are not equal.
             (For the J-PAKE exchange, each participant must use a unique id.)
            
             Throws CryptoException if the participantId strings are equal.
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateParticipantIdsEqual(System.String,System.String)">
            <summary>
            Validates that the given participant ids are equal.
            This is used to ensure that the payloads received from
            each round all come from the same participant.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateNotNull(System.Object,System.String)">
            <summary>
            Validates that the given object is not null.
            throws NullReferenceException if the object is null.
            </summary>
            <param name="obj">object in question</param>
            <param name="description">name of the object (to be used in exception message)</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateMacTag(System.String,System.String,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             <summary>
             Calculates the MacTag (to be used for key confirmation), as defined by
             <a href="http://csrc.nist.gov/publications/nistpubs/800-56A/SP800-56A_Revision1_Mar08-2007.pdf">NIST SP 800-56A Revision 1</a>,
             Section 8.2 Unilateral Key Confirmation for Key Agreement Schemes.
            
             MacTag = HMAC(MacKey, MacLen, MacData)
             MacKey = H(K || "JPAKE_KC")
             MacData = "KC_1_U" || participantId || partnerParticipantId || gx1 || gx2 || gx3 || gx4
            
             Note that both participants use "KC_1_U" because the sender of the round 3 message
             is always the initiator for key confirmation.
            
             HMAC = {@link HMac} used with the given {@link Digest}
             H = The given {@link Digest}
             MacLen = length of MacTag
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.CalculateMacKey(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Crypto.IDigest)">
            <summary>
            Calculates the MacKey (i.e. the key to use when calculating the MagTag for key confirmation).
            
            MacKey = H(K || "JPAKE_KC")
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.JPake.JPakeUtilities.ValidateMacTag(System.String,System.String,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Validates the MacTag received from the partner participant.
            
            throws CryptoException if the participantId strings are equal.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.Kdf.DHKekGenerator">
            RFC 2631 Diffie-hellman KEK derivation function.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.Kdf.ECDHKekGenerator">
            X9.63 based key derivation function for ECDH CMS.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Client">
            Implements the client side SRP-6a protocol. Note that this class is stateful, and therefore NOT threadsafe.
            This implementation of SRP is based on the optimized message sequence put forth by Thomas Wu in the paper
            "SRP-6: Improvements and Refinements to the Secure Remote Password Protocol, 2002"
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.Init(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            Initialises the client to begin new authentication attempt
            @param N The safe prime associated with the client's verifier
            @param g The group parameter associated with the client's verifier
            @param digest The digest algorithm associated with the client's verifier
            @param random For key generation
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.GenerateClientCredentials(System.Byte[],System.Byte[],System.Byte[])">
            Generates client's credentials given the client's salt, identity and password
            @param salt The salt used in the client's verifier.
            @param identity The user's identity (eg. username)
            @param password The user's password
            @return Client's public value to send to server
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.CalculateSecret(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Generates client's verification message given the server's credentials
            @param serverB The server's credentials
            @return Client's verification message for the server
            @throws CryptoException If server's credentials are invalid
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.CalculateClientEvidenceMessage">
            Computes the client evidence message M1 using the previously received values.
            To be called after calculating the secret S.
            @return M1: the client side generated evidence message
            @throws CryptoException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.VerifyServerEvidenceMessage(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Authenticates the server evidence message M2 received and saves it only if correct.
            @param M2: the server side generated evidence message
            @return A boolean indicating if the server message M2 was the expected one.
            @throws CryptoException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Client.CalculateSessionKey">
            Computes the final session key as a result of the SRP successful mutual authentication
            To be called after verifying the server evidence message M2.
            @return Key: the mutually authenticated symmetric session key
            @throws CryptoException
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Server">
            Implements the server side SRP-6a protocol. Note that this class is stateful, and therefore NOT threadsafe.
            This implementation of SRP is based on the optimized message sequence put forth by Thomas Wu in the paper
            "SRP-6: Improvements and Refinements to the Secure Remote Password Protocol, 2002"
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.Init(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            Initialises the server to accept a new client authentication attempt
            @param N The safe prime associated with the client's verifier
            @param g The group parameter associated with the client's verifier
            @param v The client's verifier
            @param digest The digest algorithm associated with the client's verifier
            @param random For key generation
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.GenerateServerCredentials">
            Generates the server's credentials that are to be sent to the client.
            @return The server's public value to the client
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.CalculateSecret(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Processes the client's credentials. If valid the shared secret is generated and returned.
            @param clientA The client's credentials
            @return A shared secret BigInteger
            @throws CryptoException If client's credentials are invalid
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.VerifyClientEvidenceMessage(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Authenticates the received client evidence message M1 and saves it only if correct.
            To be called after calculating the secret S.
            @param M1: the client side generated evidence message
            @return A boolean indicating if the client message M1 was the expected one.
            @throws CryptoException 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.CalculateServerEvidenceMessage">
            Computes the server evidence message M2 using the previously verified values.
            To be called after successfully verifying the client evidence message M1.
            @return M2: the server side generated evidence message
            @throws CryptoException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Server.CalculateSessionKey">
            Computes the final session key as a result of the SRP successful mutual authentication
            To be called after calculating the server evidence message M2.
            @return Key: the mutual authenticated symmetric session key
            @throws CryptoException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateM1(EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Computes the client evidence message (M1) according to the standard routine:
            M1 = H( A | B | S )
            @param digest The Digest used as the hashing function H
            @param N Modulus used to get the pad length
            @param A The public client value
            @param B The public server value
            @param S The secret calculated by both sides
            @return M1 The calculated client evidence message
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateM2(EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Computes the server evidence message (M2) according to the standard routine:
            M2 = H( A | M1 | S )
            @param digest The Digest used as the hashing function H
            @param N Modulus used to get the pad length
            @param A The public client value
            @param M1 The client evidence message
            @param S The secret calculated by both sides
            @return M2 The calculated server evidence message
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6Utilities.CalculateKey(EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Computes the final Key according to the standard routine: Key = H(S)
            @param digest The Digest used as the hashing function H
            @param N Modulus used to get the pad length
            @param S The secret calculated by both sides
            @return
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator">
            Generates new SRP verifier for user
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.Init(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Crypto.IDigest)">
            Initialises generator to create new verifiers
            @param N The safe prime to use (see DHParametersGenerator)
            @param g The group parameter to use (see DHParametersGenerator)
            @param digest The digest to use. The same digest type will need to be used later for the actual authentication
            attempt. Also note that the final session key size is dependent on the chosen digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Agreement.Srp.Srp6VerifierGenerator.GenerateVerifier(System.Byte[],System.Byte[],System.Byte[])">
            Creates a new SRP verifier
            @param salt The salt to use, generally should be large and random
            @param identity The user's identifying information (eg. username)
            @param password The user's password
            @return A new verifier for use in future SRP authentication
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.GeneralDigest">
            base implementation of MD4 family style digest as outlined in
            "Handbook of Applied Cryptography", pages 344 - 347.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.IMemoable.Copy">
            <summary>
            Produce a copy of this object with its configuration and in its current state.
            </summary>
            <remarks>
            The returned object may be used simply to store the state, or may be used as a similar object
            starting from the copied state.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.IMemoable.Reset(EnterpriseDT.BouncyCastle.Utilities.IMemoable)">
            <summary>
            Restore a copied object state into this object.
            </summary>
            <remarks>
            Implementations of this method <em>should</em> try to avoid or minimise memory allocation to perform the reset.
            </remarks>
            <param name="other">an object originally {@link #copy() copied} from an object of the same type as this instance.</param>
            <exception cref="T:System.InvalidCastException">if the provided object is not of the correct type.</exception>
            <exception cref="T:EnterpriseDT.BouncyCastle.Utilities.MemoableResetException">if the <b>other</b> parameter is in some other way invalid.</exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.Gost3411Digest">
            implementation of GOST R 34.11-94
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Gost3411Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Gost3411Digest.#ctor(System.Byte[])">
            Constructor to allow use of a particular sbox with GOST28147
            @see GOST28147Engine#getSBox(String)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Gost3411Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.Gost3411Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.Gost3411Digest.C2">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.KeccakDigest">
            <summary>
            Implementation of Keccak based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.KeccakDigest.GetByteLength">
             Return the size of block that the compression function is applied to in bytes.
            
             @return internal byte length of a block.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.LongDigest">
            Base class for SHA-384 and SHA-512.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.LongDigest.#ctor">
            Constructor for variable length word
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.LongDigest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.LongDigest)">
            Copy constructor.  We are using copy constructors in place
            of the object.Clone() interface as this interface is not
            supported by J2ME.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.LongDigest.AdjustByteCounts">
            adjust the byte counts so that byteCount2 represents the
            upper long (less 3 bits) word of the byte count.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.MD2Digest">
            implementation of MD2
            as outlined in RFC1319 by B.Kaliski from RSA Laboratories April 1992
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.MD2Digest.DoFinal(System.Byte[],System.Int32)">
             Close the digest, producing the final digest value. The doFinal
             call leaves the digest reset.
            
             @param out the array the digest is to be copied into.
             @param outOff the offset into the out array the digest is to start at.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.MD2Digest.Reset">
            reset the digest back to it's initial state.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.MD2Digest.Update(System.Byte)">
             update the message digest with a single byte.
            
             @param in the input byte to be entered.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.MD2Digest.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
             update the message digest with a block of bytes.
            
             @param in the byte array containing the data.
             @param inOff the offset into the byte array where the data starts.
             @param len the length of the data.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Digests.MD2Digest.AlgorithmName">
             return the algorithm name
            
             @return the algorithm name
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.MD4Digest">
            implementation of MD4 as RFC 1320 by R. Rivest, MIT Laboratory for
            Computer Science and RSA Data Security, Inc.
            <p>
            <b>NOTE</b>: This algorithm is only included for backwards compatibility
            with legacy applications, it's not secure, don't use it for anything new!</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.MD4Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.MD4Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.MD4Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.MD4Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.MD5Digest">
            implementation of MD5 as outlined in "Handbook of Applied Cryptography", pages 346 - 347.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.MD5Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.MD5Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.MD5Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.NonMemoableDigest">
            Wrapper removes exposure to the IMemoable interface on an IDigest implementation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.NonMemoableDigest.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             Base constructor.
            
             @param baseDigest underlying digest to use.
             @exception IllegalArgumentException if baseDigest is null
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD128Digest">
            implementation of RipeMD128
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD128Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD128Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD128Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD128Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD160Digest">
            implementation of RipeMD see,
            http://www.esat.kuleuven.ac.be/~bosselae/ripemd160.html
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD160Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD160Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD160Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD160Digest.Reset">
            reset the chaining variables to the IV values.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD256Digest">
            <remarks>
            <p>Implementation of RipeMD256.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD128.</p>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD256Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD256Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD256Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD256Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD320Digest">
            <remarks>
            <p>Implementation of RipeMD 320.</p>
            <p><b>Note:</b> this algorithm offers the same level of security as RipeMD160.</p>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD320Digest.#ctor">
            <summary> Standard constructor</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD320Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD320Digest)">
            <summary> Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.RipeMD320Digest.Reset">
            <summary> reset the chaining variables to the IV values.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha1Digest">
             implementation of SHA-1 as outlined in "Handbook of Applied Cryptography", pages 346 - 349.
            
             It is interesting to ponder why the, apart from the extra IV, the other difference here from MD5
             is the "endianness" of the word processing!
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha1Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.Sha1Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha1Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha224Digest">
            SHA-224 as described in RFC 3874
            <pre>
                    block  word  digest
            SHA-1   512    32    160
            SHA-224 512    32    224
            SHA-256 512    32    256
            SHA-384 1024   64    384
            SHA-512 1024   64    512
            </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha224Digest.#ctor">
            Standard constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha224Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.Sha224Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha224Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha256Digest">
             Draft FIPS 180-2 implementation of SHA-256. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha256Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.Sha256Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha256Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha384Digest">
             Draft FIPS 180-2 implementation of SHA-384. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha384Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.Sha384Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha384Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha3Digest">
            <summary>
            Implementation of SHA-3 based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha512Digest">
             Draft FIPS 180-2 implementation of SHA-512. <b>Note:</b> As this is
             based on a draft this implementation is subject to change.
            
             <pre>
                     block  word  digest
             SHA-1   512    32    160
             SHA-256 512    32    256
             SHA-384 1024   64    384
             SHA-512 1024   64    512
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha512Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.Sha512Digest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha512Digest.Reset">
            reset the chaining variables
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha512tDigest">
            FIPS 180-4 implementation of SHA-512/t
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha512tDigest.#ctor(System.Int32)">
            Standard constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha512tDigest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.Sha512tDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.Sha512tDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.ShakeDigest">
            <summary>
            Implementation of SHAKE based on following KeccakNISTInterface.c from http://keccak.noekeon.org/
            </summary>
            <remarks>
            Following the naming conventions used in the C source code to enable easy review of the implementation.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.ShortenedDigest">
            Wrapper class that reduces the output length of a particular digest to
            only the first n bytes of the digest function.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.ShortenedDigest.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Int32)">
             Base constructor.
            
             @param baseDigest underlying digest to use.
             @param length length in bytes of the output of doFinal.
             @exception ArgumentException if baseDigest is null, or length is greater than baseDigest.GetDigestSize().
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest">
            <summary>
            Implementation of the Skein parameterised hash function in 256, 512 and 1024 bit block sizes,
            based on the <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
            <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p/>
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            </remarks>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine"/>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters"/>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_256">
            <summary>
            256 bit block size - Skein-256
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_512">
            <summary>
            512 bit block size - Skein-512
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_1024">
            <summary>
            1024 bit block size - Skein-1024
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Skein digest with an internal state size and output size.
            </summary>
            <param name="stateSizeBits">the internal state size in bits - one of <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_256"/> <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_512"/> or
                                  <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest.SKEIN_1024"/>.</param>
            <param name="digestSizeBits">the output/digest size to produce in bits, which must be an integral number of
                                 bytes.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest.Init(EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters)">
            <summary>
            Optionally initialises the Skein digest with the provided parameters.
            </summary>
            See <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters"></see> for details on the parameterisation of the Skein hash function.
            <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine">
            <summary>
            Implementation of the Skein family of parameterised hash functions in 256, 512 and 1024 bit block
            sizes, based on the <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
            <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p/>
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            <p/>
            This implementation is the basis for <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest"/> and <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac"/>, implementing the
            parameter based configuration system that allows Skein to be adapted to multiple applications. <br/>
            Initialising the engine with <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters"/> allows standard and arbitrary parameters to
            be applied during the Skein hash function.
            <p/>
            Implemented:
            <ul>
            <li>256, 512 and 1024 bit internal states.</li>
            <li>Full 96 bit input length.</li>
            <li>Parameters defined in the Skein specification, and arbitrary other pre and post message
            parameters.</li>
            <li>Arbitrary output size in 1 byte intervals.</li>
            </ul>
            <p/>
            Not implemented:
            <ul>
            <li>Sub-byte length input (bit padding).</li>
            <li>Tree hashing.</li>
            </ul>
            </remarks>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters"/>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_256">
            <summary>
            256 bit block size - Skein-256
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_512">
            <summary>
            512 bit block size - Skein-512
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_1024">
            <summary>
            1024 bit block size - Skein-1024
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.PARAM_TYPE_KEY">
            The parameter type for the Skein key.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.PARAM_TYPE_CONFIG">
            The parameter type for the Skein configuration block.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.PARAM_TYPE_MESSAGE">
            The parameter type for the message.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.PARAM_TYPE_OUTPUT">
            The parameter type for the output transformation.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.INITIAL_STATES">
            Precalculated UBI(CFG) states for common state/output combinations without key or other
            pre-message params.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.threefish">
            Underlying Threefish tweakable block cipher
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.outputSizeBytes">
            Size of the digest output, in bytes
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.chain">
            The current chaining/state value
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.initialState">
            The initial state value
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.key">
            The (optional) key parameter
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.preMessageParameters">
            Parameters to apply prior to the message
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.postMessageParameters">
            Parameters to apply after the message, but prior to output
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.ubi">
            The current UBI operation
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.singleByte">
            Buffer for single byte update method
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Skein digest with an internal state size and output size.
            </summary>
            <param name="blockSizeBits">the internal state size in bits - one of <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_256"/> <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_512"/> or
                                  <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.SKEIN_1024"/>.</param>
            <param name="outputSizeBits">the output/digest size to produce in bits, which must be an integral number of
                                 bytes.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine)">
            <summary>
            Creates a SkeinEngine as an exact copy of an existing instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.Init(EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters)">
            <summary>
            Initialises the Skein engine with the provided parameters. See <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters"/> for
            details on the parameterisation of the Skein hash function.
            </summary>
            <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.CreateInitialState">
            Calculate the initial (pre message block) chaining state.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.Reset">
            <summary>
            Reset the engine to the initial state (with the key and any pre-message parameters , ready to
            accept message input.
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UbiTweak.LOW_RANGE">
            Point at which position might overflow long, so switch to add with carry logic
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UbiTweak.T1_FINAL">
            Bit 127 = final
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UbiTweak.T1_FIRST">
            Bit 126 = first
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UbiTweak.tweak">
            UBI uses a 128 bit tweak
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UbiTweak.extendedPosition">
            Whether 64 bit position exceeded
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UbiTweak.AdvancePosition(System.Int32)">
            Advances the position in the tweak by the specified value.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UBI">
            The Unique Block Iteration chaining mode.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UBI.currentBlock">
            Buffer for the current block of message data
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UBI.currentOffset">
            Offset into the current message block
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine.UBI.message">
            Buffer for message words for feedback into encrypted block
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.SM3Digest">
            <summary>
            Implementation of Chinese SM3 digest as described at
            http://tools.ietf.org/html/draft-shen-sm3-hash-00
            and at .... ( Chinese PDF )
            </summary>
            <remarks>
            The specification says "process a bit stream",
            but this is written to process bytes in blocks of 4,
            meaning this will process 32-bit word groups.
            But so do also most other digest specifications,
            including the SHA-256 which was a origin for
            this specification.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SM3Digest.#ctor">
            <summary>
            Standard constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SM3Digest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.SM3Digest)">
            <summary>
            Copy constructor.  This will copy the state of the provided
            message digest.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.SM3Digest.Reset">
            <summary>
            reset the chaining variables
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.TigerDigest">
            implementation of Tiger based on:
            <a href="http://www.cs.technion.ac.il/~biham/Reports/Tiger">
             http://www.cs.technion.ac.il/~biham/Reports/Tiger</a>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.TigerDigest.#ctor">
            Standard constructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.TigerDigest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.TigerDigest)">
            Copy constructor.  This will copy the state of the provided
            message digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.TigerDigest.Reset">
            reset the chaining variables
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Digests.WhirlpoolDigest">
             Implementation of WhirlpoolDigest, based on Java source published by Barreto
             and Rijmen.
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.WhirlpoolDigest.#ctor(EnterpriseDT.BouncyCastle.Crypto.Digests.WhirlpoolDigest)">
            Copy constructor. This will copy the state of the provided message
            digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Digests.WhirlpoolDigest.Reset">
            Reset the chaining variables
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.EC.CustomNamedCurves.GetByOid(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
             return the X9ECParameters object for the named curve represented by
             the passed in object identifier. Null if the curve isn't present.
            
             @param oid an object identifier representing a named curve, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.EC.CustomNamedCurves.GetOid(System.String)">
             return the object identifier signified by the passed in name. Null
             if there is no object identifier associated with name.
            
             @return the object identifier associated with name, if present.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.EC.CustomNamedCurves.GetName(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            return the named curve name represented by the given object identifier.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.EC.CustomNamedCurves.Names">
            returns an enumeration containing the name strings for curves
            contained in this structure.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding">
            ISO 9796-1 padding. Note in the light of recent results you should
            only use this with RSA (rather than the "simpler" Rabin keys) and you
            should never use it with anything other than a hash (ie. even if the
            message is small don't sign the message, sign it's hash) or some "random"
            value. See your favorite search engine for details.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.GetInputBlockSize">
            return the input block size. The largest message we can process
            is (key_size_in_bits + 3)/16, which in our world comes to
            key_size_in_bytes / 2.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.GetOutputBlockSize">
            return the maximum possible size for the output.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.SetPadBits(System.Int32)">
            set the number of bits in the next message to be treated as
            pad bits.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.GetPadBits">
            retrieve the number of pad bits in the last decoded message.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.ISO9796d1Encoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not a valid ISO 9796 bit string
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Encodings.OaepEncoding">
            Optimal Asymmetric Encryption Padding (OAEP) - see PKCS 1 V 2.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.OaepEncoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block turns out to
            be badly formatted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.OaepEncoding.ItoOSP(System.Int32,System.Byte[])">
            int to octet string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.OaepEncoding.maskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            mask generator function, as described in PKCS1v2.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Encodings.Pkcs1Encoding">
            this does your basic Pkcs 1 v1.5 padding - whether or not you should be using this
            depends on your application - see Pkcs1 Version 2 for details.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabledProperty">
            some providers fail to include the leading zero in PKCS1 encoded blocks. If you need to
            work with one of these set the system property EnterpriseDT.BouncyCastle.Pkcs1.Strict to false.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher)">
            Basic constructor.
            @param cipher
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,System.Int32)">
            Constructor for decryption with a fixed plaintext length.
            
            @param cipher The cipher to use for cryptographic operation.
            @param pLen Length of the expected plaintext.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,System.Byte[])">
            Constructor for decryption with a fixed plaintext length and a fallback
            value that is returned, if the padding is incorrect.
            
            @param cipher
                       The cipher to use for cryptographic operation.
            @param fallback
                       The fallback value, we don't to a arraycopy here.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.CheckPkcs1Encoding(System.Byte[],System.Int32)">
            Checks if the argument is a correctly PKCS#1.5 encoded Plaintext
            for encryption.
            
            @param encoded The Plaintext.
            @param pLen Expected length of the plaintext.
            @return Either 0, if the encoding is correct, or -1, if it is incorrect.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.DecodeBlockOrRandom(System.Byte[],System.Int32,System.Int32)">
            Decode PKCS#1.5 encoding, and return a random value if the padding is not correct.
            
            @param in The encrypted block.
            @param inOff Offset in the encrypted block.
            @param inLen Length of the encrypted block.
            @param pLen Length of the desired output.
            @return The plaintext without padding, or a random value if the padding was incorrect.
            
            @throws InvalidCipherTextException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.DecodeBlock(System.Byte[],System.Int32,System.Int32)">
            @exception InvalidCipherTextException if the decrypted block is not in Pkcs1 format.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Encodings.Pkcs1Encoding.StrictLengthEnabled">
            The same effect can be achieved by setting the static property directly
            <p>
            The static property is checked during construction of the encoding object, it is set to
            true by default.
            </p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.AesDotNETEngine">
            This wraps the .NET implementation 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesDotNETEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesDotNETEngine.Finalize">
            No Dispose available for now so use destructor
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesDotNETEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.AesEngine">
             an implementation of the AES (Rijndael), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor, they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations, 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each, for a total of 2Kbytes,
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first.
            
             The slowest version uses no static tables at all and computes the values in each round.
             </p>
             <p>
             This file contains the middle performance version with 2Kbytes of static tables for round precomputation.
             </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.AesFastEngine">
             an implementation of the AES (Rijndael)), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor), they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations), 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each), for a total of 2Kbytes),
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first
            
             The slowest version uses no static tables at all and computes the values in each round
             </p>
             <p>
             This file contains the fast version with 8Kbytes of static tables for round precomputation
             </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesFastEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesFastEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesFastEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.AesLightEngine">
             an implementation of the AES (Rijndael), from FIPS-197.
             <p>
             For further details see: <a href="http://csrc.nist.gov/encryption/aes/">http://csrc.nist.gov/encryption/aes/</a>.
            
             This implementation is based on optimizations from Dr. Brian Gladman's paper and C code at
             <a href="http://fp.gladman.plus.com/cryptography_technology/rijndael/">http://fp.gladman.plus.com/cryptography_technology/rijndael/</a>
            
             There are three levels of tradeoff of speed vs memory
             Because java has no preprocessor, they are written as three separate classes from which to choose
            
             The fastest uses 8Kbytes of static tables to precompute round calculations, 4 256 word tables for encryption
             and 4 for decryption.
            
             The middle performance version uses only one 256 word table for each, for a total of 2Kbytes,
             adding 12 rotate operations per round to compute the values contained in the other tables from
             the contents of the first
            
             The slowest version uses no static tables at all and computes the values
             in each round.
             </p>
             <p>
             This file contains the slowest performance version with no static tables
             for round precomputation, but it has the smallest foot print.
             </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesLightEngine.GenerateWorkingKey(System.Byte[],System.Boolean)">
            Calculate the necessary round keys
            The number of calculations depends on key size and block size
            AES specified a fixed block size of 128 bits and key sizes 128/192/256 bits
            This code is written assuming those are the only possible values
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesLightEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.AesLightEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise an AES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.AesWrapEngine">
            <remarks>
            An implementation of the AES Key Wrapper from the NIST Key Wrap Specification.
            <p/>
            For further details see: <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.Rfc3394WrapEngine">
            <remarks>
            An implementation of the AES Key Wrapper from the NIST Key Wrap
            Specification as described in RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc3394.txt">http://www.ietf.org/rfc/rfc3394.txt</a>
            and  <a href="http://csrc.nist.gov/encryption/kms/key-wrap.pdf">http://csrc.nist.gov/encryption/kms/key-wrap.pdf</a>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.BlowfishEngine">
            A class that provides Blowfish key encryption operations,
            such as encoding data and generating keys.
            All the algorithms herein are from Applied Cryptography
            and implement a simplified cryptography interface.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.BlowfishEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a Blowfish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.BlowfishEngine.ProcessTable(System.UInt32,System.UInt32,System.UInt32[])">
            apply the encryption cycle to each value pair in the table.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.BlowfishEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Encrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.BlowfishEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.CamelliaEngine">
            Camellia - based on RFC 3713.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.CamelliaLightEngine">
            Camellia - based on RFC 3713, smaller implementation, about half the size of CamelliaEngine.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.CamelliaWrapEngine">
            <remarks>
            An implementation of the Camellia key wrapper based on RFC 3657/RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc3657.txt">http://www.ietf.org/rfc/rfc3657.txt</a>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast5Engine">
             A class that provides CAST key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC's
            
             RFC2144 - Cast5 (64bit block, 40-128bit key)
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast5Engine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a CAST cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast5Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast5Engine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast5Engine.F1(System.UInt32,System.UInt32,System.Int32)">
             The first of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast5Engine.F2(System.UInt32,System.UInt32,System.Int32)">
             The second of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast5Engine.F3(System.UInt32,System.UInt32,System.Int32)">
             The third of the three processing functions for the
             encryption and decryption.
            
             @param D            the input to be processed
             @param Kmi        the mask to be used from Km[n]
             @param Kri        the rotation value to be used
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast5Engine.CAST_Encipher(System.UInt32,System.UInt32,System.UInt32[])">
             Does the 16 rounds to encrypt the block.
            
             @param L0    the LH-32bits of the plaintext block
             @param R0    the RH-32bits of the plaintext block
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast6Engine">
             A class that provides CAST6 key encryption operations,
             such as encoding data and generating keys.
            
             All the algorithms herein are from the Internet RFC
            
             RFC2612 - CAST6 (128bit block, 128-256bit key)
            
             and implement a simplified cryptography interface.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast6Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast6Engine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param src        The plaintext buffer
             @param srcIndex    An offset into src
             @param dst        The ciphertext buffer
             @param dstIndex    An offset into dst
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast6Engine.CAST_Encipher(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
             Does the 12 quad rounds rounds to encrypt the block.
            
             @param A    the 00-31  bits of the plaintext block
             @param B    the 32-63  bits of the plaintext block
             @param C    the 64-95  bits of the plaintext block
             @param D    the 96-127 bits of the plaintext block
             @param result the resulting ciphertext
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Cast6Engine.CAST_Decipher(System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32[])">
             Does the 12 quad rounds rounds to decrypt the block.
            
             @param A    the 00-31  bits of the ciphertext block
             @param B    the 32-63  bits of the ciphertext block
             @param C    the 64-95  bits of the ciphertext block
             @param D    the 96-127 bits of the ciphertext block
             @param result the resulting plaintext
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.ChaChaEngine">
            <summary>
            Implementation of Daniel J. Bernstein's ChaCha stream cipher.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.Salsa20Engine">
            <summary>
            Implementation of Daniel J. Bernstein's Salsa20 stream cipher, Snuffle 2005
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.Salsa20Engine.StateSize">
            Constants 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Salsa20Engine.#ctor">
            <summary>
            Creates a 20 round Salsa20 engine.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Salsa20Engine.#ctor(System.Int32)">
            <summary>
            Creates a Salsa20 engine with a specific number of rounds.
            </summary>
            <param name="rounds">the number of rounds (must be an even number).</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Salsa20Engine.R(System.UInt32,System.Int32)">
             Rotate left
            
             @param   x   value to rotate
             @param   y   amount to rotate x
            
             @return  rotated x
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ChaChaEngine.#ctor">
            <summary>
            Creates a 20 rounds ChaCha engine.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ChaChaEngine.#ctor(System.Int32)">
            <summary>
            Creates a ChaCha engine with a specific number of rounds.
            </summary>
            <param name="rounds">the number of rounds (must be an even number).</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ChaChaEngine.ChachaCore(System.Int32,System.UInt32[],System.UInt32[])">
            <summary>
            ChacCha function.
            </summary>
            <param name="rounds">The number of ChaCha rounds to execute</param>
            <param name="input">The input words.</param>
            <param name="x">The ChaCha state to modify.</param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeEngine">
            <remarks>A class that provides a basic DESede (or Triple DES) engine.</remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEngine">
            <remarks>A class that provides a basic DES engine.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a DES cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEngine.bytebit">
            what follows is mainly taken from "Applied Cryptography", by
            Bruce Schneier, however it also bears great resemblance to Richard
            Outerbridge's D3DES...
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEngine.GenerateWorkingKey(System.Boolean,System.Byte[])">
             Generate an integer based working key based on our secret key
             and what we processing we are planning to do.
            
             Acknowledgements for this routine go to James Gillogly and Phil Karn.
                     (whoever, and wherever they are!).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEngine.DesFunc(System.Int32[],System.Byte[],System.Int32,System.Byte[],System.Int32)">
            the DES engine.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a DESede cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine">
                * Wrap keys according to
                * <a href="http://www.ietf.org/internet-drafts/draft-ietf-smime-key-wrap-01.txt">
                * draft-ietf-smime-key-wrap-01.txt</a>.
                * <p>
                * Note:
                * <ul>
                * <li>this is based on a draft, and as such is subject to change - don't use this class for anything requiring long term storage.</li>
                * <li>if you are using this to wrap triple-des keys you need to set the
                * parity bits on the key and, if it's a two-key triple-des key, pad it
                * yourself.</li>
                * </ul>
            	* </p>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.engine">
            Field engine 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.param">
            Field param 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.iv">
            Field iv 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Engines.DesEdeWrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.ElGamalEngine">
            this does your basic ElGamal algorithm.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ElGamalEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the ElGamal engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary ElGamal key parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ElGamalEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For ElGamal this is always one byte less than the size of P on
             encryption, and twice the length as the size of P on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ElGamalEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For ElGamal this is always one byte less than the size of P on
             decryption, and twice the length as the size of P on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ElGamalEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic ElGamal algorithm.
            
             @param in the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param length the length of the data to be processed.
             @return the result of the ElGamal process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.Gost28147Engine">
            implementation of GOST 28147-89
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Gost28147Engine.#ctor">
            standard constructor.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Gost28147Engine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise an Gost28147 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.Gost28147Engine.GetSBox(System.String)">
            Return the S-Box associated with SBoxName
            @param sBoxName name of the S-Box
            @return byte array representing the S-Box
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.HC128Engine">
             HC-128 is a software-efficient stream cipher created by Hongjun Wu. It
             generates keystream from a 128-bit secret key and a 128-bit initialization
             vector.
             <p>
             http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc128_p3.pdf
             </p><p>
             It is a third phase candidate in the eStream contest, and is patent-free.
             No attacks are known as of today (April 2007). See
            
             http://www.ecrypt.eu.org/stream/hcp3.html
             </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.HC128Engine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise a HC-128 cipher.
            
             @param forEncryption whether or not we are for encryption. Irrelevant, as
                                  encryption and decryption are the same.
             @param params        the parameters required to set up the cipher.
             @throws ArgumentException if the params argument is
                                              inappropriate (ie. the key is not 128 bit long).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.HC256Engine">
            HC-256 is a software-efficient stream cipher created by Hongjun Wu. It 
            generates keystream from a 256-bit secret key and a 256-bit initialization 
            vector.
            <p>
            http://www.ecrypt.eu.org/stream/p3ciphers/hc/hc256_p3.pdf
            </p><p>
            Its brother, HC-128, is a third phase candidate in the eStream contest.
            The algorithm is patent-free. No attacks are known as of today (April 2007). 
            See
            
            http://www.ecrypt.eu.org/stream/hcp3.html
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.HC256Engine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise a HC-256 cipher.
            
             @param forEncryption whether or not we are for encryption. Irrelevant, as
                                  encryption and decryption are the same.
             @param params        the parameters required to set up the cipher.
             @throws ArgumentException if the params argument is
                                              inappropriate (ie. the key is not 256 bit long).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.IdeaEngine">
            A class that provides a basic International Data Encryption Algorithm (IDEA) engine.
            <p>
            This implementation is based on the "HOWTO: INTERNATIONAL DATA ENCRYPTION ALGORITHM"
            implementation summary by Fauzan Mirza (F.U.Mirza@sheffield.ac.uk). (baring 1 typo at the
            end of the mulinv function!).
            </p>
            <p>
            It can be found at ftp://ftp.funet.fi/pub/crypt/cryptography/symmetric/idea/
            </p>
            <p>
            Note 1: This algorithm is patented in the USA, Japan, and Europe including
            at least Austria, France, Germany, Italy, Netherlands, Spain, Sweden, Switzerland
            and the United Kingdom. Non-commercial use is free, however any commercial
            products are liable for royalties. Please see
            <a href="http://www.mediacrypt.com">www.mediacrypt.com</a> for
            further details. This announcement has been included at the request of
            the patent holders.
            </p>
            <p>
            Note 2: Due to the requests concerning the above, this algorithm is now only
            included in the extended assembly. It is not included in the default distributions.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IdeaEngine.#ctor">
            standard constructor.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IdeaEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise an IDEA cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IdeaEngine.Mul(System.Int32,System.Int32)">
             return x = x * y where the multiplication is done modulo
             65537 (0x10001) (as defined in the IDEA specification) and
             a zero input is taken to be 65536 (0x10000).
            
             @param x the x value
             @param y the y value
             @return x = x * y
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IdeaEngine.ExpandKey(System.Byte[])">
            The following function is used to expand the user key to the encryption
            subkey. The first 16 bytes are the user key, and the rest of the subkey
            is calculated by rotating the previous 16 bytes by 25 bits to the left,
            and so on until the subkey is completed.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IdeaEngine.MulInv(System.Int32)">
            This function computes multiplicative inverse using Euclid's Greatest
            Common Divisor algorithm. Zero and one are self inverse.
            <p>
            i.e. x * MulInv(x) == 1 (modulo BASE)
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IdeaEngine.AddInv(System.Int32)">
            Return the additive inverse of x.
            <p>
            i.e. x + AddInv(x) == 0
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IdeaEngine.InvertKey(System.Int32[])">
            The function to invert the encryption subkey to the decryption subkey.
            It also involves the multiplicative inverse and the additive inverse functions.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.IesEngine">
            support class for constructing intergrated encryption ciphers
            for doing basic message exchanges on top of key agreement ciphers
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IesEngine.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBasicAgreement,EnterpriseDT.BouncyCastle.Crypto.IDerivationFunction,EnterpriseDT.BouncyCastle.Crypto.IMac)">
             set up for use with stream mode, where the key derivation function
             is used to provide a stream of bytes to xor with the message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IesEngine.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBasicAgreement,EnterpriseDT.BouncyCastle.Crypto.IDerivationFunction,EnterpriseDT.BouncyCastle.Crypto.IMac,EnterpriseDT.BouncyCastle.Crypto.BufferedBlockCipher)">
             set up for use in conjunction with a block cipher to handle the
             message.
            
             @param agree the key agreement used as the basis for the encryption
             @param kdf the key derivation function used for byte generation
             @param mac the message authentication code generator for the message
             @param cipher the cipher to used for encrypting the message
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IesEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the encryptor.
            
             @param forEncryption whether or not this is encryption/decryption.
             @param privParam our private key parameters
             @param pubParam the recipient's/sender's public key parameters
             @param param encoding and derivation parameters.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.IsaacEngine">
            Implementation of Bob Jenkin's ISAAC (Indirection Shift Accumulate Add and Count).
            see: http://www.burtleburtle.net/bob/rand/isaacafa.html
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.IsaacEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise an ISAAC cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.NaccacheSternEngine">
            NaccacheStern Engine. For details on this cipher, please see
            http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NaccacheSternEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initializes this algorithm. Must be called before all other Functions.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#init(bool,
                  org.bouncycastle.crypto.CipherParameters)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NaccacheSternEngine.GetInputBlockSize">
             Returns the input block size of this algorithm.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#GetInputBlockSize()
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NaccacheSternEngine.GetOutputBlockSize">
             Returns the output block size of this algorithm.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#GetOutputBlockSize()
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NaccacheSternEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single Block using the Naccache-Stern algorithm.
            
             @see org.bouncycastle.crypto.AsymmetricBlockCipher#ProcessBlock(byte[],
                  int, int)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NaccacheSternEngine.Encrypt(EnterpriseDT.BouncyCastle.Math.BigInteger)">
             Encrypts a BigInteger aka Plaintext with the public key.
            
             @param plain
                        The BigInteger to encrypt
             @return The byte[] representation of the encrypted BigInteger (i.e.
                     crypted.toByteArray())
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NaccacheSternEngine.AddCryptedBlocks(System.Byte[],System.Byte[])">
             Adds the contents of two encrypted blocks mod sigma
            
             @param block1
                        the first encrypted block
             @param block2
                        the second encrypted block
             @return encrypt((block1 + block2) mod sigma)
             @throws InvalidCipherTextException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NaccacheSternEngine.ProcessData(System.Byte[])">
             Convenience Method for data exchange with the cipher.
            
             Determines blocksize and splits data to blocksize.
            
             @param data the data to be processed
             @return the data after it went through the NaccacheSternEngine.
             @throws InvalidCipherTextException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NaccacheSternEngine.chineseRemainder(System.Collections.IList,System.Collections.IList)">
             Computes the integer x that is expressed through the given primes and the
             congruences with the chinese remainder theorem (CRT).
            
             @param congruences
                        the congruences c_i
             @param primes
                        the primes p_i
             @return an integer x for that x % p_i == c_i
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.NoekeonEngine">
            A Noekeon engine, using direct-key mode.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NoekeonEngine.#ctor">
            Create an instance of the Noekeon encryption algorithm
            and set some defaults
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NoekeonEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.NoekeonEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.NullEngine">
            The no-op engine that just copies bytes through, irrespective of whether encrypting and decrypting.
            Provided for the sake of completeness.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2Engine">
            an implementation of RC2 as described in RFC 2268
                 "A Description of the RC2(r) Encryption Algorithm" R. Rivest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2Engine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC2 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2Engine.RotateWordLeft(System.Int32,System.Int32)">
            return the result rotating the 16 bit number in x left by y
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine">
            Wrap keys according to RFC 3217 - RC2 mechanism
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.engine">
            Field engine 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.parameters">
            Field param 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.paramPlusIV">
            Field paramPlusIV 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.iv">
            Field iv 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.forWrapping">
            Field forWrapping 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.IV2">
            Field IV2           
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Method init
            
             @param forWrapping
             @param param
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.Wrap(System.Byte[],System.Int32,System.Int32)">
             Method wrap
            
             @param in
             @param inOff
             @param inLen
             @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.Unwrap(System.Byte[],System.Int32,System.Int32)">
             Method unwrap
            
             @param in
             @param inOff
             @param inLen
             @return
             @throws InvalidCipherTextException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.CalculateCmsKeyChecksum(System.Byte[])">
             Some key wrap algorithms make use of the Key Checksum defined
             in CMS [CMS-Algorithms]. This is used to provide an integrity
             check value for the key being wrapped. The algorithm is
            
             - Compute the 20 octet SHA-1 hash on the key being wrapped.
             - Use the first 8 octets of this hash as the checksum value.
            
             @param key
             @return
             @throws Exception
             @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.CheckCmsKeyChecksum(System.Byte[],System.Byte[])">
            @param key
            @param checksum
            @return
            @see http://www.w3.org/TR/xmlenc-core/#sec-CMSKeyChecksum
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Engines.RC2WrapEngine.AlgorithmName">
             Method GetAlgorithmName
            
             @return
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC4Engine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC4 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RC532Engine">
            The specification for RC5 came from the <code>RC5 Encryption Algorithm</code>
            publication in RSA CryptoBytes, Spring of 1995.
            <em>http://www.rsasecurity.com/rsalabs/cryptobytes</em>.
            <p>
            This implementation has a word size of 32 bits.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC532Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC532Engine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC532Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC532Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given block starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param  in     in byte buffer containing data to encrypt
             @param  inOff  offset into src buffer
             @param  out     out buffer where encrypted data is written
             @param  outOff  offset into out buffer
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC532Engine.RotateLeft(System.Int32,System.Int32)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(32)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % 32
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC532Engine.RotateRight(System.Int32,System.Int32)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(32)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % 32
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RC564Engine">
            The specification for RC5 came from the <code>RC5 Encryption Algorithm</code>
            publication in RSA CryptoBytes, Spring of 1995.
            <em>http://www.rsasecurity.com/rsalabs/cryptobytes</em>.
            <p>
            This implementation is set to work with a 64 bit word size.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC564Engine.#ctor">
            Create an instance of the RC5 encryption algorithm
            and set some defaults
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC564Engine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC5-64 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC564Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC564Engine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given block starting at the given offset and place
             the result in the provided buffer starting at the given offset.
            
             @param  in      in byte buffer containing data to encrypt
             @param  inOff   offset into src buffer
             @param  out     out buffer where encrypted data is written
             @param  outOff  offset into out buffer
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC564Engine.RotateLeft(System.Int64,System.Int64)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param  x  word to rotate
             @param  y    number of bits to rotate % wordSize
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC564Engine.RotateRight(System.Int64,System.Int64)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RC6Engine">
            An RC6 engine.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC6Engine.#ctor">
            Create an instance of the RC6 encryption algorithm
            and set some defaults
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC6Engine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a RC5-32 cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC6Engine.SetKey(System.Byte[])">
             Re-key the cipher.
            
             @param inKey the key to be used
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC6Engine.RotateLeft(System.Int32,System.Int32)">
             Perform a left "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RC6Engine.RotateRight(System.Int32,System.Int32)">
             Perform a right "spin" of the word. The rotation of the given
             word <em>x</em> is rotated left by <em>y</em> bits.
             Only the <em>lg(wordSize)</em> low-order bits of <em>y</em>
             are used to determine the rotation amount. Here it is
             assumed that the wordsize used is a power of 2.
            
             @param x word to rotate
             @param y number of bits to rotate % wordSize
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.Rfc3211WrapEngine">
            an implementation of the RFC 3211 Key Wrap
            Specification.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine">
            an implementation of Rijndael, based on the documentation and reference implementation
            by Paulo Barreto, Vincent Rijmen, for v2.0 August '99.
            <p>
            Note: this implementation is based on information prior to readonly NIST publication.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.Mul0x2(System.Int32)">
            multiply two elements of GF(2^m)
            needed for MixColumn and InvMixColumn
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.KeyAddition(System.Int64[])">
            xor corresponding text input and round key input bytes
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.ShiftRow(System.Byte[])">
            Row 0 remains unchanged
            The other three rows are shifted a variable amount
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.Substitution(System.Byte[])">
            Replace every byte of the input by the byte at that place
            in the nonlinear S-box
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.MixColumn">
            Mix the bytes of every column in a linear way
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.InvMixColumn">
            Mix the bytes of every column in a linear way
            This is the opposite operation of Mixcolumn
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.GenerateWorkingKey(System.Byte[])">
            Calculate the necessary round keys
            The number of calculations depends on keyBits and blockBits
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.#ctor">
            default constructor - 128 bit block size.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.#ctor(System.Int32)">
             basic constructor - set the cipher up for a given blocksize
            
             @param blocksize the blocksize in bits, must be 128, 192, or 256.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RijndaelEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a Rijndael cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindedEngine">
            this does your basic RSA algorithm with blinding
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindedEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindedEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindedEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindedEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindingEngine">
            This does your basic RSA Chaum's blinding and unblinding as outlined in
            "Handbook of Applied Cryptography", page 475. You need to use this if you are
            trying to get another party to generate signatures without them being aware
            of the message they are signing.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindingEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the blinding engine.
            
             @param forEncryption true if we are encrypting (blinding), false otherwise.
             @param param         the necessary RSA key parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindingEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindingEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaBlindingEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the RSA blinding algorithm.
            
             @param in    the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @throws DataLengthException the input block is too large.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaCoreEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaCoreEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaCoreEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaCoreEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaEngine">
            this does your basic RSA algorithm.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the RSA engine.
            
             @param forEncryption true if we are encrypting, false otherwise.
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaEngine.GetInputBlockSize">
             Return the maximum size for an input block to this engine.
             For RSA this is always one byte less than the key size on
             encryption, and the same length as the key size on decryption.
            
             @return maximum size for an input block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaEngine.GetOutputBlockSize">
             Return the maximum size for an output block to this engine.
             For RSA this is always one byte less than the key size on
             decryption, and the same length as the key size on encryption.
            
             @return maximum size for an output block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.RsaEngine.ProcessBlock(System.Byte[],System.Int32,System.Int32)">
             Process a single block using the basic RSA algorithm.
            
             @param inBuf the input array.
             @param inOff the offset into the input buffer where the data starts.
             @param inLen the length of the data to be processed.
             @return the result of the RSA process.
             @exception DataLengthException the input block is too large.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.SeedEngine">
            Implementation of the SEED algorithm as described in RFC 4009
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.SeedWrapEngine">
            <remarks>
            An implementation of the SEED key wrapper based on RFC 4010/RFC 3394.
            <p/>
            For further details see: <a href="http://www.ietf.org/rfc/rfc4010.txt">http://www.ietf.org/rfc/rfc4010.txt</a>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngine">
                 * Serpent is a 128-bit 32-round block cipher with variable key lengths,
                 * including 128, 192 and 256 bit keys conjectured to be at least as
                 * secure as three-key triple-DES.
                 * <p>
                 * Serpent was designed by Ross Anderson, Eli Biham and Lars Knudsen as a
                 * candidate algorithm for the NIST AES Quest.
            	 * </p>
                 * <p>
                 * For full details see <a href="http://www.cl.cam.ac.uk/~rja14/serpent.html">The Serpent home page</a>
            	 * </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a Serpent cipher.
            
             @param encrypting whether or not we are for encryption.
             @param params     the parameters required to set up the cipher.
             @throws IllegalArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in     the array containing the input data.
             @param inOff  offset into the in array the data starts at.
             @param out    the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @return the number of bytes processed and produced.
             @throws DataLengthException if there isn't enough data in in, or
             space in out.
             @throws IllegalStateException if the cipher isn't initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib0(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvSO - {13, 3,11, 0,10, 6, 5,12, 1,14, 4, 7,15, 9, 8, 2 } - 15 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb1(System.Int32,System.Int32,System.Int32,System.Int32)">
            S1 - {15,12, 2, 7, 9, 0, 5,10, 1,11,14, 8, 6,13, 3, 4 } - 14 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib1(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS1 - { 5, 8, 2,14,15, 6,12, 3,11, 4, 7, 9, 1,13,10, 0 } - 14 steps.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb2(System.Int32,System.Int32,System.Int32,System.Int32)">
            S2 - { 8, 6, 7, 9, 3,12,10,15,13, 1,14, 4, 0,11, 5, 2 } - 16 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib2(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS2 - {12, 9,15, 4,11,14, 1, 2, 0, 3, 6,13, 5, 8,10, 7 } - 16 steps.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb3(System.Int32,System.Int32,System.Int32,System.Int32)">
            S3 - { 0,15,11, 8,12, 9, 6, 3,13, 1, 2, 4,10, 7, 5,14 } - 16 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib3(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS3 - { 0, 9,10, 7,11,14, 6,13, 3, 5,12, 2, 4, 8,15, 1 } - 15 terms
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb4(System.Int32,System.Int32,System.Int32,System.Int32)">
            S4 - { 1,15, 8, 3,12, 0,11, 6, 2, 5, 4,10, 9,14, 7,13 } - 15 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib4(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS4 - { 5, 0, 8, 3,10, 9, 7,14, 2,12,11, 6, 4,15,13, 1 } - 15 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb5(System.Int32,System.Int32,System.Int32,System.Int32)">
            S5 - {15, 5, 2,11, 4,10, 9,12, 0, 3,14, 8,13, 6, 7, 1 } - 16 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib5(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS5 - { 8,15, 2, 9, 4, 1,13,14,11, 6, 5, 3, 7,12,10, 0 } - 16 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb6(System.Int32,System.Int32,System.Int32,System.Int32)">
            S6 - { 7, 2,12, 5, 8, 4, 6,11,14, 9, 1,15,13, 3,10, 0 } - 15 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib6(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS6 - {15,10, 1,13, 5, 3, 6, 0, 4, 9,14, 7, 2,12, 8,11 } - 15 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Sb7(System.Int32,System.Int32,System.Int32,System.Int32)">
            S7 - { 1,13,15, 0,14, 8, 2,11, 7, 4,12,10, 9, 3, 5, 6 } - 16 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.Ib7(System.Int32,System.Int32,System.Int32,System.Int32)">
            InvS7 - { 3, 0, 6,13, 9,14,15, 8, 5,12,11, 7,10, 1, 4, 2 } - 17 terms.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.LT">
            Apply the linear transformation to the register set.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngineBase.InverseLT">
            Apply the inverse of the linear transformation to the register set.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngine.MakeWorkingKey(System.Byte[])">
             Expand a user-supplied key material into a session key.
            
             @param key  The user-key bytes (multiples of 4) to use.
             @exception ArgumentException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt one block of plaintext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SerpentEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt one block of ciphertext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.SkipjackEngine">
            a class that provides a basic SKIPJACK engine.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SkipjackEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a SKIPJACK cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SkipjackEngine.G(System.Int32,System.Int32)">
            The G permutation
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.SkipjackEngine.H(System.Int32,System.Int32)">
            the inverse of the G permutation.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.TeaEngine">
            An TEA engine.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TeaEngine.#ctor">
            Create an instance of the TEA encryption algorithm
            and set some defaults
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TeaEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TeaEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine">
            <summary>
            Implementation of the Threefish tweakable large block cipher in 256, 512 and 1024 bit block
            sizes.
            </summary>
            <remarks>
            This is the 1.3 version of Threefish defined in the Skein hash function submission to the NIST
            SHA-3 competition in October 2010.
            <p/>
            Threefish was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            <p/>
            This implementation inlines all round functions, unrolls 8 rounds, and uses 1.2k of static tables
            to speed up key schedule injection. <br/>
            2 x block size state is retained by each cipher instance.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_256">
            <summary>
            256 bit block size - Threefish-256
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_512">
            <summary>
            512 bit block size - Threefish-512
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_1024">
            <summary>
            1024 bit block size - Threefish-1024
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.TWEAK_SIZE_BYTES">
            Size of the tweak in bytes (always 128 bit/16 bytes)
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.ROUNDS_256">
            Rounds in Threefish-256
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.ROUNDS_512">
            Rounds in Threefish-512
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.ROUNDS_1024">
            Rounds in Threefish-1024
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.MAX_ROUNDS">
            Max rounds of any of the variants
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.C_240">
            Key schedule parity constant
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.blocksizeBytes">
            Block size in bytes
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.blocksizeWords">
            Block size in 64 bit words
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.currentBlock">
            Buffer for byte oriented processBytes to call internal word API
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.t">
            Tweak bytes (2 byte t1,t2, calculated t3 and repeat of t1,t2 for modulo free lookup
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.kw">
            Key schedule words
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.cipher">
            The internal cipher implementation (varies by blocksize)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.#ctor(System.Int32)">
            <summary>
            Constructs a new Threefish cipher, with a specified block size.
            </summary>
            <param name="blocksizeBits">the block size in bits, one of <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_256"/>, <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_512"/>,
                                 <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.BLOCKSIZE_1024"/> .</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>
            Initialise the engine.
            </summary>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">an instance of <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters"/> or <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.KeyParameter"/> (to
                          use a 0 tweak)</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Init(System.Boolean,System.UInt64[],System.UInt64[])">
            <summary>
            Initialise the engine, specifying the key and tweak directly.
            </summary>
            <param name="forEncryption">the cipher mode.</param>
            <param name="key">the words of the key, or <code>null</code> to use the current key.</param>
            <param name="tweak">the 2 word (128 bit) tweak, or <code>null</code> to use the current tweak.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.ProcessBlock(System.UInt64[],System.UInt64[])">
            <summary>
            Process a block of data represented as 64 bit words.
            </summary>
            <returns>the number of 8 byte words processed (which will be the same as the block size).</returns>
            <param name="inWords">a block sized buffer of words to process.</param>
            <param name="outWords">a block sized buffer of words to receive the output of the operation.</param>
            <exception cref="T:EnterpriseDT.BouncyCastle.Crypto.DataLengthException">if either the input or output is not block sized</exception>
            <exception cref="T:System.InvalidOperationException">if this engine is not initialised</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.BytesToWord(System.Byte[],System.Int32)">
            <summary>
            Read a single 64 bit word from input in LSB first order.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.WordToBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Write a 64 bit word to output in LSB first order.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.RotlXor(System.UInt64,System.Int32,System.UInt64)">
            Rotate left + xor part of the mix operation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.XorRotr(System.UInt64,System.Int32,System.UInt64)">
            Rotate xor + rotate right part of the unmix operation.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.ThreefishCipher.t">
            The extended + repeated tweak words
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.ThreefishCipher.kw">
            The extended + repeated key words
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish256Cipher.ROTATION_0_0">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish256Cipher.ROTATION_0_1">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_0">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_1">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_2">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish512Cipher.ROTATION_0_3">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_0">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_1">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_2">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine.Threefish1024Cipher.ROTATION_0_3">
            Mix rotation constants defined in Skein 1.3 specification
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.TnepresEngine">
            Tnepres is a 128-bit 32-round block cipher with variable key lengths,
            including 128, 192 and 256 bit keys conjectured to be at least as
            secure as three-key triple-DES.
            <p>
            Tnepres is based on Serpent which was designed by Ross Anderson, Eli Biham and Lars Knudsen as a
            candidate algorithm for the NIST AES Quest. Unfortunately there was an endianness issue
            with test vectors in the AES submission and the resulting confusion lead to the Tnepres cipher
            as well, which is a byte swapped version of Serpent.
            </p>
            <p>
            For full details see <a href="http://www.cl.cam.ac.uk/~rja14/serpent.html">The Serpent home page</a>
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TnepresEngine.MakeWorkingKey(System.Byte[])">
             Expand a user-supplied key material into a session key.
            
             @param key  The user-key bytes (multiples of 4) to use.
             @exception ArgumentException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TnepresEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt one block of plaintext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TnepresEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Decrypt one block of ciphertext.
            
             @param input the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param output the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.TwofishEngine">
             A class that provides Twofish encryption operations.
            
             This Java implementation is based on the Java reference
             implementation provided by Bruce Schneier and developed
             by Raif S. Naffah.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.TwofishEngine.P_00">
            Define the fixed p0/p1 permutations used in keyed S-box lookup.
            By changing the following constant definitions, the S-boxes will
            automatically Get changed in the Twofish engine.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Engines.TwofishEngine.gSubKeys">
            gSubKeys[] and gSBox[] are eventually used in the
            encryption and decryption methods.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TwofishEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise a Twofish cipher.
            
             @param forEncryption whether or not we are for encryption.
             @param parameters the parameters required to set up the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TwofishEngine.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Encrypt the given input starting at the given offset and place
             the result in the provided buffer starting at the given offset.
             The input will be an exact multiple of our blocksize.
            
             encryptBlock uses the pre-calculated gSBox[] and subKey[]
             arrays.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TwofishEngine.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
            Decrypt the given input starting at the given offset and place
            the result in the provided buffer starting at the given offset.
            The input will be an exact multiple of our blocksize.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TwofishEngine.RS_MDS_Encode(System.Int32,System.Int32)">
             Use (12, 8) Reed-Solomon code over GF(256) to produce
             a key S-box 32-bit entity from 2 key material 32-bit
             entities.
            
             @param    k0 first 32-bit entity
             @param    k1 second 32-bit entity
             @return     Remainder polynomial Generated using RS code
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.TwofishEngine.RS_rem(System.Int32)">
                    * Reed-Solomon code parameters: (12,8) reversible code:
            		* <p>
                    * <pre>
                    * G(x) = x^4 + (a+1/a)x^3 + ax^2 + (a+1/a)x + 1
                    * </pre>
                    * where a = primitive root of field generator 0x14D
            		* </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.VmpcEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            initialise a VMPC cipher.
            
            @param forEncryption
               whether or not we are for encryption.
            @param params
               the parameters required to set up the cipher.
            @exception ArgumentException
               if the params argument is inappropriate.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.XSalsa20Engine">
            <summary>
            Implementation of Daniel J. Bernstein's XSalsa20 stream cipher - Salsa20 with an extended nonce.
            </summary>
            <remarks>
            XSalsa20 requires a 256 bit key, and a 192 bit nonce.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.XSalsa20Engine.SetKey(System.Byte[],System.Byte[])">
            <summary>
            XSalsa20 key generation: process 256 bit input key and 128 bits of the input nonce
            using a core Salsa20 function without input addition to produce 256 bit working key
            and use that with the remaining 64 bits of nonce to initialize a standard Salsa20 engine state.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Engines.XteaEngine">
            An XTEA engine.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.XteaEngine.#ctor">
            Create an instance of the TEA encryption algorithm
            and set some defaults
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.XteaEngine.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise
            
             @param forEncryption whether or not we are for encryption.
             @param params the parameters required to set up the cipher.
             @exception ArgumentException if the params argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Engines.XteaEngine.setKey(System.Byte[])">
             Re-key the cipher.
            
             @param  key  the key to be used
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator">
            Basic KDF generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on ISO 18033/P1363a.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.#ctor(System.Int32,EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             Construct a KDF Parameters generator.
            
             @param counterStart value of counter.
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes generated from
             the derivation function.
            
             @throws ArgumentException if the size of the request will cause an overflow.
             @throws DataLengthException if the out buffer is too small.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Generators.BaseKdfBytesGenerator.Digest">
            return the underlying digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.DesKeyGenerator.engineInit(EnterpriseDT.BouncyCastle.Crypto.KeyGenerationParameters)">
             initialise the key generator - if strength is set to zero
             the key generated will be 64 bits in size, otherwise
             strength can be 64 or 56 bits (if you don't count the parity bits).
            
             @param param the parameters to be used for key generation
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.DesEdeKeyGenerator.engineInit(EnterpriseDT.BouncyCastle.Crypto.KeyGenerationParameters)">
             initialise the key generator - if strength is set to zero
             the key Generated will be 192 bits in size, otherwise
             strength can be 128 or 192 (or 112 or 168 if you don't count
             parity bits), depending on whether you wish to do 2-key or 3-key
             triple DES.
            
             @param param the parameters to be used for key generation
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.DHBasicKeyPairGenerator">
             a basic Diffie-Hellman key pair generator.
            
             This generates keys consistent for use with the basic algorithm for
             Diffie-Hellman.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.DHKeyPairGenerator">
             a Diffie-Hellman key pair generator.
            
             This generates keys consistent for use in the MTI/A0 key agreement protocol
             as described in "Handbook of Applied Cryptography", Pages 516-519.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.DHParametersGenerator.GenerateParameters">
            which Generates the p and g values from the given parameters,
            returning the DHParameters object.
            <p>
            Note: can take a while...</p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.DsaKeyPairGenerator">
             a DSA key pair generator.
            
             This Generates DSA keys in line with the method described
             in <i>FIPS 186-3 B.1 FFC Key Pair Generation</i>.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.DsaParametersGenerator">
            Generate suitable parameters for DSA, in line with FIPS 186-2, or FIPS 186-3.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.DsaParametersGenerator.Init(System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary>Initialise the generator</summary>
            <remarks>This form can only be used for older DSA (pre-DSA2) parameters</remarks>
            <param name="size">the size of keys in bits (from 512 up to 1024, and a multiple of 64)</param>
            <param name="certainty">measure of robustness of primes (at least 80 for FIPS 186-2 compliance)</param>
            <param name="random">the source of randomness to use</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.DsaParametersGenerator.Init(EnterpriseDT.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters)">
            <summary>Initialise the generator for DSA 2</summary>
            <remarks>You must use this Init method if you need to generate parameters for DSA 2 keys</remarks>
            <param name="parameters">An instance of <c>DsaParameterGenerationParameters</c> used to configure this generator</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.DsaParametersGenerator.GenerateParameters">
            <summary>Generates a set of <c>DsaParameters</c></summary>
            <remarks>Can take a while...</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.DsaParametersGenerator.GenerateParameters_FIPS186_3">
            generate suitable parameters for DSA, in line with
            <i>FIPS 186-3 A.1 Generation of the FFC Primes p and q</i>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.ECKeyPairGenerator.GenerateKeyPair">
            Given the domain parameters this routine generates an EC key
            pair in accordance with X9.62 section 5.2.1 pages 26, 27.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.ElGamalKeyPairGenerator">
            a ElGamal key pair generator.
            <p>
            This Generates keys consistent for use with ElGamal as described in
            page 164 of "Handbook of Applied Cryptography".</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.ElGamalParametersGenerator.GenerateParameters">
                     * which Generates the p and g values from the given parameters,
                     * returning the ElGamalParameters object.
                     * <p>
                     * Note: can take a while...
            		 * </p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Gost3410KeyPairGenerator">
            a GOST3410 key pair generator.
            This generates GOST3410 keys in line with the method described
            in GOST R 34.10-94.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator">
            generate suitable parameters for GOST3410.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.Init(System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             initialise the key generator.
            
             @param size size of the key
             @param typeProcedure type procedure A,B = 1;  A',B' - else
             @param random random byte source.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.procedure_C(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Procedure C
            procedure generates the a value from the given p,q,
            returning the a value.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Gost3410ParametersGenerator.GenerateParameters">
            which generates the p , q and a values from the given parameters,
            returning the Gost3410Parameters object.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Kdf1BytesGenerator">
            KFD2 generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on IEEE P1363/ISO 18033.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Kdf1BytesGenerator.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             Construct a KDF1 byte generator.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Kdf2BytesGenerator">
            KDF2 generator for derived keys and ivs as defined by IEEE P1363a/ISO 18033
            <br/>
            This implementation is based on IEEE P1363/ISO 18033.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Kdf2BytesGenerator.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             Construct a KDF2 bytes generator. Generates key material
             according to IEEE P1363 or ISO 18033 depending on the initialisation.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator">
            Generator for MGF1 as defined in Pkcs 1v2
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest)">
            @param digest the digest to be used as the source of Generated bytes
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.ItoOSP(System.Int32,System.Byte[])">
            int to octet string.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.GenerateBytes(System.Byte[],System.Int32,System.Int32)">
             fill len bytes of the output buffer with bytes Generated from
             the derivation function.
            
             @throws DataLengthException if the out buffer is too small.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Generators.Mgf1BytesGenerator.Digest">
            return the underlying digest.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator">
             Key generation parameters for NaccacheStern cipher. For details on this cipher, please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator.permuteList(System.Collections.IList,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             Generates a permuted ArrayList from the original one. The original List
             is not modified
            
             @param arr
                        the ArrayList to be permuted
             @param rand
                        the source of Randomness for permutation
             @return a new IList with the permuted elements.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.NaccacheSternKeyPairGenerator.findFirstPrimes(System.Int32)">
             Finds the first 'count' primes starting with 3
            
             @param count
                        the number of primes to find
             @return a vector containing the found primes as Integer
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator">
            Generator for PBE derived keys and ivs as usd by OpenSSL.
            <p>
            The scheme is a simple extension of PKCS 5 V2.0 Scheme 1 using MD5 with an
            iteration count of 1.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.#ctor">
            Construct a OpenSSL Parameters generator. 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.Init(System.Byte[],System.Byte[])">
            Initialise - note the iteration count for this algorithm is fixed at 1.
            
            @param password password to use.
            @param salt salt to use.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedKey(System.Int32)">
            the derived key function, the ith hash of the password and the salt.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
             @exception ArgumentException if keySize + ivSize is larger than the base hash size.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.OpenSslPbeParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 12 V1.0.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-12/index.html">
            RSA's Pkcs12 Page</a>
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             Construct a Pkcs 12 Parameters generator.
            
             @param digest the digest to be used as the source of derived keys.
             @exception ArgumentException if an unknown digest is passed in.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.Adjust(System.Byte[],System.Int32,System.Byte[])">
            add a + b + 1, returning the result in a. The a value is treated
            as a BigInteger of length (b.Length * 8) bits. The result is
            modulo 2^b.Length in case of overflow.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedKey(System.Int32,System.Int32)">
            generation of a derived key ala Pkcs12 V1.0.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs12ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 5 V2.0 Scheme 1.
            Note this generator is limited to the size of the hash produced by the
            digest used to drive it.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-5/index.html">
            RSA's Pkcs5 Page</a>
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             Construct a Pkcs 5 Scheme 1 Parameters generator.
            
             @param digest the digest to be used as the source of derived keys.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedKey">
            the derived key function, the ith hash of the mPassword and the mSalt.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the mPassword, mSalt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the mPassword, mSalt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
             @exception ArgumentException if keySize + ivSize is larger than the base hash size.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S1ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the mPassword,
             mSalt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
             @exception ArgumentException if the key length larger than the base hash size.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator">
            Generator for Pbe derived keys and ivs as defined by Pkcs 5 V2.0 Scheme 2.
            This generator uses a SHA-1 HMac as the calculation function.
            <p>
            The document this implementation is based on can be found at
            <a href="http://www.rsasecurity.com/rsalabs/pkcs/pkcs-5/index.html">
            RSA's Pkcs5 Page</a></p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.#ctor">
            construct a Pkcs5 Scheme 2 Parameters generator.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.Int32)">
             Generate a key parameter derived from the password, salt, and iteration
             count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedParameters(System.Int32,System.Int32)">
             Generate a key with initialisation vector parameter derived from
             the password, salt, and iteration count we are currently initialised
             with.
            
             @param keySize the size of the key we want (in bits)
             @param ivSize the size of the iv we want (in bits)
             @return a ParametersWithIV object.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Pkcs5S2ParametersGenerator.GenerateDerivedMacParameters(System.Int32)">
             Generate a key parameter for use with a MAC derived from the password,
             salt, and iteration count we are currently initialised with.
            
             @param keySize the size of the key we want (in bits)
             @return a KeyParameter object.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator">
            <summary>
            Generates keys for the Poly1305 MAC.
            </summary>
            <remarks>
            Poly1305 keys are 256 bit keys consisting of a 128 bit secret key used for the underlying block
            cipher followed by a 128 bit {@code r} value used for the polynomial portion of the Mac. <br/>
            The {@code r} value has a specific format with some bits required to be cleared, resulting in an
            effective 106 bit key. <br/>
            A separately generated 256 bit key can be modified to fit the Poly1305 key format by using the
            {@link #clamp(byte[])} method to clear the required bits.
            </remarks>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.engineInit(EnterpriseDT.BouncyCastle.Crypto.KeyGenerationParameters)">
            <summary>
            Initialises the key generator.
            </summary>
            <remarks>
            Poly1305 keys are always 256 bits, so the key length in the provided parameters is ignored.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.engineGenerateKey">
            <summary>
            Generates a 256 bit key in the format required for Poly1305 - e.g.
            <code>k[0] ... k[15], r[0] ... r[15]</code> with the required bits in <code>r</code> cleared
            as per <see cref="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])">
            <summary>
            Modifies an existing 32 byte key value to comply with the requirements of the Poly1305 key by
            clearing required bits in the <code>r</code> (second 16 bytes) portion of the key.<br/>
            Specifically:
            <ul>
            <li>r[3], r[7], r[11], r[15] have top four bits clear (i.e., are {0, 1, . . . , 15})</li>
            <li>r[4], r[8], r[12] have bottom two bits clear (i.e., are in {0, 4, 8, . . . , 252})</li>
            </ul>
            </summary>
            <param name="key">a 32 byte key value <code>k[0] ... k[15], r[0] ... r[15]</code></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.CheckKey(System.Byte[])">
            <summary>
            Checks a 32 byte key for compliance with the Poly1305 key requirements, e.g.
            <code>k[0] ... k[15], r[0] ... r[15]</code> with the required bits in <code>r</code> cleared
            as per <see cref="M:EnterpriseDT.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator.Clamp(System.Byte[])"/>.
            </summary>
            <param name="key">Key.</param>
            <exception cref="T:System.ArgumentException">if the key is of the wrong length, or has invalid bits set
                      in the <code>r</code> portion of the key.</exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator">
            Generate a random factor suitable for use with RSA blind signatures
            as outlined in Chaum's blinding and unblinding as outlined in
            "Handbook of Applied Cryptography", page 475.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator.Init(EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the factor generator
            
             @param param the necessary RSA key parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.RsaBlindingFactorGenerator.GenerateBlindingFactor">
             Generate a suitable blind factor for the public key the generator was initialised with.
            
             @return a random blind factor
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator">
            an RSA key pair generator.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Generators.RsaKeyPairGenerator.ChooseRandomPrime(System.Int32,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>Choose a random prime value for use with RSA</summary>
            <param name="bitlength">the bit-length of the returned prime</param>
            <param name="e">the RSA public exponent</param>
            <returns>a prime p, with (p-1) relatively prime to e</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.CbcBlockCipherMac">
            standard CBC Block Cipher MAC - if no padding is specified the default of
            pad of zeroes is used.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
             create a standard MAC based on a CBC block cipher. This will produce an
             authentication code half the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32,EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CbcBlockCipherMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.MacCFBBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Macs.MacCFBBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
             create a standard MAC based on a CFB block cipher. This will produce an
             authentication code half the length of the block size of the cipher, with
             the CFB mode set to 8 bits.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Int32)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CFB mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param cfbBitSize the size of an output block produced by the CFB mode.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses CFB mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param cfbBitSize the size of an output block produced by the CFB mode.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding a padding to be used.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CfbBlockCipherMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.CMac">
            CMAC - as specified at www.nuee.nagoya-u.ac.jp/labs/tiwata/omac/omac.html
            <p>
            CMAC is analogous to OMAC1 - see also en.wikipedia.org/wiki/CMAC
            </p><p>
            CMAC is a NIST recomendation - see 
            csrc.nist.gov/CryptoToolkit/modes/800-38_Series_Publications/SP800-38B.pdf
            </p><p>
            CMAC/OMAC1 is a blockcipher-based message authentication code designed and
            analyzed by Tetsu Iwata and Kaoru Kurosawa.
            </p><p>
            CMAC/OMAC1 is a simple variant of the CBC MAC (Cipher Block Chaining Message 
            Authentication Code). OMAC stands for One-Key CBC MAC.
            </p><p>
            It supports 128- or 64-bits block ciphers, with any key size, and returns
            a MAC with dimension less or equal to the block size of the underlying 
            cipher.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             create a standard MAC based on a CBC block cipher (64 or 128 bit block).
             This will produce an authentication code the length of the block size
             of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
             create a standard MAC based on a block cipher with the size of the
             MAC been given in bits.
             <p/>
             Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
             or 16 bits if being used as a data authenticator (FIPS Publication 113),
             and in general should be less than the size of the block cipher as it reduces
             the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            
             @param cipher        the cipher to be used as the basis of the MAC generation.
             @param macSizeInBits the size of the MAC in bits, must be a multiple of 8 and @lt;= 128.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.CMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.GMac">
            <summary>
            The GMAC specialisation of Galois/Counter mode (GCM) detailed in NIST Special Publication
            800-38D.
            </summary>
            <remarks>
            GMac is an invocation of the GCM mode where no data is encrypted (i.e. all input data to the Mac
            is processed as additional authenticated data with the underlying GCM block cipher).
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.GMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.Modes.GcmBlockCipher)">
            <summary>
            Creates a GMAC based on the operation of a block cipher in GCM mode.
            </summary>
            <remarks>
            This will produce an authentication code the length of the block size of the cipher.
            </remarks>
            <param name="cipher">the cipher to be used in GCM mode to generate the MAC.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.GMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.Modes.GcmBlockCipher,System.Int32)">
            <summary>
            Creates a GMAC based on the operation of a 128 bit block cipher in GCM mode.
            </summary>
            <remarks>
            This will produce an authentication code the length of the block size of the cipher.
            </remarks>
            <param name="cipher">the cipher to be used in GCM mode to generate the MAC.</param>
            <param name="macSizeBits">the mac size to generate, in bits. Must be a multiple of 8, between 32 and 128 (inclusive).
            Sizes less than 96 are not recommended, but are supported for specialized applications.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.GMac.Init(EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>
            Initialises the GMAC - requires a <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.ParametersWithIV"/> 
            providing a <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.KeyParameter"/> and a nonce.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.Gost28147Mac">
            implementation of GOST 28147-89 MAC
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.HMac">
             HMAC implementation based on RFC2104
            
             H(K XOR opad, H(K XOR ipad, text))
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.HMac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac">
             DES based CBC Block Cipher MAC according to ISO9797, algorithm 3 (ANSI X9.19 Retail MAC)
            
             This could as well be derived from CBCBlockCipherMac, but then the property mac in the base
             class must be changed to protected
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             create a Retail-MAC based on a CBC block cipher. This will produce an
             authentication code of the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation. This must
             be DESEngine.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
             create a Retail-MAC based on a CBC block cipher. This will produce an
             authentication code of the length of the block size of the cipher.
            
             @param cipher the cipher to be used as the basis of the MAC generation.
             @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
            create a Retail-MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses single DES CBC mode as the basis for the
            MAC generation.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32,EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
            create a standard MAC based on a block cipher with the size of the
            MAC been given in bits. This class uses single DES CBC mode as the basis for the
            MAC generation. The final block is decrypted and then encrypted using the
            middle and right part of the key.
            <p>
            Note: the size of the MAC must be at least 24 bits (FIPS Publication 81),
            or 16 bits if being used as a data authenticator (FIPS Publication 113),
            and in general should be less than the size of the block cipher as it reduces
            the chance of an exhaustive attack (see Handbook of Applied Cryptography).
            </p>
            @param cipher the cipher to be used as the basis of the MAC generation.
            @param macSizeInBits the size of the MAC in bits, must be a multiple of 8.
            @param padding the padding to be used to complete the last block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.ISO9797Alg3Mac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305">
            <summary>
            Poly1305 message authentication code, designed by D. J. Bernstein.
            </summary>
            <remarks>
            Poly1305 computes a 128-bit (16 bytes) authenticator, using a 128 bit nonce and a 256 bit key
            consisting of a 128 bit key applied to an underlying cipher, and a 128 bit key (with 106
            effective key bits) used in the authenticator.
            
            The polynomial calculation in this implementation is adapted from the public domain <a href="https://github.com/floodyberry/poly1305-donna">poly1305-donna-unrolled</a> C implementation
            by Andrew M (@floodyberry).
            </remarks>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Generators.Poly1305KeyGenerator"/>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.r0">
            Polynomial key 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.r1">
            Polynomial key 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.r2">
            Polynomial key 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.r3">
            Polynomial key 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.r4">
            Polynomial key 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.s1">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.s2">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.s3">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.s4">
            Precomputed 5 * r[1..4] 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.k0">
            Encrypted nonce 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.k1">
            Encrypted nonce 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.k2">
            Encrypted nonce 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.k3">
            Encrypted nonce 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.currentBlock">
            Current block of buffered input 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.currentBlockOffset">
            Current offset in input buffer 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.h0">
            Polynomial accumulator 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.h1">
            Polynomial accumulator 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.h2">
            Polynomial accumulator 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.h3">
            Polynomial accumulator 
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.h4">
            Polynomial accumulator 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.#ctor">
            Constructs a Poly1305 MAC, where the key passed to init() will be used directly.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
            Constructs a Poly1305 MAC, using a 128 bit block cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.Poly1305.Init(EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>
            Initialises the Poly1305 MAC.
            </summary>
            <param name="parameters">a {@link ParametersWithIV} containing a 128 bit nonce and a {@link KeyParameter} with
                     a 256 bit key complying to the {@link Poly1305KeyGenerator Poly1305 key format}.</param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.SipHash">
            <summary>
            Implementation of SipHash as specified in "SipHash: a fast short-input PRF", by Jean-Philippe
            Aumasson and Daniel J. Bernstein (https://131002.net/siphash/siphash.pdf).
            </summary>
            <remarks>
            "SipHash is a family of PRFs SipHash-c-d where the integer parameters c and d are the number of
            compression rounds and the number of finalization rounds. A compression round is identical to a
            finalization round and this round function is called SipRound. Given a 128-bit key k and a
            (possibly empty) byte string m, SipHash-c-d returns a 64-bit value..."
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.SipHash.#ctor">
            <summary>SipHash-2-4</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.SipHash.#ctor(System.Int32,System.Int32)">
            <summary>SipHash-c-d</summary>
            <param name="c">the number of compression rounds</param>
            <param name="d">the number of finalization rounds</param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac">
            <summary>
            Implementation of the Skein parameterised MAC function in 256, 512 and 1024 bit block sizes,
            based on the <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Engines.ThreefishEngine">Threefish</see> tweakable block cipher.
            </summary>
            <remarks>
            This is the 1.3 version of Skein defined in the Skein hash function submission to the NIST SHA-3
            competition in October 2010.
            <p/>
            Skein was designed by Niels Ferguson - Stefan Lucks - Bruce Schneier - Doug Whiting - Mihir
            Bellare - Tadayoshi Kohno - Jon Callas - Jesse Walker.
            </remarks>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine"/>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters"/>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_256">
            <summary>
            256 bit block size - Skein-256
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_512">
            <summary>
            512 bit block size - Skein-512
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_1024">
            <summary>
            1024 bit block size - Skein-1024
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a Skein MAC with an internal state size and output size.
            </summary>
            <param name="stateSizeBits">the internal state size in bits - one of <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_256"/> <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_512"/> or
                                  <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac.SKEIN_1024"/>.</param>
            <param name="digestSizeBits">the output/MAC size to produce in bits, which must be an integral number of
                                 bytes.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac.Init(EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>
            Optionally initialises the Skein digest with the provided parameters.
            </summary>
            See <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters"></see> for details on the parameterisation of the Skein hash function.
            <param name="parameters">the parameters to apply to this engine, or <code>null</code> to use no parameters.</param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher">
            implements Cipher-Block-Chaining (CBC) mode on top of a simple cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of chaining.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher.GetBlockSize">
             return the block size of the underlying cipher.
            
             @return the block size of the underlying cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate chaining step for CBC mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the decrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Modes.CbcBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CBC".
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.CcmBlockCipher">
            Implements the Counter with Cipher Block Chaining mode (CCM) detailed in
            NIST Special Publication 800-38C.
            <p>
            <b>Note</b>: this mode is a packet mode - it needs all the data up front.
            </p>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher">
            <summary>
            A block cipher mode that includes authenticated encryption with a streaming mode
            and optional associated data.</summary>
            <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.AeadParameters"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetUnderlyingCipher">
            <summary>The block cipher underlying this algorithm.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the cipher.</summary>
            <remarks>Parameter can either be an AeadParameters or a ParametersWithIV object.</remarks>
            <param name="forEncryption">Initialise for encryption if true, for decryption if false.</param>
            <param name="parameters">The key or other data required by the cipher.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetBlockSize">
            <returns>The block size for this cipher, in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.ProcessAadByte(System.Byte)">
            <summary>Add a single byte to the associated data check.</summary>
            <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
            <param name="input">The byte to be processed.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.ProcessAadBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Add a sequence of bytes to the associated data check.</summary>
            <remarks>If the implementation supports it, this will be an online operation and will not retain the associated data.</remarks>
            <param name="inBytes">The input byte array.</param>
            <param name="inOff">The offset into the input array where the data to be processed starts.</param>
            <param name="len">The number of bytes to be processed.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             Encrypt/decrypt a single byte.
            
             @param input the byte to be processed.
             @param outBytes the output buffer the processed byte goes into.
             @param outOff the offset into the output byte array the processed data starts at.
             @return the number of bytes written to out.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             Process a block of bytes from in putting the result into out.
            
             @param inBytes the input byte array.
             @param inOff the offset into the in array where the data to be processed starts.
             @param len the number of bytes to be processed.
             @param outBytes the output buffer the processed bytes go into.
             @param outOff the offset into the output byte array the processed data starts at.
             @return the number of bytes written to out.
             @exception DataLengthException if the output buffer is too small.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Finish the operation either appending or verifying the MAC at the end of the data.
            
             @param outBytes space for any resulting output data.
             @param outOff offset into out to start copying the data at.
             @return number of bytes written into out.
             @throws InvalidOperationException if the cipher is in an inappropriate state.
             @throws InvalidCipherTextException if the MAC fails to match.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetMac">
             Return the value of the MAC associated with the last stream processed.
            
             @return MAC for plaintext data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetUpdateOutputSize(System.Int32)">
             Return the size of the output buffer required for a ProcessBytes
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to ProcessBytes
             with len bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.GetOutputSize(System.Int32)">
             Return the size of the output buffer required for a ProcessBytes plus a
             DoFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to ProcessBytes and DoFinal
             with len bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.Reset">
            <summary>
            Reset the cipher to the same state as it was after the last init (if there was one).
            </summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher.AlgorithmName">
            <summary>The name of the algorithm this cipher implements.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CcmBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CcmBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CcmBlockCipher.GetMac">
             Returns a byte array containing the mac calculated as part of the
             last encrypt or decrypt operation.
            
             @return the last mac calculated.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessPacket(System.Byte[],System.Int32,System.Int32)">
             Process a packet of data for either CCM decryption or encryption.
            
             @param in data for processing.
             @param inOff offset at which data starts in the input array.
             @param inLen length of the data in the input array.
             @return a byte array containing the processed input..
             @throws IllegalStateException if the cipher is not appropriately set up.
             @throws InvalidCipherTextException if the input data is truncated or the mac check fails.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CcmBlockCipher.ProcessPacket(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             Process a packet of data for either CCM decryption or encryption.
            
             @param in data for processing.
             @param inOff offset at which data starts in the input array.
             @param inLen length of the data in the input array.
             @param output output array.
             @param outOff offset into output array to start putting processed bytes.
             @return the number of bytes added to output.
             @throws IllegalStateException if the cipher is not appropriately set up.
             @throws InvalidCipherTextException if the input data is truncated or the mac check fails.
             @throws DataLengthException if output buffer too short.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher">
            implements a Cipher-FeedBack (CFB) mode on top of a simple cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Modes.CfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/CFB"
             and the block size in bits.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.CtsBlockCipher">
            A Cipher Text Stealing (CTS) mode cipher. CTS allows block ciphers to
            be used to produce cipher text which is the same outLength as the plain text.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CtsBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             Create a buffered block cipher that uses Cipher Text Stealing
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CtsBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update of 'length' bytes.
            
             @param length the outLength of the input.
             @return the space required to accommodate a call to update
             with length bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CtsBlockCipher.GetOutputSize(System.Int32)">
             return the size of the output buffer required for an update plus a
             doFinal with an input of length bytes.
            
             @param length the outLength of the input.
             @return the space required to accommodate a call to update and doFinal
             with length bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CtsBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CtsBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param length the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.CtsBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if cipher text decrypts wrongly (in
             case the exception will never Get thrown).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.EaxBlockCipher">
            A Two-Pass Authenticated-Encryption Scheme Optimized for Simplicity and 
            Efficiency - by M. Bellare, P. Rogaway, D. Wagner.
            
            http://www.cs.ucdavis.edu/~rogaway/papers/eax.pdf
            
            EAX is an AEAD scheme based on CTR and OMAC1/CMAC, that uses a single block 
            cipher to encrypt and authenticate data. It's on-line (the length of a 
            message isn't needed to begin processing it), has good performances, it's
            simple and provably secure (provided the underlying block cipher is secure).
            
            Of course, this implementations is NOT thread-safe.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.EaxBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             Constructor that accepts an instance of a block cipher engine.
            
             @param cipher the engine to use
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.GcmBlockCipher">
            <summary>
            Implements the Galois/Counter mode (GCM) detailed in
            NIST Special Publication 800-38D.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.GcmBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <remarks>
            MAC sizes from 32 bits to 128 bits (must be a multiple of 8) are supported. The default is 128 bits.
            Sizes less than 96 are not recommended, but are supported for specialized applications.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.GOfbBlockCipher">
            implements the GOST 28147 OFB counter mode (GCTR).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.GOfbBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             counter mode (must have a 64 bit block size).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.GOfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.GOfbBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param encrypting if true the cipher is initialised for
              encryption, if false for decryption.
             @param parameters the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.GOfbBlockCipher.GetBlockSize">
             return the block size we are operating at (in bytes).
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.GOfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.GOfbBlockCipher.Reset">
            reset the feedback vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Modes.GOfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/GCTR"
             and the block size in bits
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.OcbBlockCipher">
            An implementation of <a href="http://tools.ietf.org/html/rfc7253">RFC 7253 on The OCB
            Authenticated-Encryption Algorithm</a>, licensed per:
            
            <blockquote><p><a href="http://www.cs.ucdavis.edu/~rogaway/ocb/license1.pdf">License for
            Open-Source Software Implementations of OCB</a> (Jan 9, 2013) - 'License 1'<br/>
            Under this license, you are authorized to make, use, and distribute open-source software
            implementations of OCB. This license terminates for you if you sue someone over their open-source
            software implementation of OCB claiming that you have a patent covering their implementation.
            </p><p>
            This is a non-binding summary of a legal document (the link above). The parameters of the license
            are specified in the license document and that document is controlling.</p></blockquote>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.OfbBlockCipher">
            implements a Output-FeedBack (OFB) mode on top of a simple cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OfbBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
             @param blockSize the block size in bits (note: a multiple of 8)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OfbBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OfbBlockCipher.GetBlockSize">
             return the block size we are operating at (in bytes).
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OfbBlockCipher.Reset">
            reset the feedback vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Modes.OfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/OFB"
             and the block size in bits
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher">
                * Implements OpenPGP's rather strange version of Cipher-FeedBack (CFB) mode
                * on top of a simple cipher. This class assumes the IV has been prepended
                * to the data stream already, and just accomodates the reset after
                * (blockSize + 2) bytes have been read.
                * <p>
                * For further info see <a href="http://www.ietf.org/rfc/rfc2440.html">RFC 2440</a>.
            	* </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param cipher the block cipher to be used as the basis of the
             feedback mode.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.GetBlockSize">
             return the block size we are operating at.
            
             @return the block size we are operating at (in bytes).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.ProcessBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Process one block of input from the array in and write it to
             the out array.
            
             @param in the array containing the input data.
             @param inOff offset into the in array the data starts at.
             @param out the array the output data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.Reset">
            reset the chaining vector back to the IV and reset the underlying
            cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the cipher and, possibly, the initialisation vector (IV).
             If an IV isn't passed as part of the parameter, the IV will be all zeros.
             An IV which is too short is handled in FIPS compliant fashion.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param parameters the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.EncryptByte(System.Byte,System.Int32)">
            Encrypt one byte of data according to CFB mode.
            @param data the byte to encrypt
            @param blockOff offset in the current block
            @returns the encrypted byte
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.EncryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB IV mode encryption.
            
             @param in the array containing the data to be encrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.DecryptBlock(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Do the appropriate processing for CFB IV mode decryption.
            
             @param in the array containing the data to be decrypted.
             @param inOff offset into the in array the data starts at.
             @param out the array the encrypted data will be copied into.
             @param outOff the offset into the out array the output will start at.
             @exception DataLengthException if there isn't enough data in in, or
             space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
             @return the number of bytes processed and produced.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Modes.OpenPgpCfbBlockCipher.AlgorithmName">
             return the algorithm name and mode.
            
             @return the name of the underlying algorithm followed by "/PGPCFB"
             and the block size in bits.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Modes.SicBlockCipher">
            Implements the Segmented Integer Counter (SIC) mode on top of a simple
            block cipher.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.SicBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             Basic constructor.
            
             @param c the block cipher to be used.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Modes.SicBlockCipher.GetUnderlyingCipher">
             return the underlying block cipher that we are wrapping.
            
             @return the underlying block cipher that we are wrapping.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.OpenSsl.MiscPemGenerator">
            PEM generator for the original set of PEM objects used in Open SSL.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObjectGenerator.Generate">
            <returns>
            A <see cref="T:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject"/>
            </returns>
            <exception cref="T:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemGenerationException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.OpenSsl.PemReader">
            Class for reading OpenSSL PEM encoded streams containing 
            X509 certificates, PKCS8 encoded keys and PKCS7 objects.
            <p>
            In the case of PKCS7 objects the reader will return a CMS ContentInfo object. Keys and
            Certificates will be returned using the appropriate java.security type.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemReader.ReadPemObject">
            <returns>
            A <see cref="T:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject"/>
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.PemReader.#ctor(System.IO.TextReader)">
             Create a new PemReader
            
             @param reader the Reader
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.PemReader.#ctor(System.IO.TextReader,EnterpriseDT.BouncyCastle.OpenSsl.IPasswordFinder)">
             Create a new PemReader with a password finder
            
             @param reader the Reader
             @param pFinder the password finder
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.PemReader.ReadCertificate(EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a X509Certificate.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.PemReader.ReadCrl(EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a X509CRL.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.PemReader.ReadCertificateRequest(EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a PKCS10 certification request.
            
             @return the certificate request.
             @throws IOException if an I/O error occured
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.PemReader.ReadAttributeCertificate(EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a X509 Attribute Certificate.
            
             @return the X509 Attribute Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.PemReader.ReadPkcs7(EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Reads in a PKCS7 object. This returns a ContentInfo object suitable for use with the CMS
             API.
            
             @return the X509Certificate
             @throws IOException if an I/O error occured
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.PemReader.ReadPrivateKey(EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject)">
            Read a Key Pair
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.OpenSsl.PemWriter">
            <remarks>General purpose writer for OpenSSL PEM objects.</remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemWriter">
            A generic PEM writer, based on RFC 1421
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemWriter.#ctor(System.IO.TextWriter)">
             Base constructor.
            
             @param out output stream to use.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemWriter.GetOutputSize(EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject)">
             Return the number of bytes or characters required to contain the
             passed in object if it is PEM encoded.
            
             @param obj pem object to be output
             @return an estimate of the number of bytes
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.PemWriter.#ctor(System.IO.TextWriter)">
            <param name="writer">The TextWriter object to write the output to.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.Pkcs8Generator.#ctor(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
             Constructor for an unencrypted private key PEM object.
            
             @param key private key to be encoded.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.OpenSsl.Pkcs8Generator.#ctor(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,System.String)">
             Constructor for an encrypted private key PEM object.
            
             @param key       private key to be encoded
             @param algorithm encryption algorithm to use
             @param provider  provider to use
             @throws NoSuchAlgorithmException if algorithm/mode cannot be found
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Operators.X509Utilities.GetDigestAlgName(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Operators.Asn1SignatureFactory">
            <summary>
            Calculator factory class for signature generation in ASN.1 based profiles that use an AlgorithmIdentifier to preserve
            signature algorithm details.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Operators.Asn1SignatureFactory.#ctor(System.String,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Base constructor.
            </summary>
            <param name="algorithm">The name of the signature algorithm to use.</param>
            <param name="privateKey">The private key to be used in the signing operation.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Operators.Asn1SignatureFactory.#ctor(System.String,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary>
            Constructor which also specifies a source of randomness to be used if one is required.
            </summary>
            <param name="algorithm">The name of the signature algorithm to use.</param>
            <param name="privateKey">The private key to be used in the signing operation.</param>
            <param name="random">The source of randomness to be used in signature calculation.</param>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Operators.Asn1SignatureFactory.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the verifier provider.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Operators.Asn1VerifierFactory">
            <summary>
            Verifier class for signature verification in ASN.1 based profiles that use an AlgorithmIdentifier to preserve
            signature algorithm details.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Operators.Asn1VerifierFactory.#ctor(System.String,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Base constructor.
            </summary>
            <param name="algorithm">The name of the signature algorithm to use.</param>
            <param name="publicKey">The public key to be used in the verification operation.</param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Operators.Asn1VerifierFactoryProvider">
            <summary>
            Provider class which supports dynamic creation of signature verifiers.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Operators.Asn1VerifierFactoryProvider.#ctor(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Base constructor - specify the public key to be used in verification.
            </summary>
            <param name="publicKey">The public key to be used in creating verifiers provided by this object.</param>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Operators.Asn1VerifierFactoryProvider.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the verifier provider.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding">
            Block cipher padders are expected to conform to this interface
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.Init(EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param param parameters, if any required.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
            @exception InvalidCipherTextException if the padding is badly formed
            or invalid.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO10126d2Padding">
            A padder that adds ISO10126-2 padding to a block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.Init(EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if available.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO10126d2Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO7816d4Padding">
            A padder that adds the padding according to the scheme referenced in
            ISO 7814-4 - scheme 2 from ISO 9797-1. The first byte is 0x80, rest is 0x00
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.Init(EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Paddings.ISO7816d4Padding.PaddingName">
             Return the name of the algorithm the padder implements.
            
             @return the name of the algorithm the padder implements.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher">
            A wrapper class that allows block ciphers to be used to process data in
            a piecemeal fashion with padding. The PaddedBufferedBlockCipher
            outputs a block only when the buffer is full and more data is being added,
            or on a doFinal (unless the current block in the buffer is a pad block).
            The default padding mechanism used is the one outlined in Pkcs5/Pkcs7.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,EnterpriseDT.BouncyCastle.Crypto.Paddings.IBlockCipherPadding)">
             Create a buffered block cipher with the desired padding.
            
             @param cipher the underlying block cipher this buffering object wraps.
             @param padding the padding type.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher)">
             Create a buffered block cipher Pkcs7 padding
            
             @param cipher the underlying block cipher this buffering object wraps.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the cipher.
            
             @param forEncryption if true the cipher is initialised for
              encryption, if false for decryption.
             @param param the key and other data required by the cipher.
             @exception ArgumentException if the parameters argument is
             inappropriate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.GetOutputSize(System.Int32)">
             return the minimum size of the output buffer required for an update
             plus a doFinal with an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update and doFinal
             with len bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.GetUpdateOutputSize(System.Int32)">
             return the size of the output buffer required for an update
             an input of len bytes.
            
             @param len the length of the input.
             @return the space required to accommodate a call to update
             with len bytes of input.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessByte(System.Byte,System.Byte[],System.Int32)">
             process a single byte, producing an output block if necessary.
            
             @param in the input byte.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
             process an array of bytes, producing output if necessary.
            
             @param in the input byte array.
             @param inOff the offset at which the input data starts.
             @param len the number of bytes to be copied out of the input array.
             @param out the space for any output that might be produced.
             @param outOff the offset from which the output will be copied.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there isn't enough space in out.
             @exception InvalidOperationException if the cipher isn't initialised.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.PaddedBufferedBlockCipher.DoFinal(System.Byte[],System.Int32)">
             Process the last block in the buffer. If the buffer is currently
             full and padding needs to be added a call to doFinal will produce
             2 * GetBlockSize() bytes.
            
             @param out the array the block currently being held is copied into.
             @param outOff the offset at which the copying starts.
             @return the number of output bytes copied to out.
             @exception DataLengthException if there is insufficient space in out for
             the output or we are decrypting and the input is not block size aligned.
             @exception InvalidOperationException if the underlying cipher is not
             initialised.
             @exception InvalidCipherTextException if padding is expected and not found.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Paddings.Pkcs7Padding">
            A padder that adds Pkcs7/Pkcs5 padding to a block.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.Pkcs7Padding.Init(EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param random - a SecureRandom if available.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.Pkcs7Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.Pkcs7Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Paddings.Pkcs7Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Paddings.TbcPadding">
            <summary> A padder that adds Trailing-Bit-Compliment padding to a block.
            <p>
            This padding pads the block out compliment of the last bit
            of the plain text.
            </p>
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.TbcPadding.Init(EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary> Initialise the padder.</summary>
            <param name="random">- a SecureRandom if available.
            </param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.TbcPadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            <p>
            Note: this assumes that the last block of plain text is always
            passed to it inside in. i.e. if inOff is zero, indicating the
            entire block is to be overwritten with padding the value of in
            should be the same as the last block of plain text.
            </p>
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.TbcPadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Paddings.TbcPadding.PaddingName">
            <summary> Return the name of the algorithm the cipher implements.</summary>
            <returns> the name of the algorithm the cipher implements.
            </returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Paddings.X923Padding">
            A padder that adds X9.23 padding to a block - if a SecureRandom is
            passed in random padding is assumed, otherwise padding with zeros is used.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.X923Padding.Init(EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             Initialise the padder.
            
             @param random a SecureRandom if one is available.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.X923Padding.AddPadding(System.Byte[],System.Int32)">
            add the pad bytes to the passed in block, returning the
            number of bytes added.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.X923Padding.PadCount(System.Byte[])">
            return the number of pad bytes present in the block.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Paddings.X923Padding.PaddingName">
             Return the name of the algorithm the cipher implements.
            
             @return the name of the algorithm the cipher implements.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Paddings.ZeroBytePadding">
            <summary> A padder that adds Null byte padding to a block.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.ZeroBytePadding.Init(EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             <summary> Initialise the padder.
            
             </summary>
             <param name="random">- a SecureRandom if available.
             </param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.ZeroBytePadding.AddPadding(System.Byte[],System.Int32)">
            <summary> add the pad bytes to the passed in block, returning the
            number of bytes added.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Paddings.ZeroBytePadding.PadCount(System.Byte[])">
            <summary> return the number of pad bytes present in the block.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Paddings.ZeroBytePadding.PaddingName">
             <summary> Return the name of the algorithm the cipher implements.
            
             </summary>
             <returns> the name of the algorithm the cipher implements.
             </returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.AeadParameters.#ctor(EnterpriseDT.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[])">
             Base constructor.
            
             @param key key to be used by underlying cipher
             @param macSize macSize in bits
             @param nonce nonce to be used
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.AeadParameters.#ctor(EnterpriseDT.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[],System.Byte[])">
             Base constructor.
            
             @param key key to be used by underlying cipher
             @param macSize macSize in bits
             @param nonce nonce to be used
             @param associatedText associated text, if any
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.CcmParameters.#ctor(EnterpriseDT.BouncyCastle.Crypto.Parameters.KeyParameter,System.Int32,System.Byte[],System.Byte[])">
            Base constructor.
            
            @param key key to be used by underlying cipher
            @param macSize macSize in bits
            @param nonce nonce to be used
            @param associatedText associated text, if any
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.DesParameters.IsWeakKey(System.Byte[],System.Int32)">
            DES has 16 weak keys.  This method will check
            if the given DES key material is weak or semi-weak.
            Key material that is too short is regarded as weak.
            <p>
            See <a href="http://www.counterpane.com/applied.html">"Applied
            Cryptography"</a> by Bruce Schneier for more information.
            </p>
            @return true if the given DES key material is weak or semi-weak,
                false otherwise.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.DesParameters.SetOddParity(System.Byte[])">
             DES Keys use the LSB as the odd parity bit.  This can
             be used to check for corrupt keys.
            
             @param bytes the byte array to set the parity on.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32,System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
             @param length number of bytes making up the key
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsWeakKey(System.Byte[],System.Int32)">
             return true if the passed in key is a DES-EDE weak key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsRealEdeKey(System.Byte[],System.Int32)">
             return true if the passed in key is a real 2/3 part DES-EDE key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsReal2Key(System.Byte[],System.Int32)">
             return true if the passed in key is a real 2 part DES-EDE key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.DesEdeParameters.IsReal3Key(System.Byte[],System.Int32)">
             return true if the passed in key is a real 3 part DES-EDE key.
            
             @param key bytes making up the key
             @param offset offset into the byte array the key starts at
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.DHParameters.M">
            <summary>The minimum bitlength of the private value.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.DHParameters.L">
            <summary>The bitlength of the private value.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.#ctor(System.Int32,System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             Construct without a usage index, this will do a random construction of G.
            
             @param L desired length of prime P in bits (the effective key size).
             @param N desired length of prime Q in bits.
             @param certainty certainty level for prime number generation.
             @param random the source of randomness to use.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.DsaParameterGenerationParameters.#ctor(System.Int32,System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Security.SecureRandom,System.Int32)">
             Construct for a specific usage index - this has the effect of using verifiable canonical generation of G.
            
             @param L desired length of prime P in bits (the effective key size).
             @param N desired length of prime Q in bits.
             @param certainty certainty level for prime number generation.
             @param random the source of randomness to use.
             @param usageIndex a valid usage index.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.ElGamalParameters.G">
            return the generator - g
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.ElGamalParameters.L">
            return private value limit - l
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.IesParameters">
            parameters for using an integrated cipher in stream mode.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.IesParameters.#ctor(System.Byte[],System.Byte[],System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.IesWithCipherParameters.#ctor(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            @param derivation the derivation parameter for the KDF function.
            @param encoding the encoding parameter for the KDF function.
            @param macKeySize the size of the MAC key (in bits).
            @param cipherKeySize the size of the associated Cipher key (in bits).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.Iso18033KdfParameters">
            parameters for Key derivation functions for ISO-18033
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.KdfParameters">
            parameters for Key derivation functions for IEEE P1363a
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.MgfParameters">
            <remarks>Parameters for mask derivation functions.</remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters">
             Parameters for NaccacheStern public private key generation. For details on
             this cipher, please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.#ctor(EnterpriseDT.BouncyCastle.Security.SecureRandom,System.Int32,System.Int32,System.Int32)">
             Parameters for generating a NaccacheStern KeyPair.
            
             @param random
                        The source of randomness
             @param strength
                        The desired strength of the Key in Bits
             @param certainty
                        the probability that the generated primes are not really prime
                        as integer: 2^(-certainty) is then the probability
             @param countSmallPrimes
                        How many small key factors are desired
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.#ctor(EnterpriseDT.BouncyCastle.Security.SecureRandom,System.Int32,System.Int32,System.Int32,System.Boolean)">
            		 * Parameters for a NaccacheStern KeyPair.
            		 *
            		 * @param random
            		 *            The source of randomness
            		 * @param strength
            		 *            The desired strength of the Key in Bits
            		 * @param certainty
            		 *            the probability that the generated primes are not really prime
            		 *            as integer: 2^(-certainty) is then the probability
            		 * @param cntSmallPrimes
            		 *            How many small key factors are desired
            		 * @param debug
                     *            Ignored
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.Certainty">
            @return Returns the certainty.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyGenerationParameters.CountSmallPrimes">
            @return Returns the countSmallPrimes.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters">
             Public key parameters for NaccacheStern cipher. For details on this cipher,
             please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.#ctor(System.Boolean,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,System.Int32)">
            @param privateKey
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.G">
            @return Returns the g.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.LowerSigmaBound">
            @return Returns the lowerSigmaBound.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternKeyParameters.Modulus">
            @return Returns the n.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternPrivateKeyParameters">
             Private key parameters for NaccacheStern cipher. For details on this cipher,
             please see
            
             http://www.gemplus.com/smart/rd/publications/pdf/NS98pkcs.pdf
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.NaccacheSternPrivateKeyParameters.#ctor(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,System.Int32,System.Collections.IList,EnterpriseDT.BouncyCastle.Math.BigInteger)">
             Constructs a NaccacheSternPrivateKey
            
             @param g
                        the public enryption parameter g
             @param n
                        the public modulus n = p*q
             @param lowerSigmaBound
                        the public lower sigma bound up to which data can be encrypted
             @param smallPrimes
                        the small primes, of which sigma is constructed in the right
                        order
             @param phi_n
                        the private modulus phi(n) = (p-1)(q-1)
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.ParametersWithSalt">
            <summary> Cipher parameters with a fixed salt value associated with them.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters">
            <summary>
            Parameters for the Skein hash function - a series of byte[] strings identified by integer tags.
            </summary>
            <remarks>
            Parameterised Skein can be used for:
            <ul> 
            <li>MAC generation, by providing a <see cref="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetKey(System.Byte[])">key</see>.</li>
            <li>Randomised hashing, by providing a <see cref="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetNonce(System.Byte[])">nonce</see>.</li>
            <li>A hash function for digital signatures, associating a
            <see cref="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPublicKey(System.Byte[])">public key</see> with the message digest.</li>
            <li>A key derivation function, by providing a
            <see cref="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetKeyIdentifier(System.Byte[])">key identifier</see>.</li>
            <li>Personalised hashing, by providing a
            <see cref="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.DateTime,System.String,System.String)">recommended format</see> or
            <see cref="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.Byte[])">arbitrary</see> personalisation string.</li>
            </ul>
            </remarks>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinEngine"/>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Digests.SkeinDigest"/>
            <seealso cref="T:EnterpriseDT.BouncyCastle.Crypto.Macs.SkeinMac"/>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY">
            <summary>
            The parameter type for a secret key, supporting MAC or KDF functions: 0
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_CONFIG">
            <summary>
            The parameter type for the Skein configuration block: 4
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION">
            <summary>
            The parameter type for a personalisation string: 8
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PUBLIC_KEY">
            <summary>
            The parameter type for a public key: 12
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER">
            <summary>
            The parameter type for a key identifier string: 16
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE">
            <summary>
            The parameter type for a nonce: 20
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_MESSAGE">
            <summary>
            The parameter type for the message: 48
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_OUTPUT">
            <summary>
            The parameter type for the output transformation: 63
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.GetParameters">
            <summary>
            Obtains a map of type (int) to value (byte[]) for the parameters tracked in this object.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.GetKey">
            <summary>
            Obtains the value of the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY">key parameter</see>, or <code>null</code> if not
            set.
            </summary>
            <returns>The key.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.GetPersonalisation">
            <summary>
            Obtains the value of the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION">personalisation parameter</see>, or
            <code>null</code> if not set.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.GetPublicKey">
            <summary>
            Obtains the value of the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PUBLIC_KEY">public key parameter</see>, or
            <code>null</code> if not set.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.GetKeyIdentifier">
            <summary>
            Obtains the value of the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER">key identifier parameter</see>, or
            <code>null</code> if not set.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.GetNonce">
            <summary>
            Obtains the value of the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE">nonce parameter</see>, or <code>null</code> if
            not set.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder">
            <summary>
            A builder for <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.Set(System.Int32,System.Byte[])">
            <summary>
            Sets a parameters to apply to the Skein hash function.
            </summary>
            <remarks>
            Parameter types must be in the range 0,5..62, and cannot use the value 48
            (reserved for message body).
            <p/>
            Parameters with type &lt; 48 are processed before
            the message content, parameters with type &gt; 48
            are processed after the message and prior to output.
            </remarks>
            <param name="type">the type of the parameter, in the range 5..62.</param>
            <param name="value">the byte sequence of the parameter.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetKey(System.Byte[])">
            <summary>
            Sets the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY"/> parameter.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.Byte[])">
            <summary>
            Sets the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_PERSONALISATION"/> parameter.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPersonalisation(System.DateTime,System.String,System.String)">
            <summary>
            Implements the recommended personalisation format for Skein defined in Section 4.11 of
            the Skein 1.3 specification.
            </summary>
            <remarks>
            The format is <code>YYYYMMDD email@address distinguisher</code>, encoded to a byte
            sequence using UTF-8 encoding.
            </remarks>
            <param name="date">the date the personalised application of the Skein was defined.</param>
            <param name="emailAddress">the email address of the creation of the personalised application.</param>
            <param name="distinguisher">an arbitrary personalisation string distinguishing the application.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetPublicKey(System.Byte[])">
            <summary>
            Sets the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER"/> parameter.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetKeyIdentifier(System.Byte[])">
            <summary>
            Sets the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_KEY_IDENTIFIER"/> parameter.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.SetNonce(System.Byte[])">
            <summary>
            Sets the <see cref="F:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.PARAM_TYPE_NONCE"/> parameter.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters.Builder.Build">
            <summary>
            Constructs a new <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.SkeinParameters"/> instance with the parameters provided to this
            builder.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters">
            <summary>
            Parameters for tweakable block ciphers.
            </summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters.Key">
            <summary>
            Gets the key.
            </summary>
            <value>the key to use, or <code>null</code> to use the current key.</value>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Parameters.TweakableBlockCipherParameters.Tweak">
            <summary>
            Gets the tweak value.
            </summary>
            <value>The tweak to use, or <code>null</code> to use the current tweak.</value>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.BasicEntropySourceProvider">
            An EntropySourceProvider where entropy generation is based on a SecureRandom output using SecureRandom.generateSeed().
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.BasicEntropySourceProvider.#ctor(EnterpriseDT.BouncyCastle.Security.SecureRandom,System.Boolean)">
             Create a entropy source provider based on the passed in SecureRandom.
            
             @param secureRandom the SecureRandom to base EntropySource construction on.
             @param isPredictionResistant boolean indicating if the SecureRandom is based on prediction resistant entropy or not (true if it is).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.BasicEntropySourceProvider.Get(System.Int32)">
             Return an entropy source that will create bitsRequired bits of entropy on
             each invocation of getEntropy().
            
             @param bitsRequired size (in bits) of entropy to be created by the provided source.
             @return an EntropySource that generates bitsRequired bits of entropy on each call to its getEntropy() method.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.CryptoApiRandomGenerator">
            <summary>
            Uses Microsoft's RNGCryptoServiceProvider
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.IRandomGenerator">
            <remarks>Generic interface for objects generating random bytes.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.IRandomGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.IRandomGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.DigestRandomGenerator">
            Random generation based on the digest with counter. Calling AddSeedMaterial will
            always increase the entropy of the hash.
            <p>
            Internal access to the digest is synchronized so a single one of these can be shared.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.EntropyUtilities.GenerateSeed(EnterpriseDT.BouncyCastle.Crypto.IEntropySource,System.Int32)">
             Generate numBytes worth of entropy from the passed in entropy source.
            
             @param entropySource the entropy source to request the data from.
             @param numBytes the number of bytes of entropy requested.
             @return a byte array populated with the random data.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.ReversedWindowGenerator">
            <remarks>
            Takes bytes generated by an underling RandomGenerator and reverses the order in
            each small window (of configurable size).
            <p>
            Access to internals is synchronized so a single one of these can be shared.
            </p>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.ReversedWindowGenerator.AddSeedMaterial(System.Byte[])">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A byte array to be mixed into the generator's state.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.ReversedWindowGenerator.AddSeedMaterial(System.Int64)">
            <summary>Add more seed material to the generator.</summary>
            <param name="seed">A long value to be mixed into the generator's state.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.ReversedWindowGenerator.NextBytes(System.Byte[])">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to be filled.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.ReversedWindowGenerator.NextBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>Fill byte array with random values.</summary>
            <param name="bytes">Array to receive bytes.</param>
            <param name="start">Index to start filling at.</param>
            <param name="len">Length of segment to fill.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.SecureRandom.GetInstance(System.String)">
            <summary>
            Create and auto-seed an instance based on the given algorithm.
            </summary>
            <remarks>Equivalent to GetInstance(algorithm, true)</remarks>
            <param name="algorithm">e.g. "SHA256PRNG"</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.SecureRandom.GetInstance(System.String,System.Boolean)">
            <summary>
            Create an instance based on the given algorithm, with optional auto-seeding
            </summary>
            <param name="algorithm">e.g. "SHA256PRNG"</param>
            <param name="autoSeed">If true, the instance will be auto-seeded.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.SecureRandom.#ctor(System.Byte[])">
            <remarks>
            To replicate existing predictable output, replace with GetInstance("SHA1PRNG", false), followed by SetSeed(seed)
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.SecureRandom.#ctor(EnterpriseDT.BouncyCastle.Crypto.Prng.IRandomGenerator)">
            <summary>Use the specified instance of IRandomGenerator as random source.</summary>
            <remarks>
            This constructor performs no seeding of either the <c>IRandomGenerator</c> or the
            constructed <c>SecureRandom</c>. It is the responsibility of the client to provide
            proper seed material as necessary/appropriate for the given <c>IRandomGenerator</c>
            implementation.
            </remarks>
            <param name="generator">The source to generate all random bytes from.</param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder">
            Builder class for making SecureRandom objects based on SP 800-90A Deterministic Random Bit Generators (DRBG).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.#ctor">
            Basic constructor, creates a builder using an EntropySourceProvider based on the default SecureRandom with
            predictionResistant set to false.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the default SecureRandom does for its generateSeed() call.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.#ctor(EnterpriseDT.BouncyCastle.Security.SecureRandom,System.Boolean)">
            Construct a builder with an EntropySourceProvider based on the passed in SecureRandom and the passed in value
            for prediction resistance.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the passed in SecureRandom does for its generateSeed() call.
            </p>
            @param entropySource
            @param predictionResistant
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.#ctor(EnterpriseDT.BouncyCastle.Crypto.IEntropySourceProvider)">
            Create a builder which makes creates the SecureRandom objects from a specified entropy source provider.
            <p>
            <b>Note:</b> If this constructor is used any calls to setSeed() in the resulting SecureRandom will be ignored.
            </p>
            @param entropySourceProvider a provider of EntropySource objects.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.SetPersonalizationString(System.Byte[])">
            Set the personalization string for DRBG SecureRandoms created by this builder
            @param personalizationString  the personalisation string for the underlying DRBG.
            @return the current builder.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.SetSecurityStrength(System.Int32)">
             Set the security strength required for DRBGs used in building SecureRandom objects.
            
             @param securityStrength the security strength (in bits)
             @return the current builder.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.SetEntropyBitsRequired(System.Int32)">
             Set the amount of entropy bits required for seeding and reseeding DRBGs used in building SecureRandom objects.
            
             @param entropyBitsRequired the number of bits of entropy to be requested from the entropy source on each seed/reseed.
             @return the current builder.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.BuildHash(EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Byte[],System.Boolean)">
             Build a SecureRandom based on a SP 800-90A Hash DRBG.
            
             @param digest digest algorithm to use in the DRBG underneath the SecureRandom.
             @param nonce  nonce value to use in DRBG construction.
             @param predictionResistant specify whether the underlying DRBG in the resulting SecureRandom should reseed on each request for bytes.
             @return a SecureRandom supported by a Hash DRBG.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.BuildCtr(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Byte[],System.Boolean)">
             Build a SecureRandom based on a SP 800-90A CTR DRBG.
            
             @param cipher the block cipher to base the DRBG on.
             @param keySizeInBits key size in bits to be used with the block cipher.
             @param nonce nonce value to use in DRBG construction.
             @param predictionResistant  specify whether the underlying DRBG in the resulting SecureRandom should reseed on each request for bytes.
             @return  a SecureRandom supported by a CTR DRBG.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.SP800SecureRandomBuilder.BuildHMac(EnterpriseDT.BouncyCastle.Crypto.IMac,System.Byte[],System.Boolean)">
             Build a SecureRandom based on a SP 800-90A HMAC DRBG.
            
             @param hMac HMAC algorithm to use in the DRBG underneath the SecureRandom.
             @param nonce  nonce value to use in DRBG construction.
             @param predictionResistant specify whether the underlying DRBG in the resulting SecureRandom should reseed on each request for bytes.
             @return a SecureRandom supported by a HMAC DRBG.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.ThreadedSeedGenerator">
            A thread based seed generator - one source of randomness.
            <p>
            Based on an idea from Marcus Lippert.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.ThreadedSeedGenerator.GenerateSeed(System.Int32,System.Boolean)">
            Generate seed bytes. Set fast to false for best quality.
            <p>
            If fast is set to true, the code should be round about 8 times faster when
            generating a long sequence of random bytes. 20 bytes of random values using
            the fast mode take less than half a second on a Nokia e70. If fast is set to false,
            it takes round about 2500 ms.
            </p>
            @param numBytes the number of bytes to generate
            @param fast true if fast mode should be used
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.P">
            <remarks>
            Permutation generated by code:
            <code>
            // First 1850 fractional digit of Pi number. 
            byte[] key = new BigInteger("14159265358979323846...5068006422512520511").ToByteArray();
            s = 0;
            P = new byte[256];
            for (int i = 0; i &lt; 256; i++) 
            {
                P[i] = (byte) i;
            }
            for (int m = 0; m &lt; 768; m++) 
            {
                s = P[(s + P[m &amp; 0xff] + key[m % key.length]) &amp; 0xff];
                byte temp = P[m &amp; 0xff];
                P[m &amp; 0xff] = P[s &amp; 0xff];
                P[s &amp; 0xff] = temp;
            } </code>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Prng.VmpcRandomGenerator.s">
            <remarks>Value generated in the same way as <c>P</c>.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.X931Rng.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Byte[],EnterpriseDT.BouncyCastle.Crypto.IEntropySource)">
            
             @param engine
             @param entropySource
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.X931Rng.Generate(System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.X931Rng.Reseed">
            Reseed the RNG.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder.#ctor">
            Basic constructor, creates a builder using an EntropySourceProvider based on the default SecureRandom with
            predictionResistant set to false.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the default SecureRandom does for its generateSeed() call.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder.#ctor(EnterpriseDT.BouncyCastle.Security.SecureRandom,System.Boolean)">
            Construct a builder with an EntropySourceProvider based on the passed in SecureRandom and the passed in value
            for prediction resistance.
            <p>
            Any SecureRandom created from a builder constructed like this will make use of input passed to SecureRandom.setSeed() if
            the passed in SecureRandom does for its generateSeed() call.
            </p>
            @param entropySource
            @param predictionResistant
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder.#ctor(EnterpriseDT.BouncyCastle.Crypto.IEntropySourceProvider)">
            Create a builder which makes creates the SecureRandom objects from a specified entropy source provider.
            <p>
            <b>Note:</b> If this constructor is used any calls to setSeed() in the resulting SecureRandom will be ignored.
            </p>
            @param entropySourceProvider a provider of EntropySource objects.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.X931SecureRandomBuilder.Build(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,EnterpriseDT.BouncyCastle.Crypto.Parameters.KeyParameter,System.Boolean)">
             Construct a X9.31 secure random generator using the passed in engine and key. If predictionResistant is true the
             generator will be reseeded on each request.
            
             @param engine a block cipher to use as the operator.
             @param key the block cipher key to initialise engine with.
             @param predictionResistant true if engine to be reseeded on each use, false otherwise.
             @return a SecureRandom.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg">
            A SP800-90A CTR DRBG.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg">
            Interface to SP800-90A deterministic random bit generators.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.ISP80090Drbg.BlockSize">
             Return the block size of the DRBG.
            
             @return the block size (in bits) produced by each round of the DRBG.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.#ctor(EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Crypto.IEntropySource,System.Byte[],System.Byte[])">
            Construct a SP800-90A CTR DRBG.
            <p>
            Minimum entropy requirement is the security strength requested.
            </p>
            @param engine underlying block cipher to use to support DRBG
            @param keySizeInBits size of the key to use with the block cipher.
            @param securityStrength security strength required (in bits)
            @param entropySource source of entropy to use for seeding/reseeding.
            @param personalizationString personalization string to distinguish this DRBG (may be null).
            @param nonce nonce to further distinguish this DRBG (may be null).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.PadKey(System.Byte[],System.Int32,System.Byte[],System.Int32)">
             Pad out a key for TDEA, setting odd parity for each byte.
            
             @param keyMaster
             @param keyOff
             @param tmp
             @param tmpOff
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.CtrSP800Drbg.BlockSize">
             Return the block size (in bits) of the DRBG.
            
             @return the number of bits produced on each internal round of the DRBG.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.DrbgUtilities.HashDF(EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Byte[],System.Int32)">
            Used by both Dual EC and Hash.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg">
            A SP800-90A Hash DRBG.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Int32,EnterpriseDT.BouncyCastle.Crypto.IEntropySource,System.Byte[],System.Byte[])">
            Construct a SP800-90A Hash DRBG.
            <p>
            Minimum entropy requirement is the security strength requested.
            </p>
            @param digest  source digest to use for DRB stream.
            @param securityStrength security strength required (in bits)
            @param entropySource source of entropy to use for seeding/reseeding.
            @param personalizationString personalization string to distinguish this DRBG (may be null).
            @param nonce nonce to further distinguish this DRBG (may be null).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HashSP800Drbg.BlockSize">
             Return the block size (in bits) of the DRBG.
            
             @return the number of bits produced on each internal round of the DRBG.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg">
            A SP800-90A HMAC DRBG.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.#ctor(EnterpriseDT.BouncyCastle.Crypto.IMac,System.Int32,EnterpriseDT.BouncyCastle.Crypto.IEntropySource,System.Byte[],System.Byte[])">
            Construct a SP800-90A Hash DRBG.
            <p>
            Minimum entropy requirement is the security strength requested.
            </p>
            @param hMac Hash MAC to base the DRBG on.
            @param securityStrength security strength required (in bits)
            @param entropySource source of entropy to use for seeding/reseeding.
            @param personalizationString personalization string to distinguish this DRBG (may be null).
            @param nonce nonce to further distinguish this DRBG (may be null).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.Generate(System.Byte[],System.Byte[],System.Boolean)">
             Populate a passed in array with random data.
            
             @param output output array for generated bits.
             @param additionalInput additional input to be added to the DRBG in this step.
             @param predictionResistant true if a reseed should be forced, false otherwise.
            
             @return number of bits generated, -1 if a reseed required.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.Reseed(System.Byte[])">
             Reseed the DRBG.
            
             @param additionalInput additional input to be added to the DRBG in this step.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Prng.Drbg.HMacSP800Drbg.BlockSize">
             Return the block size (in bits) of the DRBG.
            
             @return the number of bits produced on each round of the DRBG.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaDigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaDigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaSigner">
            The Digital Signature Algorithm - as described in "Handbook of Applied
            Cryptography", pages 452 - 453.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaSigner.#ctor">
            Default configuration, random K values.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaSigner.#ctor(EnterpriseDT.BouncyCastle.Crypto.Signers.IDsaKCalculator)">
             Configuration with an alternate, possibly deterministic calculator of K.
            
             @param kCalculator a K value calculator.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.DsaSigner.VerifySignature(System.Byte[],EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message for standard DSA the message should be a
            SHA-1 hash of the real message to be verified.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.ECDsaSigner">
            EC-DSA as described in X9.62
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.ECDsaSigner.#ctor">
            Default configuration, random K values.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.ECDsaSigner.#ctor(EnterpriseDT.BouncyCastle.Crypto.Signers.IDsaKCalculator)">
             Configuration with an alternate, possibly deterministic calculator of K.
            
             @param kCalculator a K value calculator.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.ECDsaSigner.GenerateSignature(System.Byte[])">
             Generate a signature for the given message using the key we were
             initialised with. For conventional DSA the message should be a SHA-1
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.ECDsaSigner.VerifySignature(System.Byte[],EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            return true if the value r and s represent a DSA signature for
            the passed in message (for standard DSA the message should be
            a SHA-1 hash of the real message to be verified).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.ECGost3410Signer">
            GOST R 34.10-2001 Signature Algorithm
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.ECGost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional GOST3410 the message should be a GOST3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.ECGost3410Signer.VerifySignature(System.Byte[],EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            return true if the value r and s represent a GOST3410 signature for
            the passed in message (for standard GOST3410 the message should be
            a GOST3411 hash of the real message to be verified).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.ECNRSigner">
            EC-NR as described in IEEE 1363-2000
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.ECNRSigner.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with.  Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR it *must* be at least as long.
            
             @param digest  the digest to be signed.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.ECNRSigner.VerifySignature(System.Byte[],EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
             return true if the value r and s represent a signature for the
             message passed in. Generally, the order of the curve should be at
             least as long as the hash of the message of interest, and with
             ECNR, it *must* be at least as long.  But just in case the signer
             applied mod(n) to the longer digest, this implementation will
             apply mod(n) during verification.
            
             @param digest  the digest to be verified.
             @param r       the r value of the signature.
             @param s       the s value of the signature.
             @exception DataLengthException if the digest is longer than the key allows
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.GenericSigner.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             initialise the signer for signing or verification.
            
             @param forSigning
                        true if for signing, false otherwise
             @param parameters
                        necessary parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.GenericSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.GenericSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.GenericSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using the key
            we were initialised with.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.GenericSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described in
            the passed in array.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.VerifySignature(System.Byte[])">
            <returns>true if the internal state represents the signature described in the passed in array.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Gost3410DigestSigner.Reset">
            <summary>Reset the internal state</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.Gost3410Signer">
            Gost R 34.10-94 Signature Algorithm
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Gost3410Signer.GenerateSignature(System.Byte[])">
             generate a signature for the given message using the key we were
             initialised with. For conventional Gost3410 the message should be a Gost3411
             hash of the message of interest.
            
             @param message the message that will be verified later.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Gost3410Signer.VerifySignature(System.Byte[],EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            return true if the value r and s represent a Gost3410 signature for
            the passed in message for standard Gost3410 the message should be a
            Gost3411 hash of the real message to be verified.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.HMacDsaKCalculator">
            A deterministic K calculator based on the algorithm in section 3.2 of RFC 6979.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.IDsaKCalculator">
            Interface define calculators of K values for DSA/ECDSA.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.IDsaKCalculator.Init(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
             Non-deterministic initialiser.
            
             @param n the order of the DSA group.
             @param random a source of randomness.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.IDsaKCalculator.Init(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,System.Byte[])">
             Deterministic initialiser.
            
             @param n the order of the DSA group.
             @param d the DSA private value.
             @param message the message being signed.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.IDsaKCalculator.NextK">
             Return the next valid value of K.
            
             @return a K value.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Signers.IDsaKCalculator.IsDeterministic">
             Return true if this calculator is deterministic, false otherwise.
            
             @return true if deterministic, otherwise false.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.HMacDsaKCalculator.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             Base constructor.
            
             @param digest digest to build the HMAC on.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner">
            <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 2 and 3).
            <p>
            Note: the usual length for the salt is the length of the hash
            function used in bytes.</p>
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.GetRecoveredMessage">
            <summary>
            Return a reference to the recoveredMessage message.
            </summary>
            <returns>The full/partial recoveredMessage message.</returns>
            <seealso cref="M:EnterpriseDT.BouncyCastle.Crypto.ISignerWithRecovery.GetRecoveredMessage"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Int32,System.Boolean)">
            <summary>
            Generate a signer with either implicit or explicit trailers for ISO9796-2, scheme 2 or 3.
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification</param>
            <param name="digest">digest to use.</param>
            <param name="saltLength">length of salt in bytes.</param>
            <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Int32)">
             <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
             <param name="cipher">cipher to use.
             </param>
             <param name="digest">digest to sign with.
             </param>
             <param name="saltLength">length of salt in bytes.
             </param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
            <summary>Initialise the signer.</summary>
            <param name="forSigning">true if for signing, false if for verification.</param>
            <param name="parameters">parameters for signature generation/verification. If the
            parameters are for generation they should be a ParametersWithRandom,
            a ParametersWithSalt, or just an RsaKeyParameters object. If RsaKeyParameters
            are passed in a SecureRandom will be created.
            </param>
            <exception cref="T:System.ArgumentException">if wrong parameter type or a fixed
            salt is passed in which is the wrong length.
            </exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.IsSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays - constant time.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.GenerateSignature">
            <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.VerifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.HasFullMessage">
            <summary>
            Return true if the full message was recoveredMessage.
            </summary>
            <returns>true on full message recovery, false otherwise, or if not sure.</returns>
            <seealso cref="M:EnterpriseDT.BouncyCastle.Crypto.ISignerWithRecovery.HasFullMessage"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
            <summary> int to octet string.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.LtoOSP(System.Int64,System.Byte[])">
            <summary> long to octet string.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2PssSigner.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in Pkcs1v2.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer">
            <summary> ISO9796-2 - mechanism using a hash function with recovery (scheme 1)</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.GetRecoveredMessage">
            <summary>
            Return a reference to the recoveredMessage message.
            </summary>
            <returns>The full/partial recoveredMessage message.</returns>
            <seealso cref="M:EnterpriseDT.BouncyCastle.Crypto.ISignerWithRecovery.GetRecoveredMessage"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Boolean)">
            <summary>
            Generate a signer with either implicit or explicit trailers for ISO9796-2.
            </summary>
            <param name="cipher">base cipher to use for signature creation/verification</param>
            <param name="digest">digest to use.</param>
            <param name="isImplicit">whether or not the trailer is implicit or gives the hash.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             <summary> Constructor for a signer with an explicit digest trailer.
            
             </summary>
             <param name="cipher">cipher to use.
             </param>
             <param name="digest">digest to sign with.
             </param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.IsSameAs(System.Byte[],System.Byte[])">
            <summary> compare two byte arrays - constant time.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.GenerateSignature">
            <summary> Generate a signature for the loaded message using the key we were
            initialised with.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.VerifySignature(System.Byte[])">
            <summary> return true if the signature represents a ISO9796-2 signature
            for the passed in message.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.Iso9796d2Signer.HasFullMessage">
            <summary>
            Return true if the full message was recoveredMessage.
            </summary>
            <returns> true on full message recovery, false otherwise.</returns>
            <seealso cref="M:EnterpriseDT.BouncyCastle.Crypto.ISignerWithRecovery.HasFullMessage"/>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner">
            <summary> RSA-PSS as described in Pkcs# 1 v 2.1.
            <p>
            Note: the usual value for the salt length is the number of
            bytes in the hash function.</p>
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Int32)">
            <summary>Basic constructor</summary>
            <param name="cipher">the asymmetric cipher to use.</param>
            <param name="digest">the digest to use.</param>
            <param name="saltLen">the length of the salt to use (in bytes).</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Byte[])">
            <summary>Basic constructor</summary>
            <param name="cipher">the asymmetric cipher to use.</param>
            <param name="digest">the digest to use.</param>
            <param name="salt">the fixed salt to be used.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.Update(System.Byte)">
            <summary> update the internal digest with the byte b</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            <summary> update the internal digest with the byte array in</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.Reset">
            <summary> reset the internal state</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.GenerateSignature">
            <summary> Generate a signature for the message we've been loaded with using
            the key we were initialised with.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.VerifySignature(System.Byte[])">
            <summary> return true if the internal state represents the signature described
            in the passed in array.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.ItoOSP(System.Int32,System.Byte[])">
            <summary> int to octet string.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.PssSigner.MaskGeneratorFunction1(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary> mask generator function, as described in Pkcs1v2.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.RsaDigestSigner.#cctor">
            <summary>
            Load oid table.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.RsaDigestSigner.Init(System.Boolean,EnterpriseDT.BouncyCastle.Crypto.ICipherParameters)">
             Initialise the signer for signing or verification.
            
             @param forSigning true if for signing, false otherwise
             @param param necessary parameters.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.RsaDigestSigner.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.RsaDigestSigner.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.RsaDigestSigner.GenerateSignature">
            Generate a signature for the message we've been loaded with using
            the key we were initialised with.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.RsaDigestSigner.VerifySignature(System.Byte[])">
            return true if the internal state represents the signature described
            in the passed in array.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Signers.X931Signer">
            X9.31-1998 - signing using a hash.
            <p>
            The message digest hash, H, is encapsulated to form a byte string as follows
            </p>
            <pre>
            EB = 06 || PS || 0xBA || H || TRAILER
            </pre>
            where PS is a string of bytes all of value 0xBB of length such that |EB|=|n|, and TRAILER is the ISO/IEC 10118 part numberâ€  for the digest. The byte string, EB, is converted to an integer value, the message representative, f.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.X931Signer.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Boolean)">
             Generate a signer with either implicit or explicit trailers for X9.31.
            
             @param cipher base cipher to use for signature creation/verification
             @param digest digest to use.
             @param implicit whether or not the trailer is implicit or gives the hash.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.X931Signer.#ctor(EnterpriseDT.BouncyCastle.Crypto.IAsymmetricBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest)">
             Constructor for a signer with an explicit digest trailer.
            
             @param cipher cipher to use.
             @param digest digest to sign with.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.X931Signer.ClearBlock(System.Byte[])">
            <summary> clear possible sensitive data</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.X931Signer.Update(System.Byte)">
            update the internal digest with the byte b
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.X931Signer.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            update the internal digest with the byte array in
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.X931Signer.Reset">
            reset the internal state
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.X931Signer.GenerateSignature">
            generate a signature for the loaded message using the key we were
            initialised with.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Signers.X931Signer.VerifySignature(System.Byte[])">
            return true if the signature represents a ISO9796-2 signature
            for the passed in message.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsAgreementCredentials.GenerateAgreement(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.AbstractTlsAgreementCredentials.GenerateAgreement(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCipherFactory.CreateCipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.AbstractTlsCipherFactory.CreateCipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext.ExportKeyingMaterial(System.String,System.Byte[],System.Int32)">
             Export keying material according to RFC 5705: "Keying Material Exporters for TLS".
            
             @param asciiLabel    indicates which application will use the exported keys.
             @param context_value allows the application using the exporter to mix its own data with the TLS PRF for
                                  the exporter output.
             @param length        the number of bytes to generate
             @return a pseudorandom bit string of 'length' bytes generated from the master_secret.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext.ResumableSession">
            Used to get the resumable session, if any, used by this connection. Only available after the
            handshake has successfully completed.
            
            @return A {@link TlsSession} representing the resumable session used by this connection, or
                    null if no resumable session available.
            @see TlsPeer#NotifyHandshakeComplete()
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsEncryptionCredentials.DecryptPreMasterSecret(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.AbstractTlsEncryptionCredentials.DecryptPreMasterSecret(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange">
            <summary>
            A generic interface for key exchange implementations in (D)TLS.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.SkipServerCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessServerCredentials(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessServerCertificate(EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.GenerateServerKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.SkipServerKeyExchange">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessServerKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.ValidateCertificateRequest(EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.SkipClientCredentials">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessClientCredentials(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCredentials)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessClientCertificate(EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.GenerateClientKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.ProcessClientKeyExchange(System.IO.Stream)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange.GeneratePremasterSecret">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsPeer.ShouldUseGmtUnixTime">
            <summary>
            draft-mathewson-no-gmtunixtime-00 2. "If existing users of a TLS implementation may rely on
            gmt_unix_time containing the current time, we recommend that implementors MAY provide the
            ability to set gmt_unix_time as an option only, off by default."
            </summary>
            <returns>
            <code>true</code> if the current time should be used in the gmt_unix_time field of
            Random, or <code>false</code> if gmt_unix_time should contain a cryptographically
            random value.
            </returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsPeer.NotifySecureRenegotiation(System.Boolean)">
            <summary>
            Report whether the server supports secure renegotiation
            </summary>
            <remarks>
            The protocol handler automatically processes the relevant extensions
            </remarks>
            <param name="secureRenegotiation">
            A <see cref="T:System.Boolean"/>, true if the server supports secure renegotiation
            </param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsPeer.GetCompression">
            <summary>
            Return an implementation of <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCompression"/> to handle record compression.
            </summary>
            <returns>A <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCompression"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsPeer.GetCipher">
            <summary>
            Return an implementation of <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCipher"/> to use for encryption/decryption.
            </summary>
            <returns>A <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCipher"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertRaised(System.Byte,System.Byte,System.String,System.Exception)">
            <summary>This method will be called when an alert is raised by the protocol.</summary>
            <param name="alertLevel"><see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertLevel"/></param>
            <param name="alertDescription"><see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription"/></param>
            <param name="message">A human-readable message explaining what caused this alert. May be null.</param>
            <param name="cause">The <c>Exception</c> that caused this alert to be raised. May be null.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsPeer.NotifyAlertReceived(System.Byte,System.Byte)">
            <summary>This method will be called when an alert is received from the remote peer.</summary>
            <param name="alertLevel"><see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertLevel"/></param>
            <param name="alertDescription"><see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription"/></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsPeer.NotifyHandshakeComplete">
            <summary>Notifies the peer that the handshake has been successfully completed.</summary>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsSignerCredentials.GenerateCertificateSignature(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.AbstractTlsSignerCredentials.GenerateCertificateSignature(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription">
            <summary>
            RFC 5246 7.2
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.close_notify">
            This message notifies the recipient that the sender will not send any more messages on this
            connection. Note that as of TLS 1.1, failure to properly close a connection no longer
            requires that a session not be resumed. This is a change from TLS 1.0 ("The session becomes
            unresumable if any connection is terminated without proper close_notify messages with level
            equal to warning.") to conform with widespread implementation practice.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.unexpected_message">
            An inappropriate message was received. This alert is always fatal and should never be
            observed in communication between proper implementations.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.bad_record_mac">
            This alert is returned if a record is received with an incorrect MAC. This alert also MUST be
            returned if an alert is sent because a TLSCiphertext decrypted in an invalid way: either it
            wasn't an even multiple of the block length, or its padding values, when checked, weren't
            correct. This message is always fatal and should never be observed in communication between
            proper implementations (except when messages were corrupted in the network).
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.decryption_failed">
            This alert was used in some earlier versions of TLS, and may have permitted certain attacks
            against the CBC mode [CBCATT]. It MUST NOT be sent by compliant implementations.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.record_overflow">
            A TLSCiphertext record was received that had a length more than 2^14+2048 bytes, or a record
            decrypted to a TLSCompressed record with more than 2^14+1024 bytes. This message is always
            fatal and should never be observed in communication between proper implementations (except
            when messages were corrupted in the network).
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.decompression_failure">
            The decompression function received improper input (e.g., data that would expand to excessive
            length). This message is always fatal and should never be observed in communication between
            proper implementations.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.handshake_failure">
            Reception of a handshake_failure alert message indicates that the sender was unable to
            negotiate an acceptable set of security parameters given the options available. This is a
            fatal error.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.no_certificate">
            This alert was used in SSLv3 but not any version of TLS. It MUST NOT be sent by compliant
            implementations.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.bad_certificate">
            A certificate was corrupt, contained signatures that did not verify correctly, etc.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.unsupported_certificate">
            A certificate was of an unsupported type.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.certificate_revoked">
            A certificate was revoked by its signer.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.certificate_expired">
            A certificate has expired or is not currently valid.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.certificate_unknown">
            Some other (unspecified) issue arose in processing the certificate, rendering it
            unacceptable.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.illegal_parameter">
            A field in the handshake was out of range or inconsistent with other fields. This message is
            always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.unknown_ca">
            A valid certificate chain or partial chain was received, but the certificate was not accepted
            because the CA certificate could not be located or couldn't be matched with a known, trusted
            CA. This message is always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.access_denied">
            A valid certificate was received, but when access control was applied, the sender decided not
            to proceed with negotiation. This message is always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.decode_error">
            A message could not be decoded because some field was out of the specified range or the
            length of the message was incorrect. This message is always fatal and should never be
            observed in communication between proper implementations (except when messages were corrupted
            in the network).
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.decrypt_error">
            A handshake cryptographic operation failed, including being unable to correctly verify a
            signature or validate a Finished message. This message is always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.export_restriction">
            This alert was used in some earlier versions of TLS. It MUST NOT be sent by compliant
            implementations.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.protocol_version">
            The protocol version the client has attempted to negotiate is recognized but not supported.
            (For example, old protocol versions might be avoided for security reasons.) This message is
            always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.insufficient_security">
            Returned instead of handshake_failure when a negotiation has failed specifically because the
            server requires ciphers more secure than those supported by the client. This message is
            always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.internal_error">
            An internal error unrelated to the peer or the correctness of the protocol (such as a memory
            allocation failure) makes it impossible to continue. This message is always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.user_canceled">
            This handshake is being canceled for some reason unrelated to a protocol failure. If the user
            cancels an operation after the handshake is complete, just closing the connection by sending
            a close_notify is more appropriate. This alert should be followed by a close_notify. This
            message is generally a warning.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.no_renegotiation">
            Sent by the client in response to a hello request or by the server in response to a client
            hello after initial handshaking. Either of these would normally lead to renegotiation; when
            that is not appropriate, the recipient should respond with this alert. At that point, the
            original requester can decide whether to proceed with the connection. One case where this
            would be appropriate is where a server has spawned a process to satisfy a request; the
            process might receive security parameters (key length, authentication, etc.) at startup, and
            it might be difficult to communicate changes to these parameters after that point. This
            message is always a warning.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.unsupported_extension">
            Sent by clients that receive an extended server hello containing an extension that they did
            not put in the corresponding client hello. This message is always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.certificate_unobtainable">
            This alert is sent by servers who are unable to retrieve a certificate chain from the URL
            supplied by the client (see Section 3.3). This message MAY be fatal - for example if client
            authentication is required by the server for the handshake to continue and the server is
            unable to retrieve the certificate chain, it may send a fatal alert.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.unrecognized_name">
            This alert is sent by servers that receive a server_name extension request, but do not
            recognize the server name. This message MAY be fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.bad_certificate_status_response">
            This alert is sent by clients that receive an invalid certificate status response (see
            Section 3.6). This message is always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.bad_certificate_hash_value">
            This alert is sent by servers when a certificate hash does not match a client provided
            certificate_hash. This message is always fatal.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.unknown_psk_identity">
            If the server does not recognize the PSK identity, it MAY respond with an
            "unknown_psk_identity" alert message.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertDescription.inappropriate_fallback">
            If TLS_FALLBACK_SCSV appears in ClientHello.cipher_suites and the highest protocol version
            supported by the server is higher than the version indicated in ClientHello.client_version,
            the server MUST respond with an inappropriate_fallback alert.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.AlertLevel">
            <summary>
            RFC 5246 7.2
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.BulkCipherAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue">
            <remarks>
            A queue for bytes.
            <p>
            This file could be more optimized.
            </p>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue.DefaultCapacity">
            The initial size for our buffer.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue.NextTwoPow(System.Int32)">
            <returns>The smallest number which can be written as 2^x which is bigger than i.</returns>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue.databuf">
            The buffer where we store our data.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue.skipped">
            How many bytes at the beginning of the buffer are skipped.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue.available">
            How many bytes in the buffer are valid data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue.Read(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>Read data from the buffer.</summary>
            <param name="buf">The buffer where the read data will be copied to.</param>
            <param name="offset">How many bytes to skip at the beginning of buf.</param>
            <param name="len">How many bytes to read at all.</param>
            <param name="skip">How many bytes from our data to skip.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue.AddData(System.Byte[],System.Int32,System.Int32)">
            <summary>Add some data to our buffer.</summary>
            <param name="data">A byte-array to read data from.</param>
            <param name="offset">How many bytes to skip at the beginning of the array.</param>
            <param name="len">How many bytes to read from the array.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue.RemoveData(System.Int32)">
            <summary>Remove some bytes from our data from the beginning.</summary>
            <param name="i">How many bytes to remove.</param>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.ByteQueue.Available">
            <summary>The number of bytes which are available in this buffer.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate">
             Parsing and encoding of a <i>Certificate</i> struct from RFC 4346.
             <p/>
             <pre>
             opaque ASN.1Cert&lt;2^24-1&gt;;
            
             struct {
                 ASN.1Cert certificate_list&lt;0..2^24-1&gt;;
             } Certificate;
             </pre>
            
             @see EnterpriseDT.BouncyCastle.Asn1.X509.X509CertificateStructure
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate.mCertificateList">
            The certificates.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate.GetCertificateList">
            @return an array of {@link org.bouncycastle.asn1.x509.Certificate} representing a certificate
                    chain.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate.Encode(System.IO.Stream)">
             Encode this {@link Certificate} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate.Parse(System.IO.Stream)">
             Parse a {@link Certificate} from a {@link Stream}.
            
             @param input the {@link Stream} to parse from.
             @return a {@link Certificate} object.
             @throws IOException
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate.IsEmpty">
            @return <code>true</code> if this certificate chain contains no certificates, or
                    <code>false</code> otherwise.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest">
             Parsing and encoding of a <i>CertificateRequest</i> struct from RFC 4346.
             <p/>
             <pre>
             struct {
                 ClientCertificateType certificate_types&lt;1..2^8-1&gt;;
                 DistinguishedName certificate_authorities&lt;3..2^16-1&gt;
             } CertificateRequest;
             </pre>
            
             @see ClientCertificateType
             @see X509Name
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest.#ctor(System.Byte[],System.Collections.IList,System.Collections.IList)">
            @param certificateTypes       see {@link ClientCertificateType} for valid constants.
            @param certificateAuthorities an {@link IList} of {@link X509Name}.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest.Encode(System.IO.Stream)">
             Encode this {@link CertificateRequest} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest.Parse(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link CertificateRequest} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateRequest} object.
            @throws IOException
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest.CertificateTypes">
            @return an array of certificate types
            @see {@link ClientCertificateType}
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest.SupportedSignatureAlgorithms">
            @return an {@link IList} of {@link SignatureAndHashAlgorithm} (or null before TLS 1.2).
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest.CertificateAuthorities">
            @return an {@link IList} of {@link X509Name}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateStatus.Encode(System.IO.Stream)">
            Encode this {@link CertificateStatus} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateStatus.Parse(System.IO.Stream)">
            Parse a {@link CertificateStatus} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateStatus} object.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateStatusRequest.Encode(System.IO.Stream)">
            Encode this {@link CertificateStatusRequest} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateStatusRequest.Parse(System.IO.Stream)">
            Parse a {@link CertificateStatusRequest} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateStatusRequest} object.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateUrl.#ctor(System.Byte,System.Collections.IList)">
            @param type
                       see {@link CertChainType} for valid constants.
            @param urlAndHashList
                       a {@link IList} of {@link UrlAndHash}.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateUrl.Encode(System.IO.Stream)">
             Encode this {@link CertificateUrl} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateUrl.parse(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link CertificateUrl} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link CertificateUrl} object.
            @throws IOException
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateUrl.Type">
            @return {@link CertChainType}
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateUrl.UrlAndHashList">
            @return an {@link IList} of {@link UrlAndHash} 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCipher.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.Chacha20Poly1305.#ctor(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.Chacha20Poly1305.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.Chacha20Poly1305.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.Chacha20Poly1305.GetAdditionalData(System.Int64,System.Byte,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CipherSuite">
            <summary>
            RFC 2246 A.5
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CipherType">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CombinedHash">
            A combined hash, which implements md5(m) || sha1(m).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CombinedHash.BlockUpdate(System.Byte[],System.Int32,System.Int32)">
            @see org.bouncycastle.crypto.Digest#update(byte[], int, int)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CombinedHash.DoFinal(System.Byte[],System.Int32)">
            @see org.bouncycastle.crypto.Digest#doFinal(byte[], int)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.CombinedHash.Reset">
            @see org.bouncycastle.crypto.Digest#reset()
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CompressionMethod">
            <summary>
            RFC 2246 6.1
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.ConnectionEnd">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.ContentType">
            RFC 2246 6.2.1
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DatagramTransport.GetReceiveLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DatagramTransport.GetSendLimit">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DatagramTransport.Receive(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DatagramTransport.Send(System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DatagramTransport.Close">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsAgreementCredentials.GenerateAgreement(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateAESCipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateCamelliaCipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateChaCha20Poly1305(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Aes_Ccm(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Aes_Gcm(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateCipher_Camellia_Gcm(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateDesEdeCipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateNullCipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateRC4Cipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateSalsa20Cipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateSeedCipher(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsCipherFactory.CreateHMacDigest(System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsEncryptionCredentials.DecryptPreMasterSecret(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DefaultTlsSignerCredentials.GenerateCertificateSignature(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.DeferredHash">
            Buffers input until the hash algorithm is determined.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DigitallySigned.Encode(System.IO.Stream)">
            Encode this {@link DigitallySigned} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.DigitallySigned.Parse(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link DigitallySigned} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link DigitallySigned} object.
            @throws IOException
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.DigitallySigned.Algorithm">
            @return a {@link SignatureAndHashAlgorithm} (or null before TLS 1.2).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.ECBasisType">
            <summary>RFC 4492 5.4. (Errata ID: 2389)</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.ECCurveType">
            <summary>
            RFC 4492 5.4
            </summary>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.ECCurveType.explicit_prime">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a prime field.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.ECCurveType.explicit_char2">
            Indicates the elliptic curve domain parameters are conveyed verbosely, and the
            underlying finite field is a characteristic-2 field.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Crypto.Tls.ECCurveType.named_curve">
            Indicates that a named curve is used. This option SHOULD be used when applicable.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.ECPointFormat">
            <summary>
            RFC 4492 5.1.2
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.EncryptionAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.ExporterLabel">
            <summary>RFC 5705</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.HashAlgorithm">
            <summary>RFC 5246 7.4.1.4.1</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.HeartbeatExtension.Encode(System.IO.Stream)">
            Encode this {@link HeartbeatExtension} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.HeartbeatExtension.Parse(System.IO.Stream)">
            Parse a {@link HeartbeatExtension} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link HeartbeatExtension} object.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.HeartbeatMessage.Encode(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.IO.Stream)">
            Encode this {@link HeartbeatMessage} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.HeartbeatMessage.Parse(System.IO.Stream)">
            Parse a {@link HeartbeatMessage} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link HeartbeatMessage} object.
            @throws IOException
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.KeyExchangeAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.MacAlgorithm">
            <summary>RFC 2246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.NamedCurve">
            <summary>
            RFC 4492 5.1.1
            The named curves defined here are those specified in SEC 2 [13]. Note that many of
            these curves are also recommended in ANSI X9.62 [7] and FIPS 186-2 [11]. Values 0xFE00
            through 0xFEFF are reserved for private use. Values 0xFF01 and 0xFF02 indicate that the
            client supports arbitrary prime and characteristic-2 curves, respectively (the curve
            parameters must be encoded explicitly in ECParameters).
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.NewSessionTicket.Encode(System.IO.Stream)">
             Encode this {@link NewSessionTicket} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.NewSessionTicket.Parse(System.IO.Stream)">
             Parse a {@link NewSessionTicket} from a {@link Stream}.
            
             @param input the {@link Stream} to parse from.
             @return a {@link NewSessionTicket} object.
             @throws IOException
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.OcspStatusRequest">
            RFC 3546 3.6
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.OcspStatusRequest.#ctor(System.Collections.IList,EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions)">
            @param responderIDList
                       an {@link IList} of {@link ResponderID}, specifying the list of trusted OCSP
                       responders. An empty list has the special meaning that the responders are
                       implicitly known to the server - e.g., by prior arrangement.
            @param requestExtensions
                       OCSP request extensions. A null value means that there are no extensions.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.OcspStatusRequest.Encode(System.IO.Stream)">
            Encode this {@link OcspStatusRequest} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.OcspStatusRequest.Parse(System.IO.Stream)">
            Parse a {@link OcspStatusRequest} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return an {@link OcspStatusRequest} object.
            @throws IOException
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.OcspStatusRequest.ResponderIDList">
            @return an {@link IList} of {@link ResponderID}
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.OcspStatusRequest.RequestExtensions">
            @return OCSP request extensions
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.PrfAlgorithm">
            <summary>RFC 5246</summary>
            <remarks>
            Note that the values here are implementation-specific and arbitrary. It is recommended not to
            depend on the particular values (e.g. serialization).
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ProtocolVersion.Get(System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.RecordStream">
            <summary>An implementation of the TLS 1.0/1.1/1.2 record layer, allowing downgrade to SSLv3.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.RecordStream.SetRestrictReadVersion(System.Boolean)">
            RFC 5246 E.1. "Earlier versions of the TLS specification were not fully clear on what the
            record layer version number (TLSPlaintext.version) should contain when sending ClientHello
            (i.e., before it is known which version of the protocol will be employed). Thus, TLS servers
            compliant with this specification MUST accept any value {03,XX} as the record layer version
            number for ClientHello."
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.SecurityParameters.Entity">
            @return {@link ConnectionEnd}
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.SecurityParameters.CipherSuite">
            @return {@link CipherSuite}
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.SecurityParameters.CompressionAlgorithm">
            @return {@link CompressionMethod}
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.SecurityParameters.PrfAlgorithm">
            @return {@link PRFAlgorithm}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ServerDHParams.Encode(System.IO.Stream)">
            Encode this {@link ServerDHParams} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ServerDHParams.Parse(System.IO.Stream)">
            Parse a {@link ServerDHParams} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link ServerDHParams} object.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ServerName.Encode(System.IO.Stream)">
            Encode this {@link ServerName} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ServerName.Parse(System.IO.Stream)">
            Parse a {@link ServerName} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link ServerName} object.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ServerNameList.#ctor(System.Collections.IList)">
            @param serverNameList an {@link IList} of {@link ServerName}.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ServerNameList.Encode(System.IO.Stream)">
            Encode this {@link ServerNameList} to a {@link Stream}.
            
            @param output
                       the {@link Stream} to encode to.
            @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.ServerNameList.Parse(System.IO.Stream)">
            Parse a {@link ServerNameList} from a {@link Stream}.
            
            @param input
                       the {@link Stream} to parse from.
            @return a {@link ServerNameList} object.
            @throws IOException
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.ServerNameList.ServerNames">
            @return an {@link IList} of {@link ServerName}.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsAuthentication.NotifyServerCertificate(EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate)">
            <summary>
            Called by the protocol handler to report the server certificate.
            </summary>
            <remarks>
            This method is responsible for certificate verification and validation
            </remarks>
            <param name="serverCertificate">The server <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate"/> received</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsAuthentication.GetClientCredentials(EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest)">
            <summary>
            Return client credentials in response to server's certificate request
            </summary>
            <param name="certificateRequest">
            A <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateRequest"/> containing server certificate request details
            </param>
            <returns>
            A <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsCredentials"/> to be used for client authentication
            (or <c>null</c> for no client authentication)
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.SignatureAlgorithm">
            RFC 5246 7.4.1.4.1 (in RFC 2246, there were no specific values assigned)
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm">
            RFC 5246 7.4.1.4.1
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm.#ctor(System.Byte,System.Byte)">
            @param hash      {@link HashAlgorithm}
            @param signature {@link SignatureAlgorithm}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm.Encode(System.IO.Stream)">
             Encode this {@link SignatureAndHashAlgorithm} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm.Parse(System.IO.Stream)">
             Parse a {@link SignatureAndHashAlgorithm} from a {@link Stream}.
            
             @param input the {@link Stream} to parse from.
             @return a {@link SignatureAndHashAlgorithm} object.
             @throws IOException
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm.Hash">
            @return {@link HashAlgorithm}
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.SignatureAndHashAlgorithm.Signature">
            @return {@link SignatureAlgorithm}
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.Ssl3Mac">
            HMAC implementation based on original internet draft for HMAC (RFC 2104)
            
            The difference is that padding is concatentated versus XORed with the key
            
            H(K + opad, H(K + ipad, text))
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.Ssl3Mac.#ctor(EnterpriseDT.BouncyCastle.Crypto.IDigest)">
            Base constructor for one of the standard digest algorithms that the byteLength of
            the algorithm is know for. Behaviour is undefined for digests other than MD5 or SHA1.
            
            @param digest the digest.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.Ssl3Mac.Reset">
            Reset the mac generator.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.SupplementalDataType">
            <summary>RFC 4680</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsAeadCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher,EnterpriseDT.BouncyCastle.Crypto.Modes.IAeadBlockCipher,System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsAeadCipher.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsAeadCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsAeadCipher.GetAdditionalData(System.Int64,System.Byte,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsBlockCipher">
            <summary>
            A generic TLS 1.0-1.2 / SSLv3 block cipher. This can be used for AES or 3DES for example.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsBlockCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IBlockCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsBlockCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.Init(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClientContext)">
            <summary>
            Called at the start of a new TLS session, before any other methods.
            </summary>
            <param name="context">
            A <see cref="!:TlsProtocolHandler"/>
            </param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetSessionToResume">
            <summary>Return the session this client wants to resume, if any.</summary>
            <remarks>Note that the peer's certificate chain for the session (if any) may need to be periodically revalidated.</remarks>
            <returns>
            A <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsSession"/> representing the resumable session to be used for this connection,
            or null to use a new session.
            </returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites">
            <summary>
            Get the list of cipher suites that this client supports.
            </summary>
            <returns>
            An array of <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CipherSuite"/> values, each specifying a supported cipher suite.
            </returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods">
            <summary>
            Get the list of compression methods that this client supports.
            </summary>
            <returns>
            An array of <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CompressionMethod"/> values, each specifying a supported compression method.
            </returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions">
            <summary>
            Get the (optional) table of client extensions to be included in (extended) client hello.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> (Int32 -&gt; byte[]). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.NotifyServerVersion(EnterpriseDT.BouncyCastle.Crypto.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.NotifySessionID(System.Byte[])">
            <summary>
            Notifies the client of the session_id sent in the ServerHello.
            </summary>
            <param name="sessionID">An array of <see cref="T:System.Byte"/></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCipherSuite(System.Int32)">
            <summary>
            Report the cipher suite that was selected by the server.
            </summary>
            <remarks>
            The protocol handler validates this value against the offered cipher suites
            <seealso cref="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetCipherSuites"/>
            </remarks>
            <param name="selectedCipherSuite">
            A <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CipherSuite"/>
            </param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.NotifySelectedCompressionMethod(System.Byte)">
            <summary>
            Report the compression method that was selected by the server.
            </summary>
            <remarks>
            The protocol handler validates this value against the offered compression methods
            <seealso cref="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetCompressionMethods"/>
            </remarks>
            <param name="selectedCompressionMethod">
            A <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CompressionMethod"/>
            </param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerExtensions(System.Collections.IDictionary)">
            <summary>
            Report the extensions from an extended server hello.
            </summary>
            <remarks>
            Will only be called if we returned a non-null result from <see cref="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetClientExtensions"/>.
            </remarks>
            <param name="serverExtensions">
            A <see cref="T:System.Collections.IDictionary"/>  (Int32 -&gt; byte[])
            </param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.ProcessServerSupplementalData(System.Collections.IList)">
            <param name="serverSupplementalData">A <see cref="T:System.Collections.IList">list</see> of <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.SupplementalDataEntry"/></param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetKeyExchange">
            <summary>
            Return an implementation of <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange"/> to negotiate the key exchange
            part of the protocol.
            </summary>
            <returns>
            A <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsKeyExchange"/>
            </returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetAuthentication">
            <summary>
            Return an implementation of <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsAuthentication"/> to handle authentication
            part of the protocol.
            </summary>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.GetClientSupplementalData">
            <returns>A <see cref="T:System.Collections.IList">list</see> of <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.SupplementalDataEntry"/></returns>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.NotifyNewSessionTicket(EnterpriseDT.BouncyCastle.Crypto.Tls.NewSessionTicket)">
            <summary>RFC 5077 3.3. NewSessionTicket Handshake Message</summary>
            <remarks>
            This method will be called (only) when a NewSessionTicket handshake message is received. The
            ticket is opaque to the client and clients MUST NOT examine the ticket under the assumption
            that it complies with e.g. <i>RFC 5077 4. Recommended Ticket Construction</i>.
            </remarks>
            <param name="newSessionTicket">The <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.NewSessionTicket">ticket</see></param>
            <exception cref="T:System.IO.IOException"/>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient.ClientHelloRecordLayerVersion">
            <summary>
            Return the <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.ProtocolVersion"/> to use for the <c>TLSPlaintext.version</c> field prior to
            receiving the server version. NOTE: This method is <b>not</b> called for DTLS.
            </summary>
            <remarks>
            See RFC 5246 E.1.: "TLS clients that wish to negotiate with older servers MAY send any value
            {03,XX} as the record layer version number. Typical values would be {03,00}, the lowest
            version number supported by the client, and the value of ClientHello.client_version. No
            single value will guarantee interoperability with all old servers, but this is a complex
            topic beyond the scope of this document."
            </remarks>
            <returns>The <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.ProtocolVersion"/> to use.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.ProcessChangeCipherSpec(System.Byte[],System.Int32,System.Int32)">
             This method is called, when a change cipher spec message is received.
            
             @throws IOException If the message has an invalid content or the handshake is not in the correct
             state.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.ReadApplicationData(System.Byte[],System.Int32,System.Int32)">
             Read data from the network. The method will return immediately, if there is still some data
             left in the buffer, or block until some application data has been read from the network.
            
             @param buf    The buffer where the data will be copied to.
             @param offset The position where the data will be placed in the buffer.
             @param len    The maximum number of bytes to read.
             @return The number of bytes read.
             @throws IOException If something goes wrong during reading data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.WriteData(System.Byte[],System.Int32,System.Int32)">
             Send some application data to the remote system.
             <p/>
             The method will handle fragmentation internally.
            
             @param buf    The buffer with the data.
             @param offset The position in the buffer where the data is placed.
             @param len    The length of the data.
             @throws IOException If something goes wrong during sending.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.OfferInput(System.Byte[])">
            Offer input from an arbitrary source. Only allowed in non-blocking mode.<br/>
            <br/>
            After this method returns, the input buffer is "owned" by this object. Other code
            must not attempt to do anything with it.<br/>
            <br/>
            This method will decrypt and process all records that are fully available.
            If only part of a record is available, the buffer will be retained until the
            remainder of the record is offered.<br/>
            <br/>
            If any records containing application data were processed, the decrypted data
            can be obtained using {@link #readInput(byte[], int, int)}. If any records
            containing protocol data were processed, a response may have been generated.
            You should always check to see if there is any available output after calling
            this method by calling {@link #getAvailableOutputBytes()}.
            @param input The input buffer to offer
            @throws IOException If an error occurs while decrypting or processing a record
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.GetAvailableInputBytes">
            Gets the amount of received application data. A call to {@link #readInput(byte[], int, int)}
            is guaranteed to be able to return at least this much data.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @return The number of bytes of available application data
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.ReadInput(System.Byte[],System.Int32,System.Int32)">
            Retrieves received application data. Use {@link #getAvailableInputBytes()} to check
            how much application data is currently available. This method functions similarly to
            {@link InputStream#read(byte[], int, int)}, except that it never blocks. If no data
            is available, nothing will be copied and zero will be returned.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @param buffer The buffer to hold the application data
            @param offset The start offset in the buffer at which the data is written
            @param length The maximum number of bytes to read
            @return The total number of bytes copied to the buffer. May be less than the
                     length specified if the length was greater than the amount of available data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.OfferOutput(System.Byte[],System.Int32,System.Int32)">
            Offer output from an arbitrary source. Only allowed in non-blocking mode.<br/>
            <br/>
            After this method returns, the specified section of the buffer will have been
            processed. Use {@link #readOutput(byte[], int, int)} to get the bytes to
            transmit to the other peer.<br/>
            <br/>
            This method must not be called until after the handshake is complete! Attempting
            to call it before the handshake is complete will result in an exception.
            @param buffer The buffer containing application data to encrypt
            @param offset The offset at which to begin reading data
            @param length The number of bytes of data to read
            @throws IOException If an error occurs encrypting the data, or the handshake is not complete
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.GetAvailableOutputBytes">
            Gets the amount of encrypted data available to be sent. A call to
            {@link #readOutput(byte[], int, int)} is guaranteed to be able to return at
            least this much data.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @return The number of bytes of available encrypted data
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.ReadOutput(System.Byte[],System.Int32,System.Int32)">
            Retrieves encrypted data to be sent. Use {@link #getAvailableOutputBytes()} to check
            how much encrypted data is currently available. This method functions similarly to
            {@link InputStream#read(byte[], int, int)}, except that it never blocks. If no data
            is available, nothing will be copied and zero will be returned.<br/>
            <br/>
            Only allowed in non-blocking mode.
            @param buffer The buffer to hold the encrypted data
            @param offset The start offset in the buffer at which the data is written
            @param length The maximum number of bytes to read
            @return The total number of bytes copied to the buffer. May be less than the
                     length specified if the length was greater than the amount of available data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.FailWithError(System.Byte,System.Byte,System.String,System.Exception)">
            Terminate this connection with an alert. Can be used for normal closure too.
            
            @param alertLevel
                       See {@link AlertLevel} for values.
            @param alertDescription
                       See {@link AlertDescription} for values.
            @throws IOException
                        If alert was fatal.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.Close">
             Closes this connection.
            
             @throws IOException If something goes wrong during closing.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.AssertEmpty(System.IO.MemoryStream)">
             Make sure the InputStream 'buf' now empty. Fail otherwise.
            
             @param buf The InputStream to check.
             @throws IOException If 'buf' is not empty.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.GetCurrentPrfHash(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,EnterpriseDT.BouncyCastle.Crypto.Tls.TlsHandshakeHash,System.Byte[])">
            'sender' only relevant to SSLv3
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsProtocol.Stream">
            <summary>The secure bidirectional stream for this connection</summary>
            <remarks>Only allowed in blocking mode.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClientProtocol.#ctor(System.IO.Stream,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            Constructor for blocking mode.
            @param stream The bi-directional stream of data to/from the server
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClientProtocol.#ctor(System.IO.Stream,System.IO.Stream,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            Constructor for blocking mode.
            @param input The stream of data from the server
            @param output The stream of data to the server
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClientProtocol.#ctor(EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            Constructor for non-blocking mode.<br/>
            <br/>
            When data is received, use {@link #offerInput(java.nio.ByteBuffer)} to
            provide the received ciphertext, then use
            {@link #readInput(byte[], int, int)} to read the corresponding cleartext.<br/>
            <br/>
            Similarly, when data needs to be sent, use
            {@link #offerOutput(byte[], int, int)} to provide the cleartext, then use
            {@link #readOutput(byte[], int, int)} to get the corresponding
            ciphertext.
            
            @param secureRandom
                       Random number generator for various cryptographic functions
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClientProtocol.Connect(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsClient)">
             Initiates a TLS handshake in the role of client.<br/>
             <br/>
             In blocking mode, this will not return until the handshake is complete.
             In non-blocking mode, use {@link TlsPeer#NotifyHandshakeComplete()} to
             receive a callback when the handshake is complete.
            
             @param tlsClient The {@link TlsClient} to use for the handshake.
             @throws IOException If in blocking mode and handshake was not successful.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsDHKeyExchange">
            <summary>(D)TLS DH key exchange.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsECDheKeyExchange">
            <summary>(D)TLS ECDHE key exchange (see RFC 4492).</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsECDHKeyExchange">
            <summary>(D)TLS ECDH key exchange (see RFC 4492).</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.AddHeartbeatExtension(System.Collections.IDictionary,EnterpriseDT.BouncyCastle.Crypto.Tls.HeartbeatExtension)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.AddMaxFragmentLengthExtension(System.Collections.IDictionary,System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.AddServerNameExtension(System.Collections.IDictionary,EnterpriseDT.BouncyCastle.Crypto.Tls.ServerNameList)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.AddStatusRequestExtension(System.Collections.IDictionary,EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateStatusRequest)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.GetHeartbeatExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.GetMaxFragmentLengthExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.GetServerNameExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.GetStatusRequestExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.HasEncryptThenMacExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.HasExtendedMasterSecretExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.HasTruncatedHMacExtension(System.Collections.IDictionary)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.CreateHeartbeatExtension(EnterpriseDT.BouncyCastle.Crypto.Tls.HeartbeatExtension)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.CreateMaxFragmentLengthExtension(System.Byte)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.CreateServerNameExtension(EnterpriseDT.BouncyCastle.Crypto.Tls.ServerNameList)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.CreateStatusRequestExtension(EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateStatusRequest)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.ReadEmptyExtensionData(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.ReadEncryptThenMacExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.ReadExtendedMasterSecretExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.ReadHeartbeatExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.ReadMaxFragmentLengthExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.ReadServerNameExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.ReadStatusRequestExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsExtensionsUtilities.ReadTruncatedHMacExtension(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsMac">
            <summary>
            A generic TLS MAC implementation, acting as an HMAC based on some underlying Digest.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsMac.#ctor(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Byte[],System.Int32,System.Int32)">
             Generate a new instance of an TlsMac.
            
             @param context the TLS client context
             @param digest  The digest to use.
             @param key     A byte-array where the key for this MAC is located.
             @param keyOff  The number of bytes to skip, before the key starts in the buffer.
             @param keyLen  The length of the key.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsMac.CalculateMac(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
             Calculate the MAC for some given data.
            
             @param type    The message type of the message.
             @param message A byte-buffer containing the message.
             @param offset  The number of bytes to skip, before the message starts.
             @param length  The length of the message.
             @return A new byte-buffer containing the MAC value.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsMac.MacSecret">
            @return the MAC write secret
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsMac.Size">
            @return The output length of this MAC.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsNullCipher">
            <summary>
            A NULL CipherSuite, with optional MAC.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsNullCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Crypto.IDigest)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsNullCipher.EncodePlaintext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsNullCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsPskKeyExchange">
            <summary>(D)TLS PSK key exchange (RFC 4279).</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsRsaKeyExchange">
            <summary>(D)TLS and SSLv3 RSA key exchange.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsRsaUtilities.GenerateEncryptedPreMasterSecret(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,EnterpriseDT.BouncyCastle.Crypto.Parameters.RsaKeyParameters,System.IO.Stream)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.NotifyClientVersion(EnterpriseDT.BouncyCastle.Crypto.Tls.ProtocolVersion)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.NotifyFallback(System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.NotifyOfferedCipherSuites(System.Int32[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.NotifyOfferedCompressionMethods(System.Byte[])">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.ProcessClientExtensions(System.Collections.IDictionary)">
            <param name="clientExtensions">A <see cref="T:System.Collections.IDictionary"/> (Int32 -&gt; byte[]). Will never be null.</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetServerVersion">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetSelectedCipherSuite">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetSelectedCompressionMethod">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetServerExtensions">
            <summary>
            Get the (optional) table of server extensions to be included in (extended) server hello.
            </summary>
            <returns>
            A <see cref="T:System.Collections.IDictionary"/> (Int32 -&gt; byte[]). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetServerSupplementalData">
            <returns>
            A <see cref="T:System.Collections.IList"/> (<see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.SupplementalDataEntry"/>). May be null.
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetCredentials">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetCertificateStatus">
            <remarks>
            This method will be called (only) if the server included an extension of type
            "status_request" with empty "extension_data" in the extended server hello. See <i>RFC 3546
            3.6. Certificate Status Request</i>. If a non-null <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateStatus"/> is returned, it
            is sent to the client as a handshake message of type "certificate_status".
            </remarks>
            <returns>A <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.CertificateStatus"/> to be sent to the client (or null for none).</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetKeyExchange">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetCertificateRequest">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.ProcessClientSupplementalData(System.Collections.IList)">
            <param name="clientSupplementalData"><see cref="T:System.Collections.IList"/> (<see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.SupplementalDataEntry"/>)</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.NotifyClientCertificate(EnterpriseDT.BouncyCastle.Crypto.Tls.Certificate)">
            <summary>
            Called by the protocol handler to report the client certificate, only if <c>GetCertificateRequest</c>
            returned non-null.
            </summary>
            <remarks>Note: this method is responsible for certificate verification and validation.</remarks>
            <param name="clientCertificate">the effective client certificate (may be an empty chain).</param>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer.GetNewSessionTicket">
            <summary>RFC 5077 3.3. NewSessionTicket Handshake Message.</summary>
            <remarks>
            This method will be called (only) if a NewSessionTicket extension was sent by the server. See
            <i>RFC 5077 4. Recommended Ticket Construction</i> for recommended format and protection.
            </remarks>
            <returns>The <see cref="T:EnterpriseDT.BouncyCastle.Crypto.Tls.NewSessionTicket">ticket</see>)</returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServerProtocol.#ctor(System.IO.Stream,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            Constructor for blocking mode.
            @param stream The bi-directional stream of data to/from the client
            @param output The stream of data to the client
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServerProtocol.#ctor(System.IO.Stream,System.IO.Stream,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            Constructor for blocking mode.
            @param input The stream of data from the client
            @param output The stream of data to the client
            @param secureRandom Random number generator for various cryptographic functions
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServerProtocol.#ctor(EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            Constructor for non-blocking mode.<br/>
            <br/>
            When data is received, use {@link #offerInput(java.nio.ByteBuffer)} to
            provide the received ciphertext, then use
            {@link #readInput(byte[], int, int)} to read the corresponding cleartext.<br/>
            <br/>
            Similarly, when data needs to be sent, use
            {@link #offerOutput(byte[], int, int)} to provide the cleartext, then use
            {@link #readOutput(byte[], int, int)} to get the corresponding
            ciphertext.
            
            @param secureRandom
                       Random number generator for various cryptographic functions
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServerProtocol.Accept(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsServer)">
             Receives a TLS handshake in the role of server.<br/>
             <br/>
             In blocking mode, this will not return until the handshake is complete.
             In non-blocking mode, use {@link TlsPeer#notifyHandshakeComplete()} to
             receive a callback when the handshake is complete.
            
             @param tlsServer
             @throws IOException If in blocking mode and handshake was not successful.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsSRTPUtils">
            RFC 5764 DTLS Extension to Establish Keys for SRTP.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsStreamCipher.#ctor(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,EnterpriseDT.BouncyCastle.Crypto.IStreamCipher,EnterpriseDT.BouncyCastle.Crypto.IStreamCipher,EnterpriseDT.BouncyCastle.Crypto.IDigest,EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Int32,System.Boolean)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsStreamCipher.DecodeCiphertext(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsStreamCipher.CheckMac(System.Int64,System.Byte,System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsUtilities">
            <remarks>Some helper functions for MicroTLS.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsUtilities.AddSignatureAlgorithmsExtension(System.Collections.IDictionary,System.Collections.IList)">
             Add a 'signature_algorithms' extension to existing extensions.
            
             @param extensions                   A {@link Hashtable} to add the extension to.
             @param supportedSignatureAlgorithms {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}.
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsUtilities.GetSignatureAlgorithmsExtension(System.Collections.IDictionary)">
             Get a 'signature_algorithms' extension from extensions.
            
             @param extensions A {@link Hashtable} to get the extension from, if it is present.
             @return A {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}, or null.
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsUtilities.CreateSignatureAlgorithmsExtension(System.Collections.IList)">
             Create a 'signature_algorithms' extension value.
            
             @param supportedSignatureAlgorithms A {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}.
             @return A byte array suitable for use as an extension value.
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.TlsUtilities.ReadSignatureAlgorithmsExtension(System.Byte[])">
             Read 'signature_algorithms' extension data.
            
             @param extensionData The extension data.
             @return A {@link Vector} containing at least 1 {@link SignatureAndHashAlgorithm}.
             @throws IOException
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.UrlAndHash">
            RFC 6066 5.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.UrlAndHash.Encode(System.IO.Stream)">
             Encode this {@link UrlAndHash} to a {@link Stream}.
            
             @param output the {@link Stream} to encode to.
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.UrlAndHash.Parse(EnterpriseDT.BouncyCastle.Crypto.Tls.TlsContext,System.IO.Stream)">
            Parse a {@link UrlAndHash} from a {@link Stream}.
            
            @param context
                       the {@link TlsContext} of the current connection.
            @param input
                       the {@link Stream} to parse from.
            @return a {@link UrlAndHash} object.
            @throws IOException
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.UserMappingType">
            <remarks>RFC 4681</remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Crypto.Tls.UseSrtpData">
            RFC 5764 4.1.1
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Crypto.Tls.UseSrtpData.#ctor(System.Int32[],System.Byte[])">
            @param protectionProfiles see {@link SrtpProtectionProfile} for valid constants.
            @param mki                valid lengths from 0 to 255.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.UseSrtpData.ProtectionProfiles">
            @return see {@link SrtpProtectionProfile} for valid constants.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Crypto.Tls.UseSrtpData.Mki">
            @return valid lengths from 0 to 255.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder">
            <remarks>
            The Holder object.
            <pre>
            Holder ::= SEQUENCE {
            	baseCertificateID   [0] IssuerSerial OPTIONAL,
            		-- the issuer and serial number of
            		-- the holder's Public Key Certificate
            	entityName          [1] GeneralNames OPTIONAL,
            		-- the name of the claimant or role
            	objectDigestInfo    [2] ObjectDigestInfo OPTIONAL
            		-- used to directly authenticate the holder,
            		-- for example, an executable
            }
            </pre>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder.#ctor(System.Int32,System.String,System.String,System.Byte[])">
             Constructs a holder for v2 attribute certificates with a hash value for
             some type of object.
             <p>
             <code>digestedObjectType</code> can be one of the following:
             <ul>
             <li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li>
             <li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li>
             <li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li>
             </ul>
             </p>
             <p>This cannot be used if a v1 attribute certificate is used.</p>
            
             @param digestedObjectType The digest object type.
             @param digestAlgorithm The algorithm identifier for the hash.
             @param otherObjectTypeID The object type ID if
                        <code>digestedObjectType</code> is
                        <code>otherObjectDigest</code>.
             @param objectDigest The hash value.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder.GetObjectDigest">
             Returns the hash if an object digest info is used.
            
             @return The hash or <code>null</code> if no object digest info is set.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder.GetEntityNames">
             Return any principal objects inside the attribute certificate holder entity names field.
            
             @return an array of IPrincipal objects (usually X509Name), null if no entity names field is set.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder.GetIssuer">
             Return the principals associated with the issuer attached to this holder
            
             @return an array of principals, null if no BaseCertificateID is set.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder.DigestedObjectType">
             Returns the digest object type if an object digest info is used.
             <p>
             <ul>
             <li>0 - publicKey - A hash of the public key of the holder must be
             passed.</li>
             <li>1 - publicKeyCert - A hash of the public key certificate of the
             holder must be passed.</li>
             <li>2 - otherObjectDigest - A hash of some other object type must be
             passed. <code>otherObjectTypeID</code> must not be empty.</li>
             </ul>
             </p>
            
             @return The digest object type or -1 if no object digest info is set.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder.DigestAlgorithm">
             Returns the other object type ID if an object digest info is used.
            
             @return The other object type ID or <code>null</code> if no object
                     digest info is set.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder.OtherObjectTypeID">
             Returns the digest algorithm ID if an object digest info is used.
            
             @return The digest algorithm ID or <code>null</code> if no object
                     digest info is set.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder.SerialNumber">
             Return the serial number associated with the issuer attached to this holder.
            
             @return the certificate serial number, null if no BaseCertificateID is set.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.AttributeCertificateIssuer">
            Carrying class for an attribute certificate issuer.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.AttributeCertificateIssuer.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.AttCertIssuer)">
             Set the issuer directly with the ASN.1 structure.
            
             @param issuer The issuer
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.AttributeCertificateIssuer.GetPrincipals">
            <summary>Return any principal objects inside the attribute certificate issuer object.</summary>
            <returns>An array of IPrincipal objects (usually X509Principal).</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate">
            <remarks>Interface for an X.509 Attribute Certificate.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.IX509Extension.GetCriticalExtensionOids">
            <summary>
            Get all critical extension values, by oid
            </summary>
            <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.IX509Extension.GetNonCriticalExtensionOids">
            <summary>
            Get all non-critical extension values, by oid
            </summary>
            <returns>IDictionary with string (OID) keys and Asn1OctetString values</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate.GetAttributes">
            <summary>Return the attributes contained in the attribute block in the certificate.</summary>
            <returns>An array of attributes.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate.GetAttributes(System.String)">
            <summary>Return the attributes with the same type as the passed in oid.</summary>
            <param name="oid">The object identifier we wish to match.</param>
            <returns>An array of matched attributes, null if there is no match.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate.GetEncoded">
            <summary>Return an ASN.1 encoded byte array representing the attribute certificate.</summary>
            <returns>An ASN.1 encoded byte array.</returns>
            <exception cref="T:System.IO.IOException">If the certificate cannot be encoded.</exception>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate.Version">
            <summary>The version number for the certificate.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate.SerialNumber">
            <summary>The serial number for the certificate.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate.NotBefore">
            <summary>The UTC DateTime before which the certificate is not valid.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate.NotAfter">
            <summary>The UTC DateTime after which the certificate is not valid.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate.Holder">
            <summary>The holder of the certificate.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.IX509AttributeCertificate.Issuer">
            <summary>The issuer details for the certificate.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.PrincipalUtilities">
            <remarks>
            A utility class that will extract X509Principal objects from X.509 certificates.
            <p>
            Use this in preference to trying to recreate a principal from a string, not all
            DNs are what they should be, so it's best to leave them encoded where they
            can be.</p>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.PrincipalUtilities.GetIssuerX509Principal(EnterpriseDT.BouncyCastle.X509.X509Certificate)">
            <summary>Return the issuer of the given cert as an X509Principal.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.PrincipalUtilities.GetSubjectX509Principal(EnterpriseDT.BouncyCastle.X509.X509Certificate)">
            <summary>Return the subject of the given cert as an X509Principal.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.PrincipalUtilities.GetIssuerX509Principal(EnterpriseDT.BouncyCastle.X509.X509Crl)">
            <summary>Return the issuer of the given CRL as an X509Principal.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.SubjectPublicKeyInfoFactory">
            <summary>
            A factory to produce Public Key Info Objects.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.SubjectPublicKeyInfoFactory.CreateSubjectPublicKeyInfo(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Create a Subject Public Key Info object for a given public key.
            </summary>
            <param name="key">One of ElGammalPublicKeyParameters, DSAPublicKeyParameter, DHPublicKeyParameters, RsaKeyParameters or ECPublicKeyParameters</param>
            <returns>A subject public key info object.</returns>
            <exception cref="T:System.Exception">Throw exception if object provided is not one of the above.</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509AttrCertParser.ReadAttrCert(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509AttrCertParser.ReadAttrCerts(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509AttrCertParser.ReadAttrCert(System.IO.Stream)">
            Generates a certificate object and initializes it with the data
            read from the input stream inStream.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509AttrCertParser.ReadAttrCerts(System.IO.Stream)">
            Returns a (possibly empty) collection view of the certificates
            read from the given input stream inStream.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509Attribute">
            Class for carrying the values in an X.509 Attribute.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Attribute.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            @param at an object representing an attribute.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Attribute.#ctor(System.String,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
             Create an X.509 Attribute with the type given by the passed in oid and
             the value represented by an ASN.1 Set containing value.
            
             @param oid type of the attribute
             @param value value object to go into the atribute's value set.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Attribute.#ctor(System.String,EnterpriseDT.BouncyCastle.Asn1.Asn1EncodableVector)">
             Create an X.59 Attribute with the type given by the passed in oid and the
             value represented by an ASN.1 Set containing the objects in value.
            
             @param oid type of the attribute
             @param value vector of values to go in the attribute's value set.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509Certificate">
            <summary>
            An Object representing an X509 Certificate.
            Has static methods for loading Certificates encoded in many forms that return X509Certificate Objects.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509ExtensionBase.GetNonCriticalExtensionOids">
            <summary>
            Get non critical extensions.
            </summary>
            <returns>A set of non critical extension oids.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509ExtensionBase.GetCriticalExtensionOids">
            <summary>
            Get any critical extensions.
            </summary>
            <returns>A sorted list of critical entension.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509ExtensionBase.GetExtensionValue(System.String)">
            <summary>
            Get the value of a given extension.
            </summary>
            <param name="oid">The object ID of the extension. </param>
            <returns>An Asn1OctetString object if that extension is found or null if not.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.IsValid(System.DateTime)">
            <summary>
            Return true if the nominated time is within the start and end times nominated on the certificate.
            </summary>
            <param name="time">The time to test validity against.</param>
            <returns>True if certificate is valid for nominated time.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.CheckValidity">
            <summary>
            Checks if the current date is within certificate's validity period.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.CheckValidity(System.DateTime)">
            <summary>
            Checks if the given date is within certificate's validity period.
            </summary>
            <exception cref="T:EnterpriseDT.BouncyCastle.Security.Certificates.CertificateExpiredException">if the certificate is expired by given date</exception>
            <exception cref="T:EnterpriseDT.BouncyCastle.Security.Certificates.CertificateNotYetValidException">if the certificate is not yet valid on given date</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.GetTbsCertificate">
            <summary>
            Return the Der encoded TbsCertificate data.
            This is the certificate component less the signature.
            To Get the whole certificate call the GetEncoded() member.
            </summary>
            <returns>A byte array containing the Der encoded Certificate component.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.GetSignature">
            <summary>
            The signature.
            </summary>
            <returns>A byte array containg the signature of the certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.GetSigAlgParams">
            <summary>
            Get the signature algorithms parameters. (EG DSA Parameters)
            </summary>
            <returns>A byte array containing the Der encoded version of the parameters or null if there are none.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.GetKeyUsage">
            <summary>
            Get a key usage guidlines.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.GetPublicKey">
            <summary>
            Get the public key of the subject of the certificate.
            </summary>
            <returns>The public key parameters.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.GetEncoded">
            <summary>
            Return a Der encoded version of this certificate.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.Verify(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Verify the certificate's signature using the nominated public key.
            </summary>
            <param name="key">An appropriate public key parameter object, RsaPublicKeyParameters, DsaPublicKeyParameters or ECDsaPublicKeyParameters</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If key submitted is not of the above nominated types.</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Certificate.Verify(EnterpriseDT.BouncyCastle.Crypto.IVerifierFactoryProvider)">
            <summary>
            Verify the certificate's signature using a verifier created using the passed in verifier provider.
            </summary>
            <param name="verifierProvider">An appropriate provider for verifying the certificate's signature.</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If verifier provider is not appropriate or the certificate algorithm is invalid.</exception>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.IsValidNow">
            <summary>
            Return true if the current time is within the start and end times nominated on the certificate.
            </summary>
            <returns>true id certificate is valid for the current time.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.Version">
            <summary>
            Return the certificate's version.
            </summary>
            <returns>An integer whose value Equals the version of the cerficate.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.SerialNumber">
            <summary>
            Return a <see cref="T:EnterpriseDT.BouncyCastle.Math.BigInteger">BigInteger</see> containing the serial number.
            </summary>
            <returns>The Serial number.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.IssuerDN">
            <summary>
            Get the Issuer Distinguished Name. (Who signed the certificate.)
            </summary>
            <returns>And X509Object containing name and value pairs.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.SubjectDN">
            <summary>
            Get the subject of this certificate.
            </summary>
            <returns>An X509Name object containing name and value pairs.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.NotBefore">
            <summary>
            The time that this certificate is valid from.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.NotAfter">
            <summary>
            The time that this certificate is valid up to.
            </summary>
            <returns>A DateTime object representing that time in the local time zone.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.SigAlgName">
            <summary>
            A meaningful version of the Signature Algorithm. (EG SHA1WITHRSA)
            </summary>
            <returns>A sting representing the signature algorithm.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.SigAlgOid">
            <summary>
            Get the Signature Algorithms Object ID.
            </summary>
            <returns>A string containg a '.' separated object id.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.IssuerUniqueID">
            <summary>
            Get the issuers UID.
            </summary>
            <returns>A DerBitString.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509Certificate.SubjectUniqueID">
            <summary>
            Get the subjects UID.
            </summary>
            <returns>A DerBitString.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509CertificatePair">
            <remarks>
            This class contains a cross certificate pair. Cross certificates pairs may
            contain two cross signed certificates from two CAs. A certificate from the
            other CA to this CA is contained in the forward certificate, the certificate
            from this CA to the other CA is contained in the reverse certificate.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CertificatePair.#ctor(EnterpriseDT.BouncyCastle.X509.X509Certificate,EnterpriseDT.BouncyCastle.X509.X509Certificate)">
            <summary>Constructor</summary>
            <param name="forward">Certificate from the other CA to this CA.</param>
            <param name="reverse">Certificate from this CA to the other CA.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CertificatePair.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.CertificatePair)">
            <summary>Constructor from a ASN.1 CertificatePair structure.</summary>
            <param name="pair">The <c>CertificatePair</c> ASN.1 object.</param>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509CertificatePair.Forward">
            <summary>Returns the certificate from the other CA to this CA.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509CertificatePair.Reverse">
            <summary>Returns the certificate from this CA to the other CA.</summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509CertificateParser">
            class for dealing with X509 certificates.
            <p>
            At the moment this will deal with "-----BEGIN CERTIFICATE-----" to "-----END CERTIFICATE-----"
            base 64 encoded certs, as well as the BER binaries of certificates and some classes of PKCS#7
            objects.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CertificateParser.ReadCertificate(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CertificateParser.ReadCertificates(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CertificateParser.ReadCertificate(System.IO.Stream)">
            Generates a certificate object and initializes it with the data
            read from the input stream inStream.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CertificateParser.ReadCertificates(System.IO.Stream)">
            Returns a (possibly empty) collection view of the certificates
            read from the given input stream inStream.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CertPairParser.ReadCertPair(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CertPairParser.ReadCertPairs(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509Crl">
             The following extensions are listed in RFC 2459 as relevant to CRLs
            
             Authority Key Identifier
             Issuer Alternative Name
             CRL Number
             Delta CRL Indicator (critical)
             Issuing Distribution Point (critical)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Crl.Verify(EnterpriseDT.BouncyCastle.Crypto.IVerifierFactoryProvider)">
            <summary>
            Verify the CRL's signature using a verifier created using the passed in verifier provider.
            </summary>
            <param name="verifierProvider">An appropriate provider for verifying the CRL's signature.</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If verifier provider is not appropriate or the CRL algorithm is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Crl.ToString">
             Returns a string representation of this CRL.
            
             @return a string representation of this CRL.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509Crl.IsRevoked(EnterpriseDT.BouncyCastle.X509.X509Certificate)">
             Checks whether the given certificate is on this CRL.
            
             @param cert the certificate to check for.
             @return true if the given certificate is on this CRL,
             false otherwise.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509CrlEntry">
             The following extensions are listed in RFC 2459 as relevant to CRL Entries
            
             ReasonCode Hode Instruction Code Invalidity Date Certificate Issuer
             (critical)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CrlEntry.#ctor(EnterpriseDT.BouncyCastle.Asn1.X509.CrlEntry,System.Boolean,EnterpriseDT.BouncyCastle.Asn1.X509.X509Name)">
             Constructor for CRLEntries of indirect CRLs. If <code>isIndirect</code>
             is <code>false</code> {@link #getCertificateIssuer()} will always
             return <code>null</code>, <code>previousCertificateIssuer</code> is
             ignored. If this <code>isIndirect</code> is specified and this CrlEntry
             has no certificate issuer CRL entry extension
             <code>previousCertificateIssuer</code> is returned by
             {@link #getCertificateIssuer()}.
            
             @param c
                        TbsCertificateList.CrlEntry object.
             @param isIndirect
                        <code>true</code> if the corresponding CRL is a indirect
                        CRL.
             @param previousCertificateIssuer
                        Certificate issuer of the previous CrlEntry.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CrlParser.ReadCrl(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CrlParser.ReadCrls(System.Byte[])">
            <summary>
            Create loading data from byte array.
            </summary>
            <param name="input"></param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CrlParser.ReadCrl(System.IO.Stream)">
            Generates a certificate revocation list (CRL) object and initializes
            it with the data read from the input stream inStream.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509CrlParser.ReadCrls(System.IO.Stream)">
             Returns a (possibly empty) collection view of the CRLs read from
             the given input stream inStream.
            
             The inStream may contain a sequence of DER-encoded CRLs, or
             a PKCS#7 CRL set.  This is a PKCS#7 SignedData object, with the
             only significant field being crls.  In particular the signature
             and the contents are ignored.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509KeyUsage">
             A holding class for constructing an X509 Key Usage extension.
            
             <pre>
                id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
            
                KeyUsage ::= BIT STRING {
                     digitalSignature        (0),
                     nonRepudiation          (1),
                     keyEncipherment         (2),
                     dataEncipherment        (3),
                     keyAgreement            (4),
                     keyCertSign             (5),
                     cRLSign                 (6),
                     encipherOnly            (7),
                     decipherOnly            (8) }
             </pre>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509KeyUsage.#ctor(System.Int32)">
             Basic constructor.
            
             @param usage - the bitwise OR of the Key Usage flags giving the
             allowed uses for the key.
             e.g. (X509KeyUsage.keyEncipherment | X509KeyUsage.dataEncipherment)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509SignatureUtilities.GetDigestAlgName(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier)">
            Return the digest algorithm using one of the standard JCA string
            representations rather than the algorithm identifier (if possible).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator">
            <summary>
            Class to Generate X509V1 Certificates.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.Reset">
            <summary>
            Reset the generator.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.SetSerialNumber(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Set the certificate's serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.SetIssuerDN(EnterpriseDT.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the issuer distinguished name.
            The issuer is the entity whose private key is used to sign the certificate.
            </summary>
            <param name="issuer">The issuers DN.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.SetNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid from.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.SetNotAfter(System.DateTime)">
            <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.SetSubjectDN(EnterpriseDT.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the subject distinguished name.
            The subject describes the entity associated with the public key.
            </summary>
            <param name="subject"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.SetPublicKey(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="publicKey"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            This can be either a name or an OID, names are treated as case insensitive.
            </summary>
            <param name="signatureAlgorithm">string representation of the algorithm name</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate a new X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary>
            Generate a new X509Certificate specifying a SecureRandom instance that you would like to use.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <param name="random">The Secure Random you want to use.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.ISignatureFactory)">
            <summary>
            Generate a new X509Certificate using the passed in SignatureCalculator.
            </summary>
            <param name="signatureCalculatorFactory">A signature calculator factory with the necessary algorithm details.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509V1CertificateGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificate">
            <summary>An implementation of a version 2 X.509 Attribute Certificate.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificate.Verify(EnterpriseDT.BouncyCastle.Crypto.IVerifierFactoryProvider)">
            <summary>
            Verify the certificate's signature using a verifier created using the passed in verifier provider.
            </summary>
            <param name="verifierProvider">An appropriate provider for verifying the certificate's signature.</param>
            <returns>True if the signature is valid.</returns>
            <exception cref="T:System.Exception">If verifier provider is not appropriate or the certificate algorithm is invalid.</exception>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator">
            <remarks>Class to produce an X.509 Version 2 AttributeCertificate.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Reset">
            <summary>Reset the generator</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetHolder(EnterpriseDT.BouncyCastle.X509.AttributeCertificateHolder)">
            <summary>Set the Holder of this Attribute Certificate.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetIssuer(EnterpriseDT.BouncyCastle.X509.AttributeCertificateIssuer)">
            <summary>Set the issuer.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetSerialNumber(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>Set the serial number for the certificate.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm. This can be either a name or an OID, names
            are treated as case insensitive.
            </summary>
            <param name="signatureAlgorithm">The algorithm name.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddAttribute(EnterpriseDT.BouncyCastle.X509.X509Attribute)">
            <summary>Add an attribute.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddExtension(System.String,System.Boolean,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>Add a given extension field for the standard extensions tag.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            <summary>
            Add a given extension field for the standard extensions tag.
            The value parameter becomes the contents of the octet string associated
            with the extension.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X509 certificate, based on the current issuer and subject.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary>
            Generate an X509 certificate, based on the current issuer and subject,
            using the supplied source of randomness, if required.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.ISignatureFactory)">
            <summary>
            Generate a new X.509 Attribute Certificate using the passed in SignatureCalculator.
            </summary>
            <param name="signatureCalculatorFactory">A signature calculator factory with the necessary algorithm details.</param>
            <returns>An IX509AttributeCertificate.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509V2AttributeCertificateGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator">
            class to produce an X.509 Version 2 CRL.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.Reset">
            reset the generator
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.SetIssuerDN(EnterpriseDT.BouncyCastle.Asn1.X509.X509Name)">
            Set the issuer distinguished name - the issuer is the entity whose private key is used to sign the
            certificate.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.AddCrlEntry(EnterpriseDT.BouncyCastle.Math.BigInteger,System.DateTime,System.Int32)">
             Reason being as indicated by CrlReason, i.e. CrlReason.KeyCompromise
             or 0 if CrlReason is not to be used
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.AddCrlEntry(EnterpriseDT.BouncyCastle.Math.BigInteger,System.DateTime,System.Int32,System.DateTime)">
             Add a CRL entry with an Invalidity Date extension as well as a CrlReason extension.
             Reason being as indicated by CrlReason, i.e. CrlReason.KeyCompromise
             or 0 if CrlReason is not to be used
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.AddCrlEntry(EnterpriseDT.BouncyCastle.Math.BigInteger,System.DateTime,EnterpriseDT.BouncyCastle.Asn1.X509.X509Extensions)">
             Add a CRL entry with extensions.
            
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.AddCrl(EnterpriseDT.BouncyCastle.X509.X509Crl)">
             Add the CRLEntry objects contained in a previous CRL.
            
             @param other the X509Crl to source the other entries from.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this CRL.
            </summary>
            <param name="signatureAlgorithm"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(System.String,System.Boolean,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.AddExtension(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            add a given extension field for the standard extensions tag (tag 0)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X.509 CRL, based on the current issuer and subject.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <returns>An X509Crl.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary>
            Generate an X.509 CRL, based on the current issuer and subject using the specified secure random.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <param name="random">Your Secure Random instance.</param>
            <returns>An X509Crl.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.ISignatureFactory)">
            <summary>
            Generate a new X509Crl using the passed in SignatureCalculator.
            </summary>
            <param name="signatureCalculatorFactory">A signature calculator factory with the necessary algorithm details.</param>
            <returns>An X509Crl.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509V2CrlGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator">
            <summary>
            A class to Generate Version 3 X509Certificates.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.Reset">
            <summary>
            Reset the Generator.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SetSerialNumber(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            <summary>
            Set the certificate's serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can Get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SetIssuerDN(EnterpriseDT.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the distinguished name of the issuer.
            The issuer is the entity which is signing the certificate.
            </summary>
            <param name="issuer">The issuer's DN.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SetNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid from.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SetNotAfter(System.DateTime)">
            <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SetSubjectDN(EnterpriseDT.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the DN of the entity that this certificate is about.
            </summary>
            <param name="subject"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SetPublicKey(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="publicKey"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            </summary>
            <param name="signatureAlgorithm"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SetSubjectUniqueID(System.Boolean[])">
            <summary>
            Set the subject unique ID - note: it is very rare that it is correct to do this.
            </summary>
            <param name="uniqueID"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SetIssuerUniqueID(System.Boolean[])">
            <summary>
            Set the issuer unique ID - note: it is very rare that it is correct to do this.
            </summary>
            <param name="uniqueID"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(System.String,System.Boolean,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>
            Add a given extension field for the standard extensions tag (tag 3).
            </summary>
            <param name="oid">string containing a dotted decimal Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">The value.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,EnterpriseDT.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>
            Add an extension to this certificate.
            </summary>
            <param name="oid">Its Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">The value.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(System.String,System.Boolean,System.Byte[])">
            <summary>
            Add an extension using a string with a dotted decimal OID.
            </summary>
            <param name="oid">string containing a dotted decimal Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">byte[] containing the value of this extension.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.AddExtension(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            <summary>
            Add an extension to this certificate.
            </summary>
            <param name="oid">Its Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">byte[] containing the value of this extension.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.CopyAndAddExtension(System.String,System.Boolean,EnterpriseDT.BouncyCastle.X509.X509Certificate)">
            <summary>
            Add a given extension field for the standard extensions tag (tag 3),
            copying the extension value from another certificate.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.CopyAndAddExtension(EnterpriseDT.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,EnterpriseDT.BouncyCastle.X509.X509Certificate)">
            add a given extension field for the standard extensions tag (tag 3)
            copying the extension value from another certificate.
            @throws CertificateParsingException if the extension cannot be extracted.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            <summary>
            Generate an X509Certificate using your own SecureRandom.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <param name="random">You Secure Random instance.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.Generate(EnterpriseDT.BouncyCastle.Crypto.ISignatureFactory)">
            <summary>
            Generate a new X509Certificate using the passed in SignatureCalculator.
            </summary>
            <param name="signatureCalculatorFactory">A signature calculator factory with the necessary algorithm details.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.X509V3CertificateGenerator.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure">
            <remarks>A high level authority key identifier.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1OctetString)">
             Constructor which will take the byte[] returned from getExtensionValue()
            
             @param encodedValue a DER octet encoded string with the extension structure in it.
             @throws IOException on parsing errors.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(EnterpriseDT.BouncyCastle.X509.X509Certificate)">
             Create an AuthorityKeyIdentifier using the passed in certificate's public
             key, issuer and serial number.
            
             @param certificate the certificate providing the information.
             @throws CertificateParsingException if there is a problem processing the certificate
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Extension.AuthorityKeyIdentifierStructure.#ctor(EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
             Create an AuthorityKeyIdentifier using just the hash of the
             public key.
            
             @param pubKey the key to generate the hash from.
             @throws InvalidKeyException if there is a problem using the key.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.Extension.SubjectKeyIdentifierStructure">
            A high level subject key identifier.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Extension.SubjectKeyIdentifierStructure.#ctor(EnterpriseDT.BouncyCastle.Asn1.Asn1OctetString)">
             Constructor which will take the byte[] returned from getExtensionValue()
            
             @param encodedValue a DER octet encoded string with the extension structure in it.
             @throws IOException on parsing errors.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector">
             This class is an <code>Selector</code> like implementation to select
             attribute certificates from a given set of criteria.
            
             @see org.bouncycastle.x509.X509AttributeCertificate
             @see org.bouncycastle.x509.X509Store
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Match(System.Object)">
            <summary>
            Decides if the given attribute certificate should be selected.
            </summary>
            <param name="obj">The attribute certificate to be checked.</param>
            <returns><code>true</code> if the object matches this selector.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetName(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName)">
             Adds a target name criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target names.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name The name as a GeneralName (not <code>null</code>)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetName(System.Byte[])">
             Adds a target name criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target names.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the name in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SetTargetNames(System.Collections.IEnumerable)">
            Adds a collection with target names criteria. If <code>null</code> is
            given any will do.
            <p>
            The collection consists of either GeneralName objects or byte[] arrays representing
            DER encoded GeneralName structures.
            </p>
            
            @param names A collection of target names.
            @throws IOException if a parsing error occurs.
            @see #AddTargetName(byte[])
            @see #AddTargetName(GeneralName)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.GetTargetNames">
            Gets the target names. The collection consists of <code>List</code>s
            made up of an <code>Integer</code> in the first entry and a DER encoded
            byte array or a <code>String</code> in the second entry.
            <p>The returned collection is immutable.</p>
            
            @return The collection of target names
            @see #setTargetNames(Collection)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(EnterpriseDT.BouncyCastle.Asn1.X509.GeneralName)">
             Adds a target group criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target groups.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param group The group as GeneralName form (not <code>null</code>)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AddTargetGroup(System.Byte[])">
             Adds a target group criterion for the attribute certificate to the target
             information extension criteria. The <code>X509AttributeCertificate</code>
             must contain at least one of the specified target groups.
             <p>
             Each attribute certificate may contain a target information extension
             limiting the servers where this attribute certificate can be used. If
             this extension is not present, the attribute certificate is not targeted
             and may be accepted by any server.
             </p>
            
             @param name a byte array containing the group in ASN.1 DER encoded form of a GeneralName
             @throws IOException if a parsing error occurs.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SetTargetGroups(System.Collections.IEnumerable)">
             Adds a collection with target groups criteria. If <code>null</code> is
             given any will do.
             <p>
             The collection consists of <code>GeneralName</code> objects or <code>byte[]</code>
             representing DER encoded GeneralNames.
             </p>
            
             @param names A collection of target groups.
             @throws IOException if a parsing error occurs.
             @see #AddTargetGroup(byte[])
             @see #AddTargetGroup(GeneralName)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.GetTargetGroups">
             Gets the target groups. The collection consists of <code>List</code>s
             made up of an <code>Integer</code> in the first entry and a DER encoded
             byte array or a <code>String</code> in the second entry.
             <p>The returned collection is immutable.</p>
            
             @return The collection of target groups.
             @see #setTargetGroups(Collection)
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AttributeCert">
            <summary>The attribute certificate which must be matched.</summary>
            <remarks>If <c>null</c> is given, any will do.</remarks>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.AttributeCertificateValid">
            <summary>The criteria for validity</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Holder">
            <summary>The holder.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.Issuer">
            <summary>The issuer.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509AttrCertStoreSelector.SerialNumber">
            <summary>The serial number.</summary>
            <remarks>If <c>null</c> is given any will do.</remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.Store.X509CertPairStoreSelector">
            <remarks>
            This class is an <code>IX509Selector</code> implementation to select
            certificate pairs, which are e.g. used for cross certificates. The set of
            criteria is given from two <code>X509CertStoreSelector</code> objects,
            each of which, if present, must match the respective component of a pair.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509CertPairStoreSelector.Match(System.Object)">
            <summary>
            Decides if the given certificate pair should be selected. If
            <c>obj</c> is not a <code>X509CertificatePair</code>, this method
            returns <code>false</code>.
            </summary>
            <param name="obj">The <code>X509CertificatePair</code> to be tested.</param>
            <returns><code>true</code> if the object matches this selector.</returns>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CertPairStoreSelector.CertPair">
            <summary>The certificate pair which is used for testing on equality.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CertPairStoreSelector.ForwardSelector">
            <summary>The certificate selector for the forward part.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CertPairStoreSelector.ReverseSelector">
            <summary>The certificate selector for the reverse part.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CertStoreSelector.Policy">
            <summary>
            An <code>ISet</code> of <code>DerObjectIdentifier</code> objects.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.Store.X509CollectionStore">
            A simple collection backed store.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509CollectionStore.#ctor(System.Collections.ICollection)">
             Basic constructor.
            
             @param collection - initial contents for the store, this is copied.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509CollectionStore.GetMatches(EnterpriseDT.BouncyCastle.X509.Store.IX509Selector)">
             Return the matches in the collection for the passed in selector.
            
             @param selector the selector to match against.
             @return a possibly empty collection of matching objects.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.X509.Store.X509CollectionStoreParameters">
            <remarks>This class contains a collection for collection based <code>X509Store</code>s.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509CollectionStoreParameters.#ctor(System.Collections.ICollection)">
            <summary>
            Constructor.
            <p>
            The collection is copied.
            </p>
            </summary>
            <param name="collection">The collection containing X.509 object types.</param>
            <exception cref="T:System.ArgumentNullException">If collection is null.</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509CollectionStoreParameters.GetCollection">
            <summary>Returns a copy of the <code>ICollection</code>.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.X509.Store.X509CollectionStoreParameters.ToString">
            <summary>Returns a formatted string describing the parameters.</summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CrlStoreSelector.Issuers">
            <summary>
            An <code>ICollection</code> of <code>X509Name</code> objects
            </summary>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CrlStoreSelector.AttrCertChecking">
             The attribute certificate being checked. This is not a criterion.
             Rather, it is optional information that may help a {@link X509Store} find
             CRLs that would be relevant when checking revocation for the specified
             attribute certificate. If <code>null</code> is specified, then no such
             optional information is provided.
            
             @param attrCert the <code>IX509AttributeCertificate</code> being checked (or
                         <code>null</code>)
             @see #getAttrCertificateChecking()
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CrlStoreSelector.CompleteCrlEnabled">
             If <code>true</code> only complete CRLs are returned. Defaults to
             <code>false</code>.
            
             @return <code>true</code> if only complete CRLs are returned.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CrlStoreSelector.DeltaCrlIndicatorEnabled">
             Returns if this selector must match CRLs with the delta CRL indicator
             extension set. Defaults to <code>false</code>.
            
             @return Returns <code>true</code> if only CRLs with the delta CRL
                     indicator extension are selected.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CrlStoreSelector.IssuingDistributionPoint">
             The issuing distribution point.
             <p>
             The issuing distribution point extension is a CRL extension which
             identifies the scope and the distribution point of a CRL. The scope
             contains among others information about revocation reasons contained in
             the CRL. Delta CRLs and complete CRLs must have matching issuing
             distribution points.</p>
             <p>
             The byte array is cloned to protect against subsequent modifications.</p>
             <p>
             You must also enable or disable this criteria with
             {@link #setIssuingDistributionPointEnabled(bool)}.</p>
            
             @param issuingDistributionPoint The issuing distribution point to set.
                                             This is the DER encoded OCTET STRING extension value.
             @see #getIssuingDistributionPoint()
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CrlStoreSelector.IssuingDistributionPointEnabled">
             Whether the issuing distribution point criteria should be applied.
             Defaults to <code>false</code>.
             <p>
             You may also set the issuing distribution point criteria if not a missing
             issuing distribution point should be assumed.</p>
            
             @return Returns if the issuing distribution point check is enabled.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.X509.Store.X509CrlStoreSelector.MaxBaseCrlNumber">
             The maximum base CRL number. Defaults to <code>null</code>.
            
             @return Returns the maximum base CRL number.
             @see #setMaxBaseCRLNumber(BigInteger)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.AddMagnitudes(System.Int32[],System.Int32[])">
            return a = a + b - b preserved.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.CompareTo(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            unsigned comparison on two arrays - note the arrays may
            start with leading zeros.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.Divide(System.Int32[],System.Int32[])">
            return z = x / y - done in place (z value preserved, x contains the
            remainder)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.IsProbablePrime(System.Int32)">
            return whether or not a BigInteger is probably prime with a
            probability of 1 - (1/2)**certainty.
            <p>From Knuth Vol 2, pg 395.</p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.ExtEuclid(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger@)">
             Calculate the numbers u1, u2, and u3 such that:
            
             u1 * a + u2 * b = u3
            
             where u3 is the greatest common divider of a and b.
             a and b using the extended Euclid algorithm (refer p. 323
             of The Art of Computer Programming vol 2, 2nd ed).
             This also seems to have the side effect of calculating
             some form of multiplicative inverse.
            
             @param a    First number to calculate gcd for
             @param b    Second number to calculate gcd for
             @param u1Out      the return object for the u1 value
             @return     The greatest common divisor of a and b
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.Square(System.Int32[],System.Int32[])">
            return w with w = x * x - w is assumed to have enough space.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.Multiply(System.Int32[],System.Int32[],System.Int32[])">
            return x with x = y * z - x is assumed to have enough space.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.GetMQuote">
            Calculate mQuote = -m^(-1) mod b with b = 2^32 (32 = word size)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.MultiplyMonty(System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.UInt32,System.Boolean)">
            Montgomery multiplication: a = x * y * R^(-1) mod m
            <br/>
            Based algorithm 14.36 of Handbook of Applied Cryptography.
            <br/>
            <li> m, x, y should have length n </li>
            <li> a should have length (n + 1) </li>
            <li> b = 2^32, R = b^n </li>
            <br/>
            The result is put in x
            <br/>
            NOTE: the indices of x, y, m, a different in HAC and in Java
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.Remainder(System.Int32[],System.Int32[])">
            return x = x % y - done in place (y value preserved)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.ShiftLeft(System.Int32[],System.Int32)">
            do a left shift - this returns a new array.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.ShiftRightInPlace(System.Int32,System.Int32[],System.Int32)">
            do a right shift - this does it in place.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.ShiftRightOneInPlace(System.Int32,System.Int32[])">
            do a right shift by one - this does it in place.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.BigInteger.Subtract(System.Int32,System.Int32[],System.Int32,System.Int32[])">
            returns x = x - y - we assume x is >= y
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.Primes">
            Utility methods for generating primes and testing for primality.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.Primes.GenerateSTRandomPrime(EnterpriseDT.BouncyCastle.Crypto.IDigest,System.Int32,System.Byte[])">
            FIPS 186-4 C.6 Shawe-Taylor Random_Prime Routine
            
            Construct a provable prime number using a hash function.
            
            @param hash
                       the {@link Digest} instance to use (as "Hash()"). Cannot be null.
            @param length
                       the length (in bits) of the prime to be generated. Must be at least 2.
            @param inputSeed
                       the seed to be used for the generation of the requested prime. Cannot be null or
                       empty.
            @return an {@link STOutput} instance containing the requested prime.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.Primes.EnhancedMRProbablePrimeTest(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Security.SecureRandom,System.Int32)">
            FIPS 186-4 C.3.2 Enhanced Miller-Rabin Probabilistic Primality Test
            
            Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases. This is an
            alternative to {@link #isMRProbablePrime(BigInteger, SecureRandom, int)} that provides more
            information about a composite candidate, which may be useful when generating or validating
            RSA moduli.
            
            @param candidate
                       the {@link BigInteger} instance to test for primality.
            @param random
                       the source of randomness to use to choose bases.
            @param iterations
                       the number of randomly-chosen bases to perform the test for.
            @return an {@link MROutput} instance that can be further queried for details.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.Primes.HasAnySmallFactors(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            A fast check for small divisors, up to some implementation-specific limit.
            
            @param candidate
                       the {@link BigInteger} instance to test for division by small factors.
            
            @return <code>true</code> if the candidate is found to have any small factors,
                    <code>false</code> otherwise.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.Primes.IsMRProbablePrime(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Security.SecureRandom,System.Int32)">
            FIPS 186-4 C.3.1 Miller-Rabin Probabilistic Primality Test
            
            Run several iterations of the Miller-Rabin algorithm with randomly-chosen bases.
            
            @param candidate
                       the {@link BigInteger} instance to test for primality.
            @param random
                       the source of randomness to use to choose bases.
            @param iterations
                       the number of randomly-chosen bases to perform the test for.
            @return <code>false</code> if any witness to compositeness is found amongst the chosen bases
                    (so <code>candidate</code> is definitely NOT prime), or else <code>true</code>
                    (indicating primality with some probability dependent on the number of iterations
                    that were performed).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.Primes.IsMRProbablePrimeToBase(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            FIPS 186-4 C.3.1 Miller-Rabin Probabilistic Primality Test (to a fixed base).
            
            Run a single iteration of the Miller-Rabin algorithm against the specified base.
            
            @param candidate
                       the {@link BigInteger} instance to test for primality.
            @param baseValue
                       the base value to use for this iteration.
            @return <code>false</code> if the specified base is a witness to compositeness (so
                    <code>candidate</code> is definitely NOT prime), or else <code>true</code>.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.Primes.MROutput">
            Used to return the output from the
            {@linkplain Primes#enhancedMRProbablePrimeTest(BigInteger, SecureRandom, int) Enhanced
            Miller-Rabin Probabilistic Primality Test}
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.Primes.STOutput">
            Used to return the output from the {@linkplain Primes#generateSTRandomPrime(Digest, int, byte[]) Shawe-Taylor Random_Prime Routine} 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.ECAlgorithms.ReferenceMultiply(EnterpriseDT.BouncyCastle.Math.EC.ECPoint,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Simple shift-and-add multiplication. Serves as reference implementation
            to verify (possibly faster) implementations, and for very small scalars.
            
            @param p
                       The point to multiply.
            @param k
                       The multiplier.
            @return The result of the point multiplication <code>kP</code>.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.ECCurve">
            <remarks>Base class for an elliptic curve.</remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.ECCurve.SetPreCompInfo(EnterpriseDT.BouncyCastle.Math.EC.ECPoint,System.String,EnterpriseDT.BouncyCastle.Math.EC.Multiplier.PreCompInfo)">
            Adds <code>PreCompInfo</code> for a point on this curve, under a given name. Used by
            <code>ECMultiplier</code>s to save the precomputation for this <code>ECPoint</code> for use
            by subsequent multiplication.
            
            @param point
                       The <code>ECPoint</code> to store precomputations for.
            @param name
                       A <code>String</code> used to index precomputations of different types.
            @param preCompInfo
                       The values precomputed by the <code>ECMultiplier</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.ECCurve.NormalizeAll(EnterpriseDT.BouncyCastle.Math.EC.ECPoint[])">
            Normalization ensures that any projective coordinate is 1, and therefore that the x, y
            coordinates reflect those of the equivalent point in an affine coordinate system. Where more
            than one point is to be normalized, this method will generally be more efficient than
            normalizing each point separately.
            
            @param points
                       An array of points that will be updated in place with their normalized versions,
                       where necessary
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.ECCurve.NormalizeAll(EnterpriseDT.BouncyCastle.Math.EC.ECPoint[],System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Normalization ensures that any projective coordinate is 1, and therefore that the x, y
            coordinates reflect those of the equivalent point in an affine coordinate system. Where more
            than one point is to be normalized, this method will generally be more efficient than
            normalizing each point separately. An (optional) z-scaling factor can be applied; effectively
            each z coordinate is scaled by this value prior to normalization (but only one
            actual multiplication is needed).
            
            @param points
                       An array of points that will be updated in place with their normalized versions,
                       where necessary
            @param off
                       The start of the range of points to normalize
            @param len
                       The length of the range of points to normalize
            @param iso
                       The (optional) z-scaling factor - can be null
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.ECCurve.GetMultiplier">
            Sets the default <code>ECMultiplier</code>, unless already set. 
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.ECCurve.DecodePoint(System.Byte[])">
            Decode a point on this curve from its ASN.1 encoding. The different
            encodings are taken account of, including point compression for
            <code>F<sub>p</sub></code> (X9.62 s 4.2.1 pg 17).
            @return The decoded point.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.FpCurve">
            Elliptic curve over Fp
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mCurve.si">
            The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mCurve.SolveQuadradicEquation(EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
             Solves a quadratic equation <code>z<sup>2</sup> + z = beta</code>(X9.62
             D.1.6) The other solution is <code>z + 1</code>.
            
             @param beta
                        The value to solve the qradratic equation for.
             @return the solution for <code>z<sup>2</sup> + z = beta</code> or
                     <code>null</code> if no solution exists.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mCurve.GetSi">
            @return the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction for
            Koblitz curves.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mCurve.IsKoblitz">
            Returns true if this is a Koblitz curve (ABC curve).
            @return true if this is a Koblitz curve (ABC curve), false otherwise
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve">
            Elliptic curves over F2m. The Weierstrass equation is given by
            <code>y<sup>2</sup> + xy = x<sup>3</sup> + ax<sup>2</sup> + b</code>.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.k1">
            TPB: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            PPB: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.k2">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.k3">
            TPB: Always set to <code>0</code><br/>
            PPB: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.m_infinity">
            The point at infinity on this curve.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Constructor for Trinomial Polynomial Basis (TPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param order The order of the main subgroup of the elliptic curve.
            @param cofactor The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Constructor for Pentanomial Polynomial Basis (PPB).
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param a The coefficient <code>a</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param b The coefficient <code>b</code> in the Weierstrass equation
            for non-supersingular elliptic curves over
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param order The order of the main subgroup of the elliptic curve.
            @param cofactor The cofactor of the elliptic curve, i.e.
            <code>#E<sub>a</sub>(F<sub>2<sup>m</sup></sub>) = h * n</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mCurve.IsTrinomial">
             Return true if curve uses a Trinomial basis.
            
             @return true if curve Trinomial, false otherwise.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.FpFieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation
            returns the right value - if none exists it returns null.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.FpFieldElement.FieldName">
             return the field name for this field.
            
             @return the string "Fp".
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement">
            Class representing the Elements of the finite field
            <code>F<sub>2<sup>m</sup></sub></code> in polynomial basis (PB)
            representation. Both trinomial (Tpb) and pentanomial (Ppb) polynomial
            basis representations are supported. Gaussian normal basis (GNB)
            representation is not supported.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.Gnb">
            Indicates gaussian normal basis representation (GNB). Number chosen
            according to X9.62. GNB is not implemented at present.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.Tpb">
            Indicates trinomial basis representation (Tpb). Number chosen
            according to X9.62.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.Ppb">
            Indicates pentanomial basis representation (Ppb). Number chosen
            according to X9.62.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.representation">
            Tpb or Ppb.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.m">
            The exponent <code>m</code> of <code>F<sub>2<sup>m</sup></sub></code>.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.x">
            The <code>LongArray</code> holding the bits.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Constructor for Ppb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k1 The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k2 The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param k3 The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.#ctor(System.Int32,System.Int32,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Constructor for Tpb.
            @param m  The exponent <code>m</code> of
            <code>F<sub>2<sup>m</sup></sub></code>.
            @param k The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction
            polynomial <code>f(z)</code>.
            @param x The BigInteger representing the value of the field element.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.CheckFieldElements(EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Checks, if the ECFieldElements <code>a</code> and <code>b</code>
            are elements of the same field <code>F<sub>2<sup>m</sup></sub></code>
            (having the same representation).
            @param a field element.
            @param b field element to be compared.
            @throws ArgumentException if <code>a</code> and <code>b</code>
            are not elements of the same field
            <code>F<sub>2<sup>m</sup></sub></code> (having the same
            representation).
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.Representation">
            @return the representation of the field
            <code>F<sub>2<sup>m</sup></sub></code>, either of
            {@link F2mFieldElement.Tpb} (trinomial
            basis representation) or
            {@link F2mFieldElement.Ppb} (pentanomial
            basis representation).
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.M">
            @return the degree <code>m</code> of the reduction polynomial
            <code>f(z)</code>.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.K1">
            @return Tpb: The integer <code>k</code> where <code>x<sup>m</sup> +
            x<sup>k</sup> + 1</code> represents the reduction polynomial
            <code>f(z)</code>.<br/>
            Ppb: The integer <code>k1</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.K2">
            @return Tpb: Always returns <code>0</code><br/>
            Ppb: The integer <code>k2</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.F2mFieldElement.K3">
            @return Tpb: Always set to <code>0</code><br/>
            Ppb: The integer <code>k3</code> where <code>x<sup>m</sup> +
            x<sup>k3</sup> + x<sup>k2</sup> + x<sup>k1</sup> + 1</code>
            represents the reduction polynomial <code>f(z)</code>.<br/>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.ECPoint">
            base class for points on elliptic curves.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.ECPoint.Normalize">
            Normalization ensures that any projective coordinate is 1, and therefore that the x, y
            coordinates reflect those of the equivalent point in an affine coordinate system.
            
            @return a new ECPoint instance representing the same point, but with normalized coordinates
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.ECPoint.X">
            Normalizes this point, and then returns the affine x-coordinate.
            
            Note: normalization can be expensive, this method is deprecated in favour
            of caller-controlled normalization.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.ECPoint.Y">
            Normalizes this point, and then returns the affine y-coordinate.
            
            Note: normalization can be expensive, this method is deprecated in favour
            of caller-controlled normalization.
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.ECPoint.AffineXCoord">
            Returns the affine x-coordinate after checking that this point is normalized.
            
            @return The affine x-coordinate of this point
            @throws IllegalStateException if the point is not normalized
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.ECPoint.AffineYCoord">
            Returns the affine y-coordinate after checking that this point is normalized
            
            @return The affine y-coordinate of this point
            @throws IllegalStateException if the point is not normalized
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.ECPoint.XCoord">
            Returns the x-coordinate.
            
            Caution: depending on the curve's coordinate system, this may not be the same value as in an
            affine coordinate system; use Normalize() to get a point where the coordinates have their
            affine values, or use AffineXCoord if you expect the point to already have been normalized.
            
            @return the x-coordinate of this point
        </member>
        <member name="P:EnterpriseDT.BouncyCastle.Math.EC.ECPoint.YCoord">
            Returns the y-coordinate.
            
            Caution: depending on the curve's coordinate system, this may not be the same value as in an
            affine coordinate system; use Normalize() to get a point where the coordinates have their
            affine values, or use AffineYCoord if you expect the point to already have been normalized.
            
            @return the y-coordinate of this point
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.ECPointBase.GetEncoded(System.Boolean)">
            return the field element encoded with point compression. (S 4.3.6)
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.ECPointBase.Multiply(EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Multiplies this <code>ECPoint</code> by the given number.
            @param k The multiplicator.
            @return <code>k * this</code>.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.FpPoint">
            Elliptic curve points over Fp
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.FpPoint.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
             Create a point which encodes without point compression.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.FpPoint.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
             Create a point that encodes with or without point compression.
            
             @param curve the curve to use
             @param x affine x co-ordinate
             @param y affine y co-ordinate
             @param withCompression if true encode with point compression
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.F2mPoint">
            Elliptic curve points over F2m
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mPoint.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @param curve base curve
            @param x x point
            @param y y point
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mPoint.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @param curve base curve
            @param x x point
            @param y y point
            @param withCompression true if encode with point compression.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.F2mPoint.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve)">
            Constructor for point at infinity
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Abc.SimpleBigDecimal">
            Class representing a simple version of a big decimal. A
            <code>SimpleBigDecimal</code> is basically a
            {@link java.math.BigInteger BigInteger} with a few digits on the right of
            the decimal point. The number of (binary) digits on the right of the decimal
            point is called the <code>scale</code> of the <code>SimpleBigDecimal</code>.
            Unlike in {@link java.math.BigDecimal BigDecimal}, the scale is not adjusted
            automatically, but must be set manually. All <code>SimpleBigDecimal</code>s
            taking part in the same arithmetic operation must have equal scale. The
            result of a multiplication of two <code>SimpleBigDecimal</code>s returns a
            <code>SimpleBigDecimal</code> with double scale.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.SimpleBigDecimal.GetInstance(EnterpriseDT.BouncyCastle.Math.BigInteger,System.Int32)">
            Returns a <code>SimpleBigDecimal</code> representing the same numerical
            value as <code>value</code>.
            @param value The value of the <code>SimpleBigDecimal</code> to be
            created. 
            @param scale The scale of the <code>SimpleBigDecimal</code> to be
            created. 
            @return The such created <code>SimpleBigDecimal</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.SimpleBigDecimal.#ctor(EnterpriseDT.BouncyCastle.Math.BigInteger,System.Int32)">
            Constructor for <code>SimpleBigDecimal</code>. The value of the
            constructed <code>SimpleBigDecimal</code> Equals <code>bigInt / 
            2<sup>scale</sup></code>.
            @param bigInt The <code>bigInt</code> value parameter.
            @param scale The scale of the constructed <code>SimpleBigDecimal</code>.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf">
            Class holding methods for point multiplication based on the window
            &#964;-adic nonadjacent form (WTNAF). The algorithms are based on the
            paper "Improved Algorithms for Arithmetic on Anomalous Binary Curves"
            by Jerome A. Solinas. The paper first appeared in the Proceedings of
            Crypto 1997.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Width">
            The window width of WTNAF. The standard value of 4 is slightly less
            than optimal for running time, but keeps space requirements for
            precomputation low. For typical curves, a value of 5 or 6 results in
            a better running time. When changing this value, the
            <code>&#945;<sub>u</sub></code>'s must be computed differently, see
            e.g. "Guide to Elliptic Curve Cryptography", Darrel Hankerson,
            Alfred Menezes, Scott Vanstone, Springer-Verlag New York Inc., 2004,
            p. 121-122
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Pow2Width">
            2<sup>4</sup>
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Alpha0">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Alpha0Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=0</code> as an array
            of TNAFs.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Alpha1">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of <code>ZTauElement</code>s.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Alpha1Tnaf">
            The <code>&#945;<sub>u</sub></code>'s for <code>a=1</code> as an array
            of TNAFs.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Norm(System.SByte,EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Norm(System.SByte,EnterpriseDT.BouncyCastle.Math.EC.Abc.SimpleBigDecimal,EnterpriseDT.BouncyCastle.Math.EC.Abc.SimpleBigDecimal)">
            Computes the norm of an element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>, where <code>&#955; = u + v&#964;</code>
            and <code>u</code> and <code>u</code> are real numbers (elements of
            <code><b>R</b></code>). 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param u The real part of the element <code>&#955;</code> of
            <code><b>R</b>[&#964;]</code>.
            @param v The <code>&#964;</code>-adic part of the element
            <code>&#955;</code> of <code><b>R</b>[&#964;]</code>.
            @return The norm of <code>&#955;</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Round(EnterpriseDT.BouncyCastle.Math.EC.Abc.SimpleBigDecimal,EnterpriseDT.BouncyCastle.Math.EC.Abc.SimpleBigDecimal,System.SByte)">
            Rounds an element <code>&#955;</code> of <code><b>R</b>[&#964;]</code>
            to an element of <code><b>Z</b>[&#964;]</code>, such that their difference
            has minimal norm. <code>&#955;</code> is given as
            <code>&#955; = &#955;<sub>0</sub> + &#955;<sub>1</sub>&#964;</code>.
            @param lambda0 The component <code>&#955;<sub>0</sub></code>.
            @param lambda1 The component <code>&#955;<sub>1</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve. Must
            equal 1 or -1.
            @return The rounded element of <code><b>Z</b>[&#964;]</code>.
            @throws ArgumentException if <code>lambda0</code> and
            <code>lambda1</code> do not have same scale.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.ApproximateDivisionByN(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,System.SByte,System.Int32,System.Int32)">
            Approximate division by <code>n</code>. For an integer
            <code>k</code>, the value <code>&#955; = s k / n</code> is
            computed to <code>c</code> bits of accuracy.
            @param k The parameter <code>k</code>.
            @param s The curve parameter <code>s<sub>0</sub></code> or
            <code>s<sub>1</sub></code>.
            @param vm The Lucas Sequence element <code>V<sub>m</sub></code>.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param m The bit length of the finite field
            <code><b>F</b><sub>m</sub></code>.
            @param c The number of bits of accuracy, i.e. the scale of the returned
            <code>SimpleBigDecimal</code>.
            @return The value <code>&#955; = s k / n</code> computed to
            <code>c</code> bits of accuracy.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.TauAdicNaf(System.SByte,EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement)">
            Computes the <code>&#964;</code>-adic NAF (non-adjacent form) of an
            element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return The <code>&#964;</code>-adic NAF of <code>&#955;</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.Tau(EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mPoint)">
            Applies the operation <code>&#964;()</code> to an
            <code>AbstractF2mPoint</code>. 
            @param p The AbstractF2mPoint to which <code>&#964;()</code> is applied.
            @return <code>&#964;(p)</code>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.GetMu(EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mCurve)">
            Returns the parameter <code>&#956;</code> of the elliptic curve.
            @param curve The elliptic curve from which to obtain <code>&#956;</code>.
            The curve must be a Koblitz curve, i.e. <code>a</code> Equals
            <code>0</code> or <code>1</code> and <code>b</code> Equals
            <code>1</code>. 
            @return <code>&#956;</code> of the elliptic curve.
            @throws ArgumentException if the given ECCurve is not a Koblitz
            curve.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.GetLucas(System.SByte,System.Int32,System.Boolean)">
            Calculates the Lucas Sequence elements <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>.
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param k The index of the second element of the Lucas Sequence to be
            returned.
            @param doV If set to true, computes <code>V<sub>k-1</sub></code> and
            <code>V<sub>k</sub></code>, otherwise <code>U<sub>k-1</sub></code> and
            <code>U<sub>k</sub></code>.
            @return An array with 2 elements, containing <code>U<sub>k-1</sub></code>
            and <code>U<sub>k</sub></code> or <code>V<sub>k-1</sub></code>
            and <code>V<sub>k</sub></code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.GetTw(System.SByte,System.Int32)">
            Computes the auxiliary value <code>t<sub>w</sub></code>. If the width is
            4, then for <code>mu = 1</code>, <code>t<sub>w</sub> = 6</code> and for
            <code>mu = -1</code>, <code>t<sub>w</sub> = 10</code> 
            @param mu The parameter <code>&#956;</code> of the elliptic curve.
            @param w The window width of the WTNAF.
            @return the auxiliary value <code>t<sub>w</sub></code>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.GetSi(EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mCurve)">
            Computes the auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code> used for partial modular reduction. 
            @param curve The elliptic curve for which to compute
            <code>s<sub>0</sub></code> and <code>s<sub>1</sub></code>.
            @throws ArgumentException if <code>curve</code> is not a
            Koblitz curve (Anomalous Binary Curve, ABC).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.PartModReduction(EnterpriseDT.BouncyCastle.Math.BigInteger,System.Int32,System.SByte,EnterpriseDT.BouncyCastle.Math.BigInteger[],System.SByte,System.SByte)">
            Partial modular reduction modulo
            <code>(&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>.
            @param k The integer to be reduced.
            @param m The bitlength of the underlying finite field.
            @param a The parameter <code>a</code> of the elliptic curve.
            @param s The auxiliary values <code>s<sub>0</sub></code> and
            <code>s<sub>1</sub></code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param c The precision (number of bits of accuracy) of the partial
            modular reduction.
            @return <code>&#961; := k partmod (&#964;<sup>m</sup> - 1)/(&#964; - 1)</code>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.MultiplyRTnaf(EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mPoint,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by a <code>BigInteger</code> using the reduced <code>&#964;</code>-adic
            NAF (RTNAF) method.
            @param p The AbstractF2mPoint to Multiply.
            @param k The <code>BigInteger</code> by which to Multiply <code>p</code>.
            @return <code>k * p</code>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.MultiplyTnaf(EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mPoint,EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The AbstractF2mPoint to Multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @return <code>&#955; * p</code>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.MultiplyFromTnaf(EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mPoint,System.SByte[])">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the <code>&#964;</code>-adic NAF (TNAF) method, given the TNAF
            of <code>&#955;</code>.
            @param p The AbstractF2mPoint to Multiply.
            @param u The the TNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.TauAdicWNaf(System.SByte,EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement,System.SByte,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement[])">
            Computes the <code>[&#964;]</code>-adic window NAF of an element
            <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>.
            @param mu The parameter &#956; of the elliptic curve.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @param width The window width of the resulting WNAF.
            @param pow2w 2<sup>width</sup>.
            @param tw The auxiliary value <code>t<sub>w</sub></code>.
            @param alpha The <code>&#945;<sub>u</sub></code>'s for the window width.
            @return The <code>[&#964;]</code>-adic window NAF of
            <code>&#955;</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.Tnaf.GetPreComp(EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mPoint,System.SByte)">
            Does the precomputation for WTNAF multiplication.
            @param p The <code>ECPoint</code> for which to do the precomputation.
            @param a The parameter <code>a</code> of the elliptic curve.
            @return The precomputation array for <code>p</code>. 
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement">
            Class representing an element of <code><b>Z</b>[&#964;]</code>. Let
            <code>&#955;</code> be an element of <code><b>Z</b>[&#964;]</code>. Then
            <code>&#955;</code> is given as <code>&#955; = u + v&#964;</code>. The
            components <code>u</code> and <code>v</code> may be used directly, there
            are no accessor methods.
            Immutable class.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement.u">
            The &quot;real&quot; part of <code>&#955;</code>.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement.v">
            The &quot;<code>&#964;</code>-adic&quot; part of <code>&#955;</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement.#ctor(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Constructor for an element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code>.
            @param u The &quot;real&quot; part of <code>&#955;</code>.
            @param v The &quot;<code>&#964;</code>-adic&quot; part of
            <code>&#955;</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Djb.Curve25519FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Djb.Curve25519Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve the curve to use
            @param x affine x co-ordinate
            @param y affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Djb.Curve25519Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve the curve to use
            @param x affine x co-ordinate
            @param y affine y co-ordinate
            @param withCompression if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP128R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP128R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(boolean)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP160K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP160R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP160R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP160R2FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.CreatePoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP160R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP192K1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP192K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP192R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP192R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP224K1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP224K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP224R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP224R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP256K1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP256K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP256R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP256R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP384R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP384R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP521R1FieldElement.Sqrt">
            return a sqrt root - the routine verifies that the calculation returns the right value - if
            none exists it returns null.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            Create a point which encodes with point compression.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecP521R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            Create a point that encodes with or without point compresion.
            
            @param curve
                       the curve to use
            @param x
                       affine x co-ordinate
            @param y
                       affine y co-ordinate
            @param withCompression
                       if true encode with point compression
            
            @deprecated per-point compression property will be removed, refer
                        {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT113R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT113R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT131R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT131R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT163K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT163R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT163R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT193R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT193R2Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT233K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT233R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT239K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT283K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT283R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT409K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT409R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT571K1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement)">
            @deprecated Use ECCurve.createPoint to construct points
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Custom.Sec.SecT571R1Point.#ctor(EnterpriseDT.BouncyCastle.Math.EC.ECCurve,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,EnterpriseDT.BouncyCastle.Math.EC.ECFieldElement,System.Boolean)">
            @deprecated per-point compression property will be removed, refer {@link #getEncoded(bool)}
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.ECMultiplier">
            Interface for classes encapsulating a point multiplication algorithm
            for <code>ECPoint</code>s.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.ECMultiplier.Multiply(EnterpriseDT.BouncyCastle.Math.EC.ECPoint,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Multiplies the <code>ECPoint p</code> by <code>k</code>, i.e.
            <code>p</code> is added <code>k</code> times to itself.
            @param p The <code>ECPoint</code> to be multiplied.
            @param k The factor by which <code>p</code> is multiplied.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.DoubleAddMultiplier.MultiplyPositive(EnterpriseDT.BouncyCastle.Math.EC.ECPoint,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Joye's double-add algorithm.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo">
            Class holding precomputation data for fixed-point multiplications.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.PreCompInfo">
            Interface for classes storing precomputation data for multiplication
            algorithms. Used as a Memento (see GOF patterns) for
            <code>WNafMultiplier</code>.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo.m_preComp">
            Array holding the precomputed <code>ECPoint</code>s used for a fixed
            point multiplication.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.FixedPointPreCompInfo.m_width">
            The width used for the precomputation. If a larger width precomputation
            is already available this may be larger than was requested, so calling
            code should refer to the actual width.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.MixedNafR2LMultiplier">
            Class implementing the NAF (Non-Adjacent Form) multiplication algorithm (right-to-left) using
            mixed coordinates.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.MixedNafR2LMultiplier.#ctor">
            By default, addition will be done in Jacobian coordinates, and doubling will be done in
            Modified Jacobian coordinates (independent of the original coordinate system of each point).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.MontgomeryLadderMultiplier.MultiplyPositive(EnterpriseDT.BouncyCastle.Math.EC.ECPoint,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Montgomery ladder.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.NafL2RMultiplier">
            Class implementing the NAF (Non-Adjacent Form) multiplication algorithm (left-to-right).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.NafR2LMultiplier">
            Class implementing the NAF (Non-Adjacent Form) multiplication algorithm (right-to-left).
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafL2RMultiplier">
            Class implementing the WNAF (Window Non-Adjacent Form) multiplication
            algorithm.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafL2RMultiplier.MultiplyPositive(EnterpriseDT.BouncyCastle.Math.EC.ECPoint,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Multiplies <code>this</code> by an integer <code>k</code> using the
            Window NAF method.
            @param k The integer by which <code>this</code> is multiplied.
            @return A new <code>ECPoint</code> which equals <code>this</code>
            multiplied by <code>k</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafL2RMultiplier.GetWindowSize(System.Int32)">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @return the window size to use
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo">
            Class holding precomputation data for the WNAF (Window Non-Adjacent Form)
            algorithm.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.m_preComp">
            Array holding the precomputed <code>ECPoint</code>s used for a Window
            NAF multiplication.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.m_preCompNeg">
            Array holding the negations of the precomputed <code>ECPoint</code>s used
            for a Window NAF multiplication.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafPreCompInfo.m_twice">
            Holds an <code>ECPoint</code> representing Twice(this). Used for the
            Window NAF multiplication to create or extend the precomputed values.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GenerateWindowNaf(System.Int32,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Computes the Window NAF (non-adjacent Form) of an integer.
            @param width The width <code>w</code> of the Window NAF. The width is
            defined as the minimal number <code>w</code>, such that for any
            <code>w</code> consecutive digits in the resulting representation, at
            most one is non-zero.
            @param k The integer of which the Window NAF is computed.
            @return The Window NAF of the given width, such that the following holds:
            <code>k = &amp;sum;<sub>i=0</sub><sup>l-1</sup> k<sub>i</sub>2<sup>i</sup>
            </code>, where the <code>k<sub>i</sub></code> denote the elements of the
            returned <code>byte[]</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32)">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @return the window size to use
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WNafUtilities.GetWindowSize(System.Int32,System.Int32[])">
            Determine window width to use for a scalar multiplication of the given size.
            
            @param bits the bit-length of the scalar to multiply by
            @param windowSizeCutoffs a monotonically increasing list of bit sizes at which to increment the window width
            @return the window size to use
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier">
            Class implementing the WTNAF (Window
            <code>&#964;</code>-adic Non-Adjacent Form) algorithm.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier.MultiplyPositive(EnterpriseDT.BouncyCastle.Math.EC.ECPoint,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by <code>k</code> using the reduced <code>&#964;</code>-adic NAF (RTNAF)
            method.
            @param p The AbstractF2mPoint to multiply.
            @param k The integer by which to multiply <code>k</code>.
            @return <code>p</code> multiplied by <code>k</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier.MultiplyWTnaf(EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mPoint,EnterpriseDT.BouncyCastle.Math.EC.Abc.ZTauElement,EnterpriseDT.BouncyCastle.Math.EC.Multiplier.PreCompInfo,System.SByte,System.SByte)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code> using
            the <code>&#964;</code>-adic NAF (TNAF) method.
            @param p The AbstractF2mPoint to multiply.
            @param lambda The element <code>&#955;</code> of
            <code><b>Z</b>[&#964;]</code> of which to compute the
            <code>[&#964;]</code>-adic NAF.
            @return <code>p</code> multiplied by <code>&#955;</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WTauNafMultiplier.MultiplyFromWTnaf(EnterpriseDT.BouncyCastle.Math.EC.AbstractF2mPoint,System.SByte[],EnterpriseDT.BouncyCastle.Math.EC.Multiplier.PreCompInfo)">
            Multiplies a {@link org.bouncycastle.math.ec.AbstractF2mPoint AbstractF2mPoint}
            by an element <code>&#955;</code> of <code><b>Z</b>[&#964;]</code>
            using the window <code>&#964;</code>-adic NAF (TNAF) method, given the
            WTNAF of <code>&#955;</code>.
            @param p The AbstractF2mPoint to multiply.
            @param u The the WTNAF of <code>&#955;</code>..
            @return <code>&#955; * p</code>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo">
            Class holding precomputation data for the WTNAF (Window
            <code>&#964;</code>-adic Non-Adjacent Form) algorithm.
        </member>
        <member name="F:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.WTauNafPreCompInfo.m_preComp">
            Array holding the precomputed <code>AbstractF2mPoint</code>s used for the
            WTNAF multiplication in <code>
            {@link org.bouncycastle.math.ec.multiplier.WTauNafMultiplier.multiply()
            WTauNafMultiplier.multiply()}</code>.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.ZSignedDigitL2RMultiplier.MultiplyPositive(EnterpriseDT.BouncyCastle.Math.EC.ECPoint,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            'Zeroless' Signed Digit Left-to-Right.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Math.EC.Multiplier.ZSignedDigitR2LMultiplier.MultiplyPositive(EnterpriseDT.BouncyCastle.Math.EC.ECPoint,EnterpriseDT.BouncyCastle.Math.BigInteger)">
            'Zeroless' Signed Digit Right-to-Left.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequest">
             <remarks>
             A class for verifying and creating Pkcs10 Certification requests.
             </remarks>
             <code>
             CertificationRequest ::= Sequence {
               certificationRequestInfo  CertificationRequestInfo,
               signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
               signature                 BIT STRING
             }
            
             CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </code>
             see <a href="http://www.rsasecurity.com/rsalabs/node.asp?id=2132"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor(System.String,EnterpriseDT.BouncyCastle.Asn1.X509.X509Name,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Asn1.Asn1Set,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
             <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureAlgorithm">Name of Sig Alg.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="publicKey">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
             <param name="signingKey">Matching Private key for nominated (above) public key to be used to sign the request.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor(EnterpriseDT.BouncyCastle.Crypto.ISignatureFactory,EnterpriseDT.BouncyCastle.Asn1.X509.X509Name,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Asn1.Asn1Set,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter)">
             <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureFactory">The factory for signature calculators to sign the PKCS#10 request with.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="publicKey">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
             <param name="signingKey">Ignored.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequest.#ctor(EnterpriseDT.BouncyCastle.Crypto.ISignatureFactory,EnterpriseDT.BouncyCastle.Asn1.X509.X509Name,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Asn1.Asn1Set)">
             <summary>
             Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
             </summary>
            <param name="signatureFactory">The factory for signature calculators to sign the PKCS#10 request with.</param>
             <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
             <param name="publicKey">Public Key to be included in cert reqest.</param>
             <param name="attributes">ASN1Set of Attributes.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequest.GetPublicKey">
            <summary>
            Get the public key.
            </summary>
            <returns>The public key.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequest.Verify">
            <summary>
            Verify Pkcs10 Cert Request is valid.
            </summary>
            <returns>true = valid.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned">
             <remarks>
             A class for creating and verifying Pkcs10 Certification requests (this is an extension on <see cref="T:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequest"/>).
             The requests are made using delay signing. This is useful for situations where
             the private key is in another environment and not directly accessible (e.g. HSM)
             So the first step creates the request, then the signing is done outside this
             object and the signature is then used to complete the request.
             </remarks>
             <code>
             CertificationRequest ::= Sequence {
               certificationRequestInfo  CertificationRequestInfo,
               signatureAlgorithm        AlgorithmIdentifier{{ SignatureAlgorithms }},
               signature                 BIT STRING
             }
            
             CertificationRequestInfo ::= Sequence {
               version             Integer { v1(0) } (v1,...),
               subject             Name,
               subjectPKInfo   SubjectPublicKeyInfo{{ PKInfoAlgorithms }},
               attributes          [0] Attributes{{ CRIAttributes }}
              }
            
              Attributes { ATTRIBUTE:IOSet } ::= Set OF Attr{{ IOSet }}
            
              Attr { ATTRIBUTE:IOSet } ::= Sequence {
                type    ATTRIBUTE.&amp;id({IOSet}),
                values  Set SIZE(1..MAX) OF ATTRIBUTE.&amp;Type({IOSet}{\@type})
              }
             </code>
             see <a href="http://www.rsasecurity.com/rsalabs/node.asp?id=2132"/>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.#ctor(System.String,EnterpriseDT.BouncyCastle.Asn1.X509.X509Name,EnterpriseDT.BouncyCastle.Crypto.AsymmetricKeyParameter,EnterpriseDT.BouncyCastle.Asn1.Asn1Set)">
            <summary>
            Instantiate a Pkcs10CertificationRequest object with the necessary credentials.
            </summary>
            <param name="signatureAlgorithm">Name of Sig Alg.</param>
            <param name="subject">X509Name of subject eg OU="My unit." O="My Organisatioin" C="au" </param>
            <param name="publicKey">Public Key to be included in cert reqest.</param>
            <param name="attributes">ASN1Set of Attributes.</param>
            <remarks>
            After the object is constructed use the <see cref="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs10CertificationRequestDelaySigned.GetDataToSign"/> and finally the
            SignRequest methods to finalize the request.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs12Store.GetCertificate(System.String)">
            simply return the cert entry for the private key
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Pkcs.Pkcs12Utilities">
            Utility class for reencoding PKCS#12 files to definite length.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[])">
             Just re-encode the outer layer of the PKCS#12 file to definite length encoding.
            
             @param berPKCS12File - original PKCS#12 file
             @return a byte array representing the DER encoding of the PFX structure
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Pkcs.Pkcs12Utilities.ConvertToDefiniteLength(System.Byte[],System.Char[])">
             Re-encode the PKCS#12 structure to definite length encoding at the inner layer
             as well, recomputing the MAC accordingly.
            
             @param berPKCS12File - original PKCS12 file.
             @param provider - provider to use for MAC calculation.
             @return a byte array representing the DER encoding of the PFX structure.
             @throws IOException on parsing, encoding errors.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Security.AgreementUtilities">
            <remarks>
             Utility class for creating IBasicAgreement objects from their names/Oids
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Security.CipherUtilities">
            <remarks>
             Cipher Utility class contains methods that can not be specifically grouped into other classes.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.CipherUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Security.DigestUtilities">
            <remarks>
             Utility class for creating IDigest objects from their names/Oids
            </remarks>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.DigestUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a given digest mechanism.
            </summary>
            <param name="mechanism">A string representation of the digest meanism.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Security.DotNetUtilities">
            <summary>
            A class containing methods to interface the BouncyCastle world to the .NET Crypto world.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.DotNetUtilities.ToX509Certificate(EnterpriseDT.BouncyCastle.Asn1.X509.X509CertificateStructure)">
            <summary>
            Create an System.Security.Cryptography.X509Certificate from an X509Certificate Structure.
            </summary>
            <param name="x509Struct"></param>
            <returns>A System.Security.Cryptography.X509Certificate.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Security.MacUtilities">
            <remarks>
             Utility class for creating HMac object from their names/Oids
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Security.PbeUtilities">
             <summary>
            
             </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.PbeUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns a ObjectIdentifier for a give encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the Oid is not available.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.SecurityUtilityException.#ctor">
            base constructor.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.SecurityUtilityException.#ctor(System.String)">
             create a SecurityUtilityException with the given message.
            
             @param message the message to be carried with the exception.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Security.SignerUtilities">
            <summary>
             Signer Utility class contains methods that can not be specifically grouped into other classes.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Security.SignerUtilities.GetObjectIdentifier(System.String)">
            <summary>
            Returns an ObjectIdentifier for a given encoding.
            </summary>
            <param name="mechanism">A string representation of the encoding.</param>
            <returns>A DerObjectIdentifier, null if the OID is not available.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Security.WrapperUtilities">
            <remarks>
             Utility class for creating IWrapper objects from their names/Oids
            </remarks>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Arrays">
            <summary> General array utilities.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Arrays.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Are two arrays equal.
            </summary>
            <param name="a">Left side.</param>
            <param name="b">Right side.</param>
            <returns>True if equal.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Arrays.ConstantTimeAreEqual(System.Byte[],System.Byte[])">
            <summary>
            A constant time equals comparison - does not terminate early if
            test will fail.
            </summary>
            <param name="a">first array</param>
            <param name="b">second array</param>
            <returns>true if arrays equal, false otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Arrays.CopyOfRange(System.Byte[],System.Int32,System.Int32)">
             Make a copy of a range of bytes from the passed in data array. The range can
             extend beyond the end of the input array, in which case the return array will
             be padded with zeroes.
            
             @param data the array from which the data is to be copied.
             @param from the start index at which the copying should take place.
             @param to the final index of the range (exclusive).
            
             @return a new byte array containing the range given.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.BigIntegers">
            BigInteger utilities.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.BigIntegers.AsUnsignedByteArray(EnterpriseDT.BouncyCastle.Math.BigInteger)">
             Return the passed in value as an unsigned byte array.
            
             @param value value to be converted.
             @return a byte array without a leading zero byte if present in the signed encoding.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.BigIntegers.AsUnsignedByteArray(System.Int32,EnterpriseDT.BouncyCastle.Math.BigInteger)">
             Return the passed in value as an unsigned byte array of specified length, zero-extended as necessary.
            
             @param length desired length of result array.
             @param n value to be converted.
             @return a byte array of specified length, with leading zeroes as necessary given the size of n.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.BigIntegers.CreateRandomInRange(EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Math.BigInteger,EnterpriseDT.BouncyCastle.Security.SecureRandom)">
            Return a random BigInteger not less than 'min' and not greater than 'max'
            
            @param min the least value that may be generated
            @param max the greatest value that may be generated
            @param random the source of randomness
            @return a random BigInteger value in the range [min,max]
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.MemoableResetException">
            Exception to be thrown on a failure to reset an object implementing Memoable.
            <p>
            The exception extends InvalidCastException to enable users to have a single handling case,
            only introducing specific handling of this one if required.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.MemoableResetException.#ctor(System.String)">
             Basic Constructor.
            
             @param msg message to be associated with this exception.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Strings">
            <summary> General string utilities.</summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Date.DateTimeUtilities.DateTimeToUnixMs(System.DateTime)">
            <summary>
            Return the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC) for a given DateTime value.
            </summary>
            <param name="dateTime">A UTC DateTime value not before epoch.</param>
            <returns>Number of whole milliseconds after epoch.</returns>
            <exception cref="T:System.ArgumentException">'dateTime' is before epoch.</exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Date.DateTimeUtilities.UnixMsToDateTime(System.Int64)">
            <summary>
            Create a DateTime value from the number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
            <param name="unixMs">Number of milliseconds since the epoch.</param>
            <returns>A UTC DateTime value</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Date.DateTimeUtilities.CurrentUnixMs">
            <summary>
            Return the current number of milliseconds since the Unix epoch (1 Jan., 1970 UTC).
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[])">
             encode the input data producing a base 64 encoded byte array.
            
             @return a byte array containing the base 64 encoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a base 64 encoded byte array.
            
             @return a byte array containing the base 64 encoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Encode the byte data to base 64 writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64.Decode(System.Byte[])">
             decode the base 64 encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64.Decode(System.String)">
             decode the base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64.Decode(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Encoders.IEncoder">
            Encode and decode byte arrays (typically from binary to 7-bit ASCII
            encodings).
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64Encoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a base 64 output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64Encoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Base64Encoder.DecodeString(System.String,System.IO.Stream)">
             decode the base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Encoders.BufferedDecoder">
            <summary>
             A buffering class to allow translation from one format to another to
                be done in discrete chunks.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.BufferedDecoder.#ctor(EnterpriseDT.BouncyCastle.Utilities.Encoders.ITranslator,System.Int32)">
            <summary>
            Create a buffered Decoder.
            </summary>
            <param name="translator">The translater to use.</param>
            <param name="bufferSize">The size of the buffer.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.BufferedDecoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">Data in.</param>
            <param name="output">Byte array for the output.</param>
            <param name="outOff">The offset in the output byte array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.BufferedDecoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">The input data.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of data to process from input data array.</param>
            <param name="outBytes">Array to store output.</param>
            <param name="outOff">Position in output array to start writing from.</param>
            <returns>The amount of output bytes.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Encoders.BufferedEncoder">
            <summary>
            A class that allows encoding of data using a specific encoder to be processed in chunks.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.BufferedEncoder.#ctor(EnterpriseDT.BouncyCastle.Utilities.Encoders.ITranslator,System.Int32)">
            <summary>
            Create.
            </summary>
            <param name="translator">The translator to use.</param>
            <param name="bufferSize">Size of the chunks.</param>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.BufferedEncoder.ProcessByte(System.Byte,System.Byte[],System.Int32)">
            <summary>
            Process one byte of data.
            </summary>
            <param name="input">The byte.</param>
            <param name="outBytes">An array to store output in.</param>
            <param name="outOff">Offset within output array to start writing from.</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.BufferedEncoder.ProcessBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Process data from a byte array.
            </summary>
            <param name="input">Input data Byte array containing data to be processed.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="len">Amount of input data to be processed.</param>
            <param name="outBytes">Output data array.</param>
            <param name="outOff">Offset within output data array to start writing to.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Encoders.Hex">
            <summary>
            Class to decode and encode Hex.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[])">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32)">
             encode the input data producing a Hex encoded byte array.
            
             @return a byte array containing the Hex encoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[],System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Hex.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             Hex encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Hex.Decode(System.Byte[])">
             decode the Hex encoded input data. It is assumed the input data is valid.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Hex.Decode(System.String)">
             decode the Hex encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.Hex.Decode(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.HexEncoder.Encode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             encode the input data producing a Hex output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.HexEncoder.Decode(System.Byte[],System.Int32,System.Int32,System.IO.Stream)">
             decode the Hex encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.HexEncoder.DecodeString(System.String,System.IO.Stream)">
             decode the Hex encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Encoders.HexTranslator">
            <summary>
            A hex translator.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Encoders.ITranslator">
            <summary>
            Translator interface.
            </summary>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.HexTranslator.GetEncodedBlockSize">
            <summary>
            Return encoded block size.
            </summary>
            <returns>2</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.HexTranslator.Encode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Encode some data.
            </summary>
            <param name="input">Input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amount of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The offset within the output data array to start writing from.</param>
            <returns>Amount of data encoded.</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.HexTranslator.GetDecodedBlockSize">
            <summary>
            Returns the decoded block size.
            </summary>
            <returns>1</returns>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.HexTranslator.Decode(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Decode data from a byte array.
            </summary>
            <param name="input">The input data array.</param>
            <param name="inOff">Start position within input data array.</param>
            <param name="length">The amounty of data to process.</param>
            <param name="outBytes">The output data array.</param>
            <param name="outOff">The position within the output data array to start writing from.</param>
            <returns>The amount of data written.</returns>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Encoders.UrlBase64">
            Convert binary data to and from UrlBase64 encoding.  This is identical to
            Base64 encoding, except that the padding character is "." and the other 
            non-alphanumeric characters are "-" and "_" instead of "+" and "/".
            <p>
            The purpose of UrlBase64 encoding is to provide a compact encoding of binary
            data that is safe for use as an URL parameter. Base64 encoding does not
            produce encoded values that are safe for use in URLs, since "/" can be 
            interpreted as a path delimiter; "+" is the encoded form of a space; and
            "=" is used to separate a name from the corresponding value in an URL 
            parameter.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.UrlBase64.Encode(System.Byte[])">
             Encode the input data producing a URL safe base 64 encoded byte array.
            
             @return a byte array containing the URL safe base 64 encoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.UrlBase64.Encode(System.Byte[],System.IO.Stream)">
             Encode the byte data writing it to the given output stream.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.Byte[])">
             Decode the URL safe base 64 encoded input data - white space will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.Byte[],System.IO.Stream)">
             decode the URL safe base 64 encoded byte data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.String)">
             decode the URL safe base 64 encoded string data - whitespace will be ignored.
            
             @return a byte array representing the decoded data.
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Encoders.UrlBase64.Decode(System.String,System.IO.Stream)">
             Decode the URL safe base 64 encoded string data writing it to the given output stream,
             whitespace characters will be ignored.
            
             @return the number of bytes produced.
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Encoders.UrlBase64Encoder">
            Convert binary data to and from UrlBase64 encoding.  This is identical to
            Base64 encoding, except that the padding character is "." and the other 
            non-alphanumeric characters are "-" and "_" instead of "+" and "/".
            <p>
            The purpose of UrlBase64 encoding is to provide a compact encoding of binary
            data that is safe for use as an URL parameter. Base64 encoding does not
            produce encoded values that are safe for use in URLs, since "/" can be 
            interpreted as a path delimiter; "+" is the encoded form of a space; and
            "=" is used to separate a name from the corresponding value in an URL 
            parameter.
            </p>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.IO.Streams.PipeAllLimited(System.IO.Stream,System.Int64,System.IO.Stream)">
            <summary>
            Pipe all bytes from <c>inStr</c> to <c>outStr</c>, throwing <c>StreamFlowException</c> if greater
            than <c>limit</c> bytes in <c>inStr</c>.
            </summary>
            <param name="inStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <param name="limit">
            A <see cref="T:System.Int64"/>
            </param>
            <param name="outStr">
            A <see cref="T:System.IO.Stream"/>
            </param>
            <returns>The number of bytes actually transferred, if not greater than <c>limit</c></returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObjectParser.ParseObject(EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject)">
            <param name="obj">
            A <see cref="T:EnterpriseDT.BouncyCastle.Utilities.IO.Pem.PemObject"/>
            </param>
            <returns>
            A <see cref="T:System.Object"/>
            </returns>
            <exception cref="T:System.IO.IOException"></exception>
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Net.IPAddress.IsValid(System.String)">
             Validate the given IPv4 or IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid address, false otherwise
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Net.IPAddress.IsValidWithNetMask(System.String)">
             Validate the given IPv4 or IPv6 address and netmask.
            
             @param address the IP address as a string.
            
             @return true if a valid address with netmask, false otherwise
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv4(System.String)">
             Validate the given IPv4 address.
             
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
        <member name="M:EnterpriseDT.BouncyCastle.Utilities.Net.IPAddress.IsValidIPv6(System.String)">
             Validate the given IPv6 address.
            
             @param address the IP address as a string.
            
             @return true if a valid IPv4 address, false otherwise
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Zlib.ZDeflaterOutputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:EnterpriseDT.BouncyCastle.Utilities.Zlib.ZInflaterInputStream">
            <summary>
            Summary description for DeflaterOutputStream.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.BaseSocket">
            <summary>  
            Socket abstraction that simplifies socket code
            </summary>
            <author>   
            Hans Andersen    
            </author>
            <version>      
            $Revision: 1.31 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.addressFamily">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.socketType">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.protocolType">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.BaseSocket.logTag">
            <summary> Logging tag</summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.#ctor">
            <summary>
            Creates a <c>BaseSocket</c>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the StandardSocket class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Accept(System.Int32)">
            <summary>
            Creates a new Socket for a newly created connection
            </summary>
            <param name="timeout">Accept timeout in milliseconds</param>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.EndAccept(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Bind(System.Net.EndPoint)">
            <summary>
            Associates a Socket with a local endpoint.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Close">
            <summary>
            Closes the Socket connection and releases all associated resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote endpoint
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Connect(System.Net.EndPoint,System.Int32)">
            <summary>
            Establishes a connection to a remote endpoint
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Listen(System.Int32)">
            <summary>
            Places socket in a listening state.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.GetStream">
            <summary>
            Get the stream associated with the socket.
            </summary>
            <remarks>
            The stream returned owns the socket, so closing the
            stream will close the socket
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.GetStream(System.Boolean)">
            <summary>
            Get the stream associated with the socket.
            </summary>
            <param name="ownsSocket">true if the stream owns the socket, false otherwise</param>
            <remarks>
            If ownsSocket is true, the stream returned owns the socket, so closing the
            stream will close the socket. 
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a bound Socket.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.EndReceive(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected Socket.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.BaseSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Sets a Socket option.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.BaseSocket.Connected">
            <summary>
            True if the socket was connected at the last operation
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.BaseSocket.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.BaseSocket.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.StandardSocket">
            <summary>  
            Standard implementation of BaseSocket
            </summary>
            <author>   
            Hans Andersen    
            </author>
            <version>      
            $Revision: 1.31 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.StandardSocket.SOCKET_BUFFER_SIZE">
            <summary>
            Used to set socket ReceiveBuffer and SendBuffer but now obsolete. 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.StandardSocket.socket">
            <summary>
            The real socket this class is wrapping
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the StandardSocket class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the StandardSocket class
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Accept(System.Int32)">
            <summary>
            Creates a new Socket for a newly created connection
            </summary>
            <param name="timeout">Accept timeout in milliseconds</param>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.EndAccept(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Bind(System.Net.EndPoint)">
            <summary>
            Associates a Socket with a local endpoint.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Close">
            <summary>
            Closes the Socket connection and releases all associated resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote endpoint
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Connect(System.Net.EndPoint,System.Int32)">
            <summary>
            Establishes a connection to a remote endpoint
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Listen(System.Int32)">
            <summary>
            Places socket in a listening state.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.GetStream">
            <summary>
            Get the stream associated with the socket.
            </summary>
            <remarks>
            The stream returned owns the socket, so closing the
            stream will close the socket. 
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.GetStream(System.Boolean)">
            <summary>
            Get the stream associated with the socket.
            </summary>
            <param name="ownsSocket">true if the stream owns the socket, false otherwise</param>
            <remarks>
            If ownsSocket is ture, the stream returned owns the socket, so closing the
            stream will close the socket. 
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a bound Socket.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.EndReceive(System.IAsyncResult)">
            <summary>
            
            </summary>
            <param name="asyncResult"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected Socket.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="size"></param>
            <param name="socketFlags"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.StandardSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Sets a Socket option.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.StandardSocket.Connected">
            <summary>
            True if the socket was connected at the last operation
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.StandardSocket.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.StandardSocket.RemoteEndPoint">
            <summary>
            Gets the remote end-point.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.StandardSocket.Socket">
            <summary>
            Gets plain .NET socket
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.HostNameResolver">
            <summary>
            Utility class for resolving names on all versions of the .NET framework.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.HostNameResolver.IP_ADDRESS_REGEX">
            <summary>
            Used for determining whether a host-name is actually an IP address.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.HostNameResolver.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.HostNameResolver.GetAddress(System.String)">
            <summary>
            Returns the IP address matching the given host-name or IP address-string.
            </summary>
            <param name="hostName">Host-name or IP address-string.</param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.BandwidthThrottler">
            <summary>  
            Helps throttle bandwidth for transfers
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.4 $
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.UnixFileParser2">
            <summary>  
            Custom file parser for an unusual Unix FTP server that returns LIST listings 
            in the form of -r-------- GMETECHNOLOGY 1 TSI         8 Nov 06 11:00:25 ,GMETECHNOLOGY,file02.csv,U,20071106A00001105190.txt
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.4 $
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileParser">
            <summary>  
            Root class of all file parsers
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.14 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileParser.parserCulture">
            <summary>Culture used for parsing file details</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileParser.IsMultiLine">
            <summary>
            Does this parser parse multiple lines to get one listing?
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileParser.Parse(System.String)">
            <summary> 
            Parse server supplied string
            </summary>
            <param name="raw">  raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileParser.ParsingCulture">
            <summary>
            Get/set the culture info for parsing
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.SYMLINK_ARROW">
            <summary> Symbolic link symbol</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.SYMLINK_CHAR">
            <summary> Indicates symbolic link</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.ORDINARY_FILE_CHAR">
            <summary> Indicates ordinary file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.DIRECTORY_CHAR">
            <summary> Indicates directory</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format1a">
            <summary>Date format 1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format1b">
            <summary>Date format 1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2a">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2b">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2c">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2d">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.MIN_FIELD_COUNT">
            <summary> Minimum number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format1">
            <summary>array of format 1 formats</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.format2">
            <summary>array of format 2 formats</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser2.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser2.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser2.Parse(System.String)">
            <summary> 
            Parse server supplied string, e.g.:
            
            -r-------- GMETECHNOLOGY 1 TSI         8 Nov 06 11:00:25 ,GMETECHNOLOGY,file02.csv,U,20071106A00001105190.txt
            
            </summary>
            <param name="raw">  raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.UnixFileParser2.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings">
            <summary>  
            Contains fragments of server replies that indicate no files were 
            found in a supplied directory.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.4 $</version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ServerStrings">
            <summary>  
            Manages strings that match various FTP server replies for
            various situations. The strings are not exact copies of server
            replies, but rather fragments that match server replies (so that
            as many servers as possible can be supported). All fragments are
            managed internally in upper case to make matching faster.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.4 $</version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Add(System.String)">
            <summary>
            Add the string to the collection.
            </summary>
            <param name="str">String to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.AddRange(System.String[])">
            <summary>
            Add all the strings to the collection.
            </summary>
            <param name="strs">Strings to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Contains(System.String)">
            <summary>
            Returns <c>true</c> if the given string is already in the collection.
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.CopyTo(System.String[],System.Int32)">
            <summary>
            Copy all the strings in the collection to the <c>array</c> starting at the given index.
            </summary>
            <param name="array">Array to which to add strings.</param>
            <param name="index">Index at which to start adding.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.IndexOf(System.String)">
            <summary>
            Returns the index of the given string or <c>-1</c> if it's not in the collection.
            </summary>
            <param name="str">String to look for.</param>
            <returns>Index of the given string or <c>-1</c> if it's not in the collection.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Insert(System.Int32,System.String)">
            <summary>
            Inserts the given string into the collection at the given index.
            </summary>
            <param name="index">Index at which to add the string.</param>
            <param name="str">String to insert.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Remove(System.String)">
            <summary>
            Remove the given string from the collection.
            </summary>
            <param name="str">String to remove.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.Matches(System.String)">
            <summary>
            Returns true if any fragment is found in the supplied string
            </summary>
            <param name="reply">server reply to test for matches</param>
            <returns>true for a match, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ServerStrings.OnMemberChanged">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerStrings.Item(System.Int32)">
            <summary>
            Gets a reference to a string at the given index.
            </summary>
            <param name="index">Index</param>
            <returns>String at the given index.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerStrings.PropertyChangeHandler">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.NO_FILES">
            <summary>
            Server string indicating no files found (NO_FILES)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.NO_FILES_FOUND">
            <summary>
            Server string indicating no files found (NO_FILES_FOUND) - Serv-U
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.NO_SUCH_FILE_OR_DIR">
            <summary>
            Server string indicating no files found (wu-ftpd) (NO_SUCH_FILE_OR_DIR)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.EMPTY_DIR">
            <summary>
            Server string indicating no files found (EMPTY_DIR)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.NO_DATA_SETS_FOUND">
            <summary>
            Server string for OS/390 indicating no files found (NO_DATA_SETS_FOUND)
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.DirectoryEmptyStrings.#ctor">
            <summary>
            Constructor. Adds the fragments to match on
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExEventAggregator.SetConnectionInstance(System.Object,EnterpriseDT.Net.Ftp.FTPEventArgs)">
            <summary>
            Sets the <see cref="P:EnterpriseDT.Net.Ftp.FTPEventArgs.ConnectionInstanceNumber"/> property of e.
            </summary>
            <param name="sender">(Usually) the ExFTPConnection</param>
            <param name="e">Event-args object to be set.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ExFTPActiveDataSocket">
            <summary>
            Active data socket handling class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPActiveDataSocket">
            <summary>  
            Active data socket handling class
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.18 $
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDataSocket">
            <summary>  Interface for data socket classes, whether active or passive
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.14 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPDataSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPDataSocket.sock">
            <summary>  
            The underlying socket 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPDataSocket.timeout">
            <summary>  
            The timeout for the sockets
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPDataSocket.tcpBufferSize">
            <summary>  
            TCP read and write buffer size
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPDataSocket.SetSocketTimeout(EnterpriseDT.Net.BaseSocket,System.Int32)">
            <summary>  
            Helper method to set a socket's timeout value
            </summary>
            <param name="sock">socket to set timeout for
            </param>
            <param name="timeout">timeout value to set
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPDataSocket.SetSocketBuffers(EnterpriseDT.Net.BaseSocket,System.Int32)">
            <summary>  
            Helper method to set a socket's read/write buffer sizes
            </summary>
            <param name="sock">
            socket to set timeout for
            </param>
            <param name="size">
            buffer size to set
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPDataSocket.Close">
            <summary>  Closes underlying socket(s)</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDataSocket.Timeout">
            <summary>   
            Get/Set the TCP timeout on the underlying control socket.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDataSocket.TCPBufferSize">
            <summary>   
             TCP read/write buffer size on the underlying sockets
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDataSocket.LocalPort">
            <summary> 
            Returns the local port to which this socket is bound. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDataSocket.DataStream">
            <summary>  
            Get the appropriate stream for reading or writing to
            </summary>
            <returns>  
            input or output stream for underlying socket.
            </returns>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.acceptedSock">
            <summary>  
            The socket accepted from server
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.#ctor(EnterpriseDT.Net.BaseSocket)">
            <summary>  
            Constructor
            </summary>
            <param name="sock">   the server socket to use
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.AcceptConnection">
            <summary> 
            Waits for a connection from the server and then sets the timeout
            when the connection is made.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.Close">
            <summary>
            Closes underlying sockets
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.Timeout">
            <summary>   
            Set the TCP timeout on the underlying data socket(s).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.TCPBufferSize">
            <summary>   
             TCP read/write buffer size on the underlying sockets
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPActiveDataSocket.DataStream">
            <summary>  
            Accepts the FTP server's connection and returns the socket's stream.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ExFTPClient">
            <summary>
            Provides low-level access to extended FTP operations.  <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>
            provides a superior interface and is recommended for general use.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPClient">
            <summary>  
            Provides low-level access to FTP operations.  <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/>
            provides a superior interface and is recommended for general use.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.153 $</version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.IFileTransferClient">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Connect">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Quit">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.QuitImmediately">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.TestConnection">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Get(System.IO.Stream,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Get(System.String,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Get(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.Byte[],System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.String,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.IO.Stream,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.CdUp">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.ChDir(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Dir">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Dir(System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Dir(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.DirDetails(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.DirDetails(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.DirDetails">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.MkDir(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Pwd">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.RmDir(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Exists(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Delete(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.ModTime(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.SetModTime(System.String,System.DateTime)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Rename(System.String,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Size(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.CancelResume">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.CancelTransfer">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.Resume">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFileTransferClient.ResumeDownload(System.Int64)">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.CloseStreamsAfterTransfer">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.ControlPort">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.DeleteOnFailure">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.IsConnected">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.RemoteHost">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.Timeout">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferBufferSize">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferNotifyInterval">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferNotifyListings">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferType">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.ShowHiddenFiles">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.WelcomeMessage">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.LastBytesTransferred">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.LastFileTransferred">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IFileTransferClient.IsResuming">
            <summary/>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.IFileTransferClient.BytesTransferred">
            <summary/>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferCompleteEx">
            <summary/>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.IFileTransferClient.TransferStartedEx">
            <summary/>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.DEFAULT_MONITOR_INTERVAL">
            <summary> Default byte interval for transfer monitor</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.DEFAULT_BUFFER_SIZE">
            <summary> Default transfer buffer size</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.DEFAULT_TIME_FORMAT">
            <summary>
            Default time format.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.majorVersion">
            <summary> Major version (substituted by ant)</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.middleVersion">
            <summary> Middle version (substituted by ant)</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.minorVersion">
            <summary> Middle version (substituted by ant)</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.version">
            <summary> Full version</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.buildTimestamp">
            <summary> Timestamp of build</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.BINARY_CHAR">
            <summary>  
            The char sent to the server to set BINARY
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.ASCII_CHAR">
            <summary>  
            The char sent to the server to set ASCII
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.SHORT_TIMEOUT">
            <summary>
            Short value for a timeout
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.dirEmptyStrings">
            <summary>
            Matcher for directory empty
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.transferCompleteStrings">
            <summary>
            Matcher for transfer complete
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.fileNotFoundStrings">
            <summary>
            Matcher for file not found
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.modtimeFormats">
            <summary>
            Four formats are provided because the fractional digits are optional.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.logTag">
            <summary> Logging tag</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.control">
            <summary>  Socket responsible for controlling
            the connection
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.data">
            <summary>  Socket responsible for transferring
            the data
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.timeout">
            <summary>  Socket timeout for both data and control. In
            milliseconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.tcpBufferSize">
            <summary>  TCP read and write buffer size
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.noOperationInterval">
            <summary>
            Interval for NOOP calls during large transfers in seconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.strictReturnCodes">
            <summary> Use strict return codes if true</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.cancelTransfer">
            <summary>  Can be used to cancel a transfer</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.transferNotifyListings">
            <summary>  Should BytesTransferred event be triggered in directory listings?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.resume">
            <summary> If true, a file transfer is being resumed</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.deleteOnFailure">
            <summary>If a download to a file fails, delete the partial file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.mdtmSupported">
            <summary>
            MDTM supported flag
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.sizeSupported">
            <summary>
            SIZE supported flag
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.resumeMarker">
            <summary> Resume byte marker point</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.showHiddenFiles">
            <summary>
            Include hidden files in operations
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.monitorInterval">
            <summary> Bytes transferred in between monitor callbacks</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.transferBufferSize">
            <summary> Size of transfer buffers</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.parserCulture">
            <summary>Culture used for parsing file details</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.fileFactory">
            <summary> Parses LIST output</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.transferType">
            <summary>  Record of the transfer type - make the default ASCII</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.connectMode">
            <summary>  Record of the connect mode - make the default PASV (as this was
            the original mode supported)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.synchronizePassiveConnections">
            <summary>
            Synchronize PASV socket connections if true (false by default)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.activePortRange">
            <summary>
            Port range for active mode
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.activeIPAddress">
            <summary>
            IP address to send with active mode
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.welcomeMessage">
            <summary>
            Server welcome message.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.lastValidReply">
            <summary>
            Holds the last valid reply from the server on the control socket
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.lastBytesTransferred">
            <summary>
            Holds the number of bytes transferred in that most recent transfer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.lastFileTransferred">
            <summary>
            Name of the last file transferred.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.controlPort">
            <summary>
            Port on which we connect to the FTP server and messages are passed
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.remoteHost">
            <summary>
            Remote host we are connecting to
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.autoPassiveIPSubstitution">
            <summary>
            If true, uses the original host IP if an internal IP address
            is returned by the server in PASV mode.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.closeStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>
            The default is <c>true</c>.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.controlEncoding">
            <summary>
            The encoding to use when dealing with file and directory paths.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.dataEncoding">
            <summary>
            The encoding to use for ASCII transfers.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPClient.throttler">
            <summary>
            Threshold for throttling
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.String)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteHost">The domain-name or IP address of the FTP server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.String,System.Int32)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteHost">The domain-name or IP address of the FTP server.</param>
            <param name="controlPort">The port for control stream (-1 for default port).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.String,System.Int32,System.Int32)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteHost">The domain-name or IP address of the FTP server.</param>
            <param name="controlPort">The port for control stream (-1 for default port).</param>
            <param name="timeout">The length of the timeout in milliseconds (pass in 0 for no timeout)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.Net.IPAddress)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteAddr">The address of the FTP server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteAddr">The address of the FTP server.</param>
            <param name="controlPort">The port for control stream (-1 for default port).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor(System.Net.IPAddress,System.Int32,System.Int32)">
            <summary>Constructs an <c>FTPClient</c> instance and connects to the FTP server.</summary>
            <param name="remoteAddr">The address of the FTP server.</param>
            <param name="controlPort">The port for control stream (-1 for default port).</param>
            <param name="timeout">The length of the timeout in milliseconds (pass in 0 for no timeout)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#ctor">
            <summary>Constructs an <c>FTPClient</c>.</summary>
            <remarks>
            The <c>FTPClient</c> will not connect to the FTP server until <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Connect"/> is called.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.InitBlock">
            <summary>  
            Instance initializer. Sets formatter to GMT.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Connect">
            <summary>Connect to the FTP server.</summary>
            <remarks>
            <para>
            The <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.RemoteHost"/> property must be set prior to calling this method.
            This method must be called before <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Login(System.String,System.String)"/> or <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.User(System.String)"/>
            is called.
            </para>
            <para>
            This method will throw an <c>FTPException</c> if the client is already connected to the server.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.InitializeControlSocket">
            <summary>Set the control socket explicitly.</summary>
            <param name="control">Control socket reference.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CheckConnection(System.Boolean)">
            <summary> 
            Checks if the client has connected to the server and throws an exception if it hasn't.
            This is only intended to be used by subclasses
            </summary>
            <throws>FTPException Thrown if the client has not connected to the server. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.DebugResponses(System.Boolean)">
            <summary>Switch debug of responses on or off</summary>
            <param name="on"><c>true</c> if you wish to have responses to
            the log stream, <c>false</c> otherwise.</param>
            <deprecated>
            Use the <see cref="T:EnterpriseDT.Util.Debug.Logger"/> class to 
            switch debugging on and off.
            </deprecated>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Login(System.String,System.String)">
            <summary>Login into an account on the FTP server using the user-name and password provided.</summary>
            <remarks>This
            call completes the entire login process. Note that
            <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Connect"/> must be called first.</remarks>
            <param name="user">User-name.</param>
            <param name="password">Password.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.User(System.String)">
            <summary>
            Supply the user-name to log into an account on the FTP server. 
            Must be followed by the <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Password(System.String)"/> method.
            Note that <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Connect"/> must be called first. 
            </summary>
            <param name="user">User-name.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Password(System.String)">
            <summary>
            Supplies the password for a previously supplied
            user-name to log into the FTP server. Must be
            preceeded by the <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.User(System.String)"/> method
            </summary>
            <param name="password">Password.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Account(System.String)">
            <summary>
            Supply account information string to the server. 
            </summary>
            <remarks>
            This can be used for a variety of purposes - for example, the server could
            indicate that a password has expired (by sending 332 in reply to
            PASS) and a new password automatically supplied via ACCT. It
            is up to the server how it uses this string.
            </remarks>
            <param name="accountInfo">account information</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Quote(System.String,System.String[])">
            <summary>Issue arbitrary ftp commands to the FTP server.</summary>
            <param name="command">FTP command to be sent to server.</param>
            <param name="validCodes">Valid return codes for this command.</param>
            <returns>The text returned by the FTP server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetPASVAddress(System.String)">
            <summary>
            Get the PASV address string (including port numbers)
            </summary>
            <param name="pasvReply">PASV reply sent by server</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.SendCommand(System.String)">
            <summary>
            Send a command to the server and get the reply
            </summary>
            <param name="command">command</param>
            <returns>reply object</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ValidateReply(EnterpriseDT.Net.Ftp.FTPReply,System.String)">
            <summary>
            Validate an FTPReply 
            </summary>
            <param name="reply">reply object</param>
            <param name="expectedReplyCode">expected code</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ValidateReply(EnterpriseDT.Net.Ftp.FTPReply,System.String[])">
            <summary>
            Validate an FTPReply 
            </summary>
            <param name="reply">reply object</param>
            <param name="expectedReplyCodes">expected codes</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Size(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <remarks>
            This is not a standard FTP command, it is defined in "Extensions to FTP", a draft RFC 
            (draft-ietf-ftpext-mlst-16.txt).
            </remarks>
            <param name="remoteFile">Name or path of remote file in current directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Resume">
            <summary>Make the next file transfer (put or get) resume.</summary>
            <remarks>
            <para>
            For puts, the
            bytes already transferred are skipped over, while for gets, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
            <throws>FTPException</throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ResumeDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CancelResume">
            <summary> 
            Cancel the resume. Use this method if something goes wrong
            and the server is left in an inconsistent state
            </summary>
            <throws>  SystemException </throws>
            <throws>  FTPException </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Restart(System.Int64)">
            <summary>Set the REST marker so that the next transfer doesn't start at the beginning of the remote file</summary>
            <remarks>
            Issue the RESTart command to the remote server. This indicates the byte
            position that REST is performed at. For put, bytes start at this point, while
            for get, bytes are fetched from this point.
            </remarks>
            <param name="size">the REST param, the mark at which the restart is performed on the remote file. 
            For STOR, this is retrieved by SIZE</param>
            <throws>SystemException </throws>
            <throws>FTPException </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.String,System.String)">
            <summary>
            Put a local file onto the FTP server in the current directory.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.IO.Stream,System.String)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.String,System.String,System.Boolean)">
            <summary>
            Put a local file onto the FTP server in the current directory. Allows appending
            if current file exists.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.  Allows appending
            if current file exists
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ValidateTransfer">
            <summary>Validate that the Put() or get() was successful.</summary>
            <remarks>This method is not for general use. If it is called explicitly after
            a transfer, the connection will hang.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ValidateTransferOnError">
            <summary>
            Validate a transfer when an error has occurred on the data channel.
            Set a very short transfer in case things have hung. Set it back
            at the end.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CloseDataSocket">
            <summary>Close the data socket</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.SendServerWakeup(System.DateTime)">
            <summary>
            If required, send a server wakeup message
            </summary>
            <remarks>A NOOP message is sent to the server</remarks>
            <param name="start">time the interval started</param>
            <returns>if a wakeup was sent, a new interval start time, 
            otherwise the one passed in</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.InitPut(System.String,System.Boolean)">
            <summary>Request the server to set up the put.</summary>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.PutASCII(System.String,System.String,System.Boolean)">
            <summary>
            Put as ASCII, i.e. read a line at a time and write
            inserting the correct FTP separator.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.PutASCII(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            <summary>
            Put as ASCII, i.e. read a line at a time and write
            inserting the correct FTP separator.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Unput stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
            <param name="alwaysCloseStreams"><c>true if a local file is being put</c></param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.PutBinary(System.String,System.String,System.Boolean)">
            <summary>Put as binary, i.e. read and write raw bytes.</summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.PutBinary(System.IO.Stream,System.String,System.Boolean,System.Boolean)">
            <summary>Put as binary, i.e. read and write raw bytes.</summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise</param>
            <param name="alwaysCloseStreams"><c>true if a local file is being put</c></param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.Byte[],System.String)">
            <summary>
            Put data onto the FTP server in the current directory.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary>
            Put data onto the FTP server in the current directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Get(System.String,System.String)">
            <summary>
            Get data from the FTP server using the currently
            set transfer mode.
            </summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Get(System.IO.Stream,System.String)">
            <summary>
            Get data from the FTP server, using the currently
            set transfer mode.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.InitGet(System.String)">
            <summary>Request to the server that the get is set up.</summary>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetASCII(System.String,System.String)">
            <summary>
            Get as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetASCII(System.IO.Stream,System.String)">
            <summary>
            Get as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetBinary(System.String,System.String)">
            <summary>Get as binary file, i.e. straight transfer of data.</summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetBinary(System.IO.Stream,System.String)">
            <summary>Get as binary file, i.e. straight transfer of data.</summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Stream to write to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Get(System.String)">
            <summary>Get data from the FTP server.</summary>
            <remarks>
            Transfers in whatever mode we are in. Retrieve as a byte array. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.
            </remarks>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Site(System.String)">
            <summary>Run a site-specific command on the server.</summary>
            <remarks>
            Support for commands is dependent on the server.
            </remarks>
            <param name="command">The site command to run</param>
            <returns><c>true</c> if command ok, <c>false</c> if command not implemented.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.DirDetails">
            <summary>
            List the current directory's contents as an array of FTPFile objects.
            </summary>
            <remarks>
            This works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (support@enterprisedt.com).
            </remarks>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.DirDetails(System.String)">
            <summary>
            List a directory's contents as an array of FTPFile objects.
            </summary>
            <remarks>
            This works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (support@enterprisedt.com). Note that for some
            servers, this will not work from the parent directory of dirname. You
            need to ChDir() into dirname and use DirDetails() (with no arguments).
            </remarks>
            <param name="dirname">Name of directory OR filemask (if supported by the server).</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.DirDetails(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            List a directory's contents as an array of FTPFile objects.
            </summary>
            <remarks>
            This works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (support@enterprisedt.com). Note that for some
            servers, this will not work from the parent directory of dirname. You
            need to ChDir() into dirname and use DirDetails() (with no arguments).
            </remarks>
            <param name="dirname">Name of directory OR filemask (if supported by the server).</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Dir">
            <summary>
            List current directory's contents as an array of strings of
            filenames.
            </summary>
            <returns>An array of current directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Dir(System.String)">
            <summary>
            List a directory's contents as an array of strings of filenames.
            </summary>
            <param name="dirname">Name of directory OR filemask.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Dir(System.String,System.Boolean)">
            <summary>
            List a directory's contents as an array of strings.
            </summary>
            <remarks>
            If <c>full</c> is <c>true</c> then a detailed
            listing if returned (if available), otherwise just filenames are provided.
            The detailed listing varies in details depending on OS and
            FTP server. Note that a full listing can be used on a file
            name to obtain information about a file. The <c>ShowHiddenFiles</c> flag
            can be used to request that hidden files be returned in the listing. Servers may
            or may not support this.
            </remarks> 
            <param name="dirname">Name of directory OR filemask.</param>
            <param name="full"><c>true</c> if detailed listing required, <c>false</c> otherwise.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadListingData(System.String,System.Text.Encoding,EnterpriseDT.Net.Ftp.FTPClient.LineCallback,System.Object)">
            <summary>
            Reads the listing data for a particular encoding
            </summary>
            <param name="enc">encoding</param>
            <returns>array of listing lines</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadASCIIListingData(System.String,EnterpriseDT.Net.Ftp.FTPClient.LineCallback,System.Object)">
            <summary>
            Reads the listing data for ASCII encoding.
            </summary>
            <remarks>Skips non-ASCII chars found in the stream</remarks>
            <returns>array of listing lines</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadChunk(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Attempts to read a specified number of bytes from the given 
            <code>BufferedStream</code> and place it in the given byte-array.
            </summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>Stream</code> to read from.</param>
            <param name="chunk">The byte-array to place read bytes in.</param>
            <param name="chunksize">Number of bytes to read.</param>
            <returns>Number of bytes actually read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadChar(System.IO.StreamReader)">
            <summary>Attempts to read a single character from the given <code>StreamReader</code>.</summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>StreamReader</code> to read from.</param>
            <returns>The character read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ReadLine(System.IO.StreamReader)">
            <summary>
            Attempts to read a single line from the given <code>StreamReader</code>. 
            </summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>StreamReader</code> to read from.</param>
            <returns>The string read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Delete(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="remoteFile">Name of remote file to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Rename(System.String,System.String)">
            <summary>Rename a file or directory.</summary>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">Intended name.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.RmDir(System.String)">
            <summary>Delete the specified remote working directory.</summary>
            <param name="dir">Name of remote directory to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.MkDir(System.String)">
            <summary>Create the specified remote working directory.</summary>
            <param name="dir">Name of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ChDir(System.String)">
            <summary>Change the remote working directory to that supplied.</summary>
            <param name="dir">Name of remote directory to change to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.CdUp">
            <summary>Change the remote working directory to the parent directory.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <param name="remoteFile">Path of file.</param>
            <returns><c>true</c> if the file exists and <c>false</c> otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.ModTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="remoteFile">Name of remote file.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.SetModTime(System.String,System.DateTime)">
            <summary>Sets the modification time of a remote file.</summary>
            <remarks>
            Although times are passed to the server with second precision, some
            servers may ignore seconds and only provide minute precision.  
            May not be supported by some FTP servers.
            </remarks>
            <param name="remoteFile">Name of remote file.</param>
            <param name="modTime">Desired modification-time to set in local time.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Pwd">
            <summary>Get the current remote working directory.</summary>
            <returns>The current working directory.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Features">
            <summary>Get the server supplied features.</summary>
            <returns>
            <c>string</c>-array containing server features, or <c>null</c> if no features or not supported.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.GetSystem">
            <summary>Get the type of the OS at the server.</summary>
            <returns>The type of server OS.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.NoOperation">
            <summary>  
            Send a "no operation" message that does nothing, which can
            be called periodically to prevent the connection timing out.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Help(System.String)">
            <summary>  Get the help text for the specified command
            
            </summary>
            <param name="command"> name of the command to get help on
            </param>
            <returns> help text from the server for the supplied command
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Abort">
            <summary>Abort the current action.</summary>
            <remarks>
            This does not close the FTP session.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.TestConnection">
            <summary>
            Tests the connection
            </summary>
            <returns>true if connection ok</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.Quit">
            <summary>Quit the FTP session by sending a <c>QUIT</c> command before closing the socket.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.QuitImmediately">
            <summary>
            Quit the FTP session immediately by closing the control socket
            without sending the <c>QUIT</c> command.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPClient.#cctor">
            <summary>Work out the version array.</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.Version">
            <summary>The version of edtFTPj.</summary>
            <value>An <c>int</c> array of <c>{major,middle,minor}</c> version numbers.</value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.BuildTimestamp">
            <summary>The edtFTPj build timestamp.</summary>
            <value>
            Timestamp of when edtFTPj was build in the format <c>d-MMM-yyyy HH:mm:ss z</c>.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.StrictReturnCodes">
            <summary>Controls whether or not checking of return codes is strict.</summary>
            <remarks>
            <para>
            Some servers return non-standard reply-codes.  Setting this property to <c>false</c>
            only the first digit of the reply-code is checked, thus decreasing the sensitivity
            of edtFTPj to non-standard reply-codes.  The default is <c>true</c> meaning that
            reply-codes must match exactly.
            </para>
            </remarks>
            <value>  
            <c>true</c> if strict return code checking, <c>false</c> if non-strict.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.Timeout">
            <summary> 
            TCP timeout on the underlying sockets, in milliseconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TCPBufferSize">
            <summary> 
            TCP read/write buffer size on the underlying sockets.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.Connected">
            <summary>  
            Is the client currently connected?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ConnectMode">
            <summary>
            The connection-mode (passive or active) of data-channels.
            </summary>
            <remarks>
            <para>
            When the connection-mode is active, the server will initiate connections
            to the client, meaning that the client must open a socket and wait for the
            server to connect to it.  This often causes problems if the client is behind
            a firewall.
            </para>
            <para>
            When the connection-mode is passive, the client will initiates connections
            to the server, meaning that the client will connect to a particular socket
            on the server.  This is generally used if the client is behind a firewall.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.IsConnected">
            <summary>
            Indicates whether the client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.SynchronizePassiveConnections">
            <summary> 
            For cases where your FTP server does not properly manage PASV connections,
            it may be necessary to synchronize the creation of passive data sockets.
            It has been reported that some FTP servers (such as those at Akamai) 
            appear to get confused when multiple FTP clients from the same IP address
            attempt to connect at the same time. The default value for 
            SynchronizePassiveConnections is false.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.FTPClient.BytesTransferred"/> event.
            </summary>
            <remarks>
            Reduce this value to receive more frequent notifications of transfer progress.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferBufferSize">
            <summary>
            The size of the buffers (in bytes) used in writing to and reading from the data-sockets.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.RemoteHost">
            <summary>
            The domain-name or IP address of the FTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the FTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ControlPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>Most FTP servers use port 21 (the default)</para>
            <para>This property may only be set if not currently connected.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ParsingCulture">
            <summary>The culture for parsing file listings.</summary>
            <remarks>
            The <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.DirDetails(System.String)"/> method parses the file listings returned.  The names of the file
            can contain a wide variety of characters, so it is sometimes necessary to set this
            property to match the character-set used on the server.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ControlEncoding">
            <summary>
            The encoding to use when dealing with file and directory paths.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.DataEncoding">
            <summary>
            The encoding to use for data when transferring in ASCII mode.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.FTPFileFactory">
            <summary>
            Override the chosen file factory with a user created one - meaning
            that a specific parser has been selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TimeDifference">
            <summary>
            Time difference between server and client (relative to client).
            </summary>
            <remarks>
            The time-difference is relative to the server such that, for example, if the server is
            in New York and the client is in London then the difference would be -5 hours 
            (ignoring daylight savings differences).  This property only applies to FTP and FTPS.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TimeIncludesSeconds">
            <summary>
            Indicates whether seconds were included in the most recent directoy listing.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.WelcomeMessage">
            <summary>
            Server welcome message.
            </summary>
            <remarks>Only valid after connection.  May be accessed prior to login.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.LastValidReply">
            <summary>The latest valid reply from the server.</summary>
            <value>
            Reply object encapsulating last valid server response.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.LastBytesTransferred">
            <summary>
            The number of bytes transferred in the last transfer operation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.LastFileTransferred">
            <summary>
            The remote name/path of the last file transferred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>BINARY</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ActivePortRange">
            <summary>
            Port range for active mode, used only if it is
            necessary to limit the ports to a narrow range specified
            in a firewall
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ActiveIPAddress">
            <summary>
            Force the PORT command to send a fixed IP address, used only for
            certain firewalls
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.AutoPassiveIPSubstitution">
            <summary>
            Use <c>AutoPassiveIPSubstitution</c> to ensure that 
            data-socket connections are made to the same IP address
            that the control socket is connected to.
            </summary>
            <remarks>
            <para>
            <c>AutoPassiveIPSubstitution</c> is useful in passive mode when the 
            FTP server is supplying an incorrect IP address to the client for 
            use in creating data connections (directory listings and file 
            transfers), e.g. an internal IP address that is not accessible from 
            the client. Instead, the client will use the IP address obtained 
            from the FTP server's hostname.
            </para>
            <para>
            This usually happens when an FTP server is behind
            a NAT router and has not been configured to reflect the fact that
            its internal (LAN) IP address is different from the address that
            external (Internet) machines connect to.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.CloseStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>The default is <c>true</c>.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.ServerWakeupInterval">
            <summary>
            The interval in seconds that the server is sent a wakeup message during
            large transfers.
            </summary>
            <remarks>During very large transfers some servers timeout, meaning
            that the transfer is not correctly completed. If this value is
            set to 0, no wakeup messages are sent. Note that many servers can't
            cope with a NOOP sent during a transfer, so only set this property if
            you are having timeout problems with very large transfers. It can result
            in receiving replies to NOOP with subsequent commands, so use with
            caution and check your log files.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferNotifyListings">
            <summary>
            By default the BytesTransferred event is not triggered during directory 
            listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.DirectoryEmptyMessages">
            <summary>
            Holds fragments of server messages that indicate a directory
            is empty
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a directory is empty, which
            is normally used by DirDetails. If an FTP server is returning a different
            message that still clearly indicates a directory is empty, use this
            property to add a new server fragment to the repository via the Add method.
            It would be helpful to email support at enterprisedt dot com to inform 
            us of the message so it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.FileNotFoundMessages">
            <summary>
            Holds fragments of server messages that indicate a file was not found
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a file was not found. 
            If an FTP server is returning a different message that still clearly 
            indicates a file was not found, use this property to add a new server 
            fragment to the repository via the Add method. It would be helpful to
            email support at enterprisedt dot com to inform us of the message so
            it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.TransferCompleteMessages">
            <summary>
            Holds fragments of server messages that indicate a transfer completed.
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a transfer completed.
            If an FTP server is returning a different message that still clearly 
            indicates the transfer complete, use this property to add a new server 
            fragment to the repository via the Add method. It would be helpful to
            email support at enterprisedt dot com to inform us of the message so
            it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.IsResuming">
            <summary>
            Returns <c>true</c> if the next transfer is to be resumed (i.e. <see cref="M:EnterpriseDT.Net.Ftp.FTPClient.Resume"/> has been called).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPClient.LogTag">
            <summary>Log tag</summary>
            <remarks>Must be set immediately after construction</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.TransferStarted">
            <summary>
            Notifies of the start of a transfer.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.TransferStartedEx">
            <summary>
            Notifies of the start of a transfer, and supplies more details than <see cref="E:EnterpriseDT.Net.Ftp.FTPClient.TransferStarted"/>
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.TransferComplete">
            <summary>
            Notifies of the completion of a transfer.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.TransferCompleteEx">
            <summary>
            Notifies of the completion of a transfer, and supplies more details than <see cref="E:EnterpriseDT.Net.Ftp.FTPClient.TransferComplete"/>
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.BytesTransferred">
            <summary>
            Event triggered every time <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.TransferNotifyInterval"/> bytes transferred.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.CommandSent">
            <summary>
            Triggered every time a command is sent to the server.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.ReplyReceived">
            <summary>
            Triggered every time a reply is received from the server.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPClient.CommandError">
            <summary>
            Occurs when there is an error while a command was being sent or
            a reply was being received.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.IExFileTransferClient">
            <summary>
            Interface containing methods common to "Extended Feature" FTP clients.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.GetLocalCRC(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC-32 checksum for the named local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.GetRemoteCRC(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC-32 checksum for the named remote file. Not supported
            by all servers (requires the XCRC command).
            </summary>
            <param name="path"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are <c>?</c> for single characters and <c>*</c> for multiple characters</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in a remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IExFileTransferClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.SocksContext">
            <summary>
            Settings for SOCKS proxy.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>ExFTPConnection</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.SocksContext"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <see cref="T:EnterpriseDT.Util.Socks.Socks4Context"/> or 
            <see cref="T:EnterpriseDT.Util.Socks.Socks5Context"/>.
            For example, for SOCKS4:
            </para>
            <code>
                   myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
                   Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
                   socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
                   socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
                   myFTPClient.SocksContext = socksContext;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.IExFileTransferClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <!-- Badly formed XML comment ignored for member "P:EnterpriseDT.Net.Ftp.IExFileTransferClient.MaxTransferRate" -->
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.socks">
            <summary>
            SOCKS settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.proxySettings">
            <summary>
            Proxy settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.forceConnectModeExtensions">
            <summary>
            Force use of EPRT and EPSV?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.isModeZ">
            <summary>
            Is this connection in MODE Z?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.key">
            <summary>
            License key
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPClient.owner">
            <summary>
            License owner
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.Connect">
            <summary>
            Connects to the FTP server.
            </summary>
            <remarks>
            <para>
            The <see cref="P:EnterpriseDT.Net.Ftp.FTPClient.RemoteHost"/> property must be set before this method is called.
            </para>
            <para>Note that for explicit FTP <b>communications will not be secure</b> until the 
            <c>Auth()</c> method is called.
            </para>
            <para>
            Implicit FTPS communications are secure from the outset, usually requiring no 
            extra action by the client.  Some servers, however may require <c>Auth()</c>
            (no arguments) to be called.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.GetLocalCRC(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC-32 checksum for the named local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.GetRemoteCRC(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC-32 checksum for the named remote file
            </summary>
            <param name="path"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.EnableModeZCompression">
            <summary>
            Set MODE Z so that all subsequent transfers are compressed. Not 
            supported by some servers
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are '?' and '*'</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.CountBeforeSleep">
            <summary>
            Number of transfers before going to sleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.SleepEnabled">
            <summary>
            Enabling or not of sleeping after a certain number of transfers
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.SleepTime">
            <summary>
            Number of seconds spent asleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.ForceConnectModeExtensions">
            <summary>
            Force the use of EPRT and EPSV extensions even for IPv4
            </summary>
            <remarks>
            <para>
            The IPv6 EPRT and EPSV commands are supported, but by default only used
            for IPv6. They can, however be used for IPv4, and will be if this flag
            is set to true.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.SocksContext">
            <summary>
            Controls SOCKS integration.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPClient.SocksContext"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
            For example, for SOCKS4:
            </para>
            <code>
            	myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
            	Socks5Context socks = new Socks5Context("192.168.0.2", 1080);
            	socks.AuthMethods.Add(new Socks5NoAuthMethod());
            	socks.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            	myFTPClient.SocksContext = socks;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for FTPing through firewalls.  HTTP and SOCKS (4,4A and 4) are
            supported.  
            </para>
            <para>
             SOCKS supports both passive (PASV) and active (PORT) mode transfers. 
             Note that only passive mode transfers are possible via an HTTP proxy. There
             is no facility for HTTP proxies to listen for incoming connections, and hence active
             mode transfers cannot be done via an HTTP proxy. An exception will be thrown
             if they are attempted.
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPClient.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ExFTPConnection">
            <summary>
            Extension to <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/> providing advanced features 
            including multi-file operations, 
            asynchronous programming methods,
            visual design tools and support for SOCKS proxies.
            </summary>
            <remarks>
            <para><c>ExFTPConnection</c> provides a range of advanced features that
            save development time and improve the quality of applications using FTP.
            These features include:
            <list type="bullet">
            <item><term>Multi-file operations:</term>
            <description>Methods such as
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectoryTree(System.String)"/> enable the developer to execute FTP
            operations on multiple files and directories with a single line of code.
            </description></item>
            <item><term>Asynchronous methods:</term>
            <description>These are virtually essential when writing GUI application 
            since they vastly improve responsiveness by executing time-consuming FTP operations 
            in the background.</description></item>
            <item><term>Visual design tools:</term>
            <description><c>ExFTPConnection</c> integrates with Visual Studio and other
            IDEs to provide design-time tools that make FTP development easier.  For example,
            the Connection Tester allows the developer to test their <c>ExFTPConnection</c>
            properties by connecting to an FTP server from within the development 
            environment.</description></item>
            <item><term>Proxy support:</term>
            <description>FTP operations may be performed through SOCKS4, SOCKS4A, SOCKS5 
            and HTTP proxies.</description>
            </item>
            </list></para>
            <para><c>ExFTPConnection</c> also provides the connectivity for our 
            range of <b>FTP Visual Controls</b>, which are .NET GUI Controls 
            that can be dropped onto Windows Forms to add sophisticated visual 
            FTP application features with virtually no programming.</para>
            <para><b>Multi-file Operations</b> are methods that operate on multiple
            files.  Operations that can be done of multiple files are:
            <list type="bullet">
            <item>Download of files matching a wildcard
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,System.String,System.Boolean)"/>).</item>
            <item>Download of files matching a user-defined <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>).</item>
            <item>Upload of files matching a wildcard
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,System.String,System.Boolean)"/>).</item>
            <item>Upload of files matching a user-defined <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>).</item>
            <item>Deletion of files matching a wildcard 
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,System.String,System.Boolean)"/>).</item>
            <item>Deletion of files matching a user-defined <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>).</item>
            <item>Deletion of directory trees
            (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectoryTree(System.String)"/>).</item>
            </list>
            FTP and FTPS (unlike SFTP) have certain characteristics that can sometimes
            cause problems when transferring a large number of files in a short time.
            <c>ExFTPConnection</c> can be configured to avoid these problems by means
            of the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled"/>, 
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep"/> and 
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime"/> properties.
            </para>
            
            <para><b>Asynchronous Methods</b> are supported by means of a large number of
            <c>Begin___()</c> and <c>End___()</c> methods.  Nearly every synchronous method offered in 
            <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/>and <c>ExFTPConnection</c> has matching asynchronous 
            operations in the form of a matching Begin___() and End___() pair of methods.  
            The following example illustrates the use of <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <code>
              private void button1_Click(object sender, System.EventArgs e)
              {
                exFTPConnection1.BeginDownloadFile(fileName, fileName, new AsyncCallback(DownloadComplete), fileName);
              }
            
              private void DownloadComplete(IAsyncResult ar)
              {
                exFTPConnection1.EndDownloadFile(ar);
                label1.Text = "Finished downloading " + (string)ar.AsyncState;
              }
            </code>
            The <c>button1_Click</c> method initiates the download using the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>
            method and returns immediately (i.e. before the file has been downloaded).  
            The <c>DownloadComplete</c> method is then called once the file has been downloaded allowing
            us to notify the user of this fact.  Since the download happens in the background the
            application may perform other processing while the file is being downloaded.
            </para>
            
            <para>Each <c>Begin___()</c> method returns an <see cref="T:System.IAsyncResult"/> reference,
            which may be cast to <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/>.  <c>FTPTask</c> contains an identifier
            called <see cref="P:EnterpriseDT.Net.Ftp.FTPTask.TaskID"/>, which uniquely identifies the method-call.
            Information about the task may also be obtained through this object.  The task
            may be cancelled by calling the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTask(System.IAsyncResult)"/> method with the given
            task ID.
            </para>
            
            <para>When <b>Concurrent transfers</b> are <see cref="!:ConcurrentTransferSettings.Enabled"/>
            multiple files may be transferred at the same time.  This is achieved by maintaining a set
            of connections (called a "connection pool").  Each connection in the pool may transfer one file 
            at a time, so the maximum number of files that may be transferred simultaneously is equal to
            the size of the pool (<see cref="!:ConcurrentTransferSettings.MaxConnections"/>.
            </para>
            
            <para>The <b>Connection Tester</b> may be used to assist with setting the properties
            of <c>ExFTPConnection</c>.
            It allows the developer to test various property-settings interactively without running 
            their application.  The Connection Tester may be accessed by 
            (1) double-clicking on the component, (2) right-clicking on the component and 
            selecting "Connection Designer" from the context menu, or (3) selecting the component
            and then clicking on the "Connection Tester" link at the bottom of the Properties View.</para>
            <para><b>Proxy Settings</b> may be controlled through the
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ProxySettings"/> property.</para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnection">
            <summary>Provides FTP client functionality.</summary>
            <remarks>
            <para><c>FTPConnection</c> provides FTP client functionality.  It is a .NET Component which
            may be used in visual designers, or it may be used as a conventional class.</para>
            
            <para><b>Constructing and connecting: </b>
            The constructor for <c>FTPConnection</c> takes no arguments.  Before connecting to
            a server, the <c>FTPConnection</c> must be configured with the 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress"/>, <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/>.
            After this has been done, the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect"/> method should be called, 
            which will connect and log onto the server.
            <code>
              FTPConnection ftp = new FTPConnection();
              ftp.ServerAddress = "myservername";
              ftp.UserName = "myusername";
              ftp.Password = "mypassword";
              ftp.Connect();
              ftp.Close();
            </code>
            The <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/> method should be called when the required FTP operations
            have been completed so that the connection to the server is released.
            </para>
            
            <para><b>Directory listings: </b>
            Directory listings may be obtained in two basic forms: 
            (1) The method <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles(System.String)"/> returns strings containing file-names.
            (2) The method <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/> returns <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects which
            contain information about the file including name, size, and date.</para>
            
            <para><b>Downloading and uploading files: </b>
            There are many different methods for downloading files from the server 
            and uploading them to the server.  Data may be copied from or to:
            <list type="number">
            <item>Files (<see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String)"/></item>
            <item>Streams (<see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadStream(System.IO.Stream,System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String)"/>)</item>
            <item>Byte-arrays (<see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadByteArray(System.String)"/> and 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String)"/></item>
            </list>
            Methods for downloading and uploading multiple files and directories are available in 
            <c>ExFTPConnection</c> and <c>SecureFTPConnection</c>, which are included in 
            <a href="https://www.enterprisedt.com/products/edtftpnetpro/">
            EDT's commercial .NET FTP products</a>.
            </para>
            
            <para><b>Other file operations:</b>
            Other operations that may be performed on files are:
            <list type="bullet">
            <item>Renaming files using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.RenameFile(System.String,System.String)"/> method.</item>
            <item>Deleting files using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteFile(System.String)"/> method.</item>
            <item>Getting a files size using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSize(System.String)"/> method and 
            its modification time using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetLastWriteTime(System.String)"/> method.</item>
            </list></para>
            
            <para><b>Directories: </b>
            The server maintains a "working directory" for each session.  The path of the current
            working directory may be set and retrieved using the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.WorkingDirectory"/> 
            property.  Changing directory to a subdirectory of the current working directory 
            may be done by setting the same property, or by using
            the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectory(System.String)"/> method.  Changing up to a parent 
            directory is done using the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectoryUp"/> method.
            Empty directories may be removed using <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteDirectory(System.String)"/>.  If a
            non-empty directory is to be deleted then all the files and subdirectories in it
            must be deleted first.  <c>ExFTPConnection</c> and <c>SecureFTPConnection</c> have
            methods for achieving this in a single method-call.</para>
            
            <para><b>Events:</b>
            <c>FTPConnection</c> fires events before and after most FTP operations.  For example,
            before a file is downloaded the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/> event is fired,
            while it's downloading the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event is fired
            each time <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferNotifyInterval"/> bytes have been transferred, and after
            it's been downloaded the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> event is fired.  Operations
            that have corresponding events are:
            <list type="table">
            <listheader><term>FTP Operation</term><description>Events</description></listheader>
            <item><term>Connecting and logging in</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn"/>,
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn"/>, and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected"/></description></item>
            <item><term>Closing</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Closing"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Closed"/></description></item>
            <item><term>Downloading data</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/></description></item>
            <item><term>Uploading data</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/></description></item>
            <item><term>Changing directories</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged"/></description></item>
            <item><term>Deleting files/directories</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleting"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleted"/></description></item>
            <item><term>Sending FTP commands</term>
            <description><see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CommandSent"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ReplyReceived"/></description></item>
            </list></para>
            
            <para><b>Logging:</b>
            It is often very helpful to look at the detailed 
            logging output if any problems are experienced communicating 
            with FTP servers.  All commands sent to the FTP server and subsequent replies are 
            logged, and can be made available on the console or directed to a 
            log file.  Much other useful information is also logged.</para>
            
            <para>Operations are logged at different levels, 
            ranging from no logging (<see cref="F:EnterpriseDT.Util.Debug.LogLevel.Off">Off</see>) 
            to most verbose (<see cref="F:EnterpriseDT.Util.Debug.LogLevel.All">All</see>). 
            Intermediate levels are <see cref="F:EnterpriseDT.Util.Debug.LogLevel.Fatal">Fatal</see>,
            <see cref="F:EnterpriseDT.Util.Debug.LogLevel.Error">Error</see>, 
            <see cref="F:EnterpriseDT.Util.Debug.LogLevel.Warning">Warning</see> and 
            <see cref="F:EnterpriseDT.Util.Debug.LogLevel.Information">Information</see>.For example, if the overall level is set to Information, then 
            Fatal, Error, Warning and Information log statements will be outputted, 
            but Debug statements will not be logged.</para>
            
            <para>The overall level can be set via the LogLevel property:
            <code>
              ftpConnection.LogLevel = LogLevel.Information;
            </code>
            The destination for logging can be set via several properties, described below:
            <list type="table">
            <listheader><term>Property</term><description>Description</description></listheader>
            <item><term>LogToConsole</term><description>If set to <c>true</c>, logging is directed to the console.</description></item>
            <item><term>LogToTrace</term><description>If set to <c>true</c>, logging is directed to .NET's Trace facility.</description></item>
            <item><term>LogFile</term><description>If to a valid filename, logging is directed to the file.</description></item>
            </list></para>
            
            <para><b>Overview of the FTP protocol: </b> FTP is defined in the Request For Comments 959 document (RFC 959), 
            which can be obtained from the Internet Engineering Task Force.</para>
            
            <para>FTP requires a client program (FTP client) and a server program (FTP server). The FTP client 
            can fetch files and file details from the server, and also upload files to the server. 
            The server is generally loginPassword protected.</para>
            
            <para>FTP commands are initiated by the FTP client, which opens a TCP connection called the control 
            connection to the server. This control connection is used for the entire duration of a 
            session between the FTP client and server. A session typically begins when the FTP client logs in, 
            and ends when the quit command is sent to the server. The control connection is used 
            exclusively for sending FTP commands and reading server replies - it is never used to 
            transfer files.</para>
            
            <para>Transient TCP connections called data connections are set up whenever data (normally a 
            file's contents) is to be transferred. For example, the FTP client issues a command to 
            retrieve a file from the server via the control channel. A data connection is then 
            established, and the file's contents transferred to the FTP client across it. Once the 
            transfer is complete, the data connection is closed. Meanwhile, the control connection 
            is maintained.</para>
            
            <para><b>Compliance: </b> <see cref="T:EnterpriseDT.Net.Ftp.FTPClient"/> implements
            FTP as defined by RFC959.  It attempts to match the standard as closely as possible, 
            but due to variation in the level of compliance of the numerous FTP servers available,
            it sometime allows servers some tolerance.  If the property <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.StrictReturnCodes"/>
            is set to <c>false</c> then <see cref="T:EnterpriseDT.Net.Ftp.FTPClient"/> is more tolerant of 
            non-compliant servers.</para>
            </remarks>
            <author>Hans Andersen</author>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.180 $</version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.IFTPComponent">
            <summary>
            Interface implemented by all FTP components.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.IFTPComponent.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.DEFAULT_WORKING_DIRECTORY">
            <summary>
            Default initial working directory.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.components">
            <summary>Required designer variable.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.logTag">
            <summary>Logging tag</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.instanceCount">
            <summary>
            Counts instances of FTPConnection.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.instanceCountMutex">
            <summary>
            Used for mutexing instanceCount.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.instanceNumber">
            <summary>
            Number of this instance.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.name">
            <summary>
            Name of this connection.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.clientLock">
            <summary>
            Used for locking connection.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient">
            <summary>Instance of <c>FTPClient</c>.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.activeClient">
            <summary>Instance of <c>IFileTransferClient</c>.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.loginUserName">
            <summary>User-name to log in with.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.loginPassword">
            <summary>Password to log in with.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.accountInfoStr">
            <summary>Account information string, for use in FTP/FTPS with the ACCT command.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.fileTransferType">
            <summary>Record of the transfer type - make the default ASCII.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.ftpType">
            <summary>Protocol used.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.useAutoLogin">
            <summary>Determines if the components will automatically log in upon connection.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.useAutoFeatures">
            <summary>Determines if the components will automatically send the FEAT command after logging in.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.areEventsEnabled">
            <summary>Determines if events will be fired.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.isTransferringData">
            <summary>Determines if events will be fired.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.guiControl">
            <summary>Reference to the main window.</summary>
            <remarks>
            This reference is used for invoking delegates such that they can perform GUI-related actions.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.haveQueriedForControl">
            <summary>Flag used to remember whether or not we've tried to find the main window yet.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.invokeSemaphore">
            <summary>
            Used to limit the number of concurrent Control.BeginInvoke calls inside InvokeDelegate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.useGuiThread">
            <summary>
            Flag indicating whether or not event-handlers will run on the GUI thread if one is
            available.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.localDir">
            <summary>
            Current local working directory.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.remoteDir">
            <summary>
            Current remote working directory.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.homeDir">
            <summary>
            User's home directory on the server.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnection.lastTransferCancel">
            <summary>
            Flag indicating that the most recent transfer-operation was cancelled
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of FTPConnection within the given container.
            </summary>
            <param name="container">Container to place the new instance in.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.#ctor">
            <summary>
            Default constructor for FTPConnection.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.#ctor(EnterpriseDT.Net.Ftp.FTPClient)">
            <summary>
            Create an FTPConnection using the given FTP client.
            </summary>
            <param name="ftpClient"><see cref="T:EnterpriseDT.Net.Ftp.FTPClient"/>-instance to use.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Dispose(System.Boolean)">
            <summary>Disconnect from the server (if connected).</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SetIsTransferring(System.Boolean)">
            <summary>
            Used internal to set the is transferring flag
            </summary>
            <param name="isTransferring"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect">
            <summary>Connect to the FTP server and (if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is set) log into the server.</summary>
            <remarks>
            <para>The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress"/> property must be set prior to calling this method.</para>
            <para>If <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>true</c> then the component will attempt to
            log in immediately after successfully connecting.</para>
            <para>This method will throw an <c>FTPException</c> if the component is already connected to the server.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.PostLogin">
            <summary>
            Called after the user has been successfully logged in.
            </summary>
            <remarks>
            Sets the transfer-type and the current working directory. If
            AutoLogin is set to false, this method should be called
            explicitly to initialise the client state.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.PerformAutoLogin">
            <summary>Attempt to log into the server if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is on.</summary>
            <remarks>A login attempt will take place only if the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> property
            and (optionally) the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/> property have been set.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Close">
            <summary>Quit the FTP session.</summary> 
            <remarks>The session will be closed by sending a <c>QUIT</c> command before closing the socket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Close(System.Boolean)">
            <summary>Close the FTP connection.</summary> 
            <remarks>If <c>abruptClose</c> is <c>true</c> then the session will be closed immediately 
            by closing the control socket without sending the <c>QUIT</c> command, otherwise the
            session will be closed by sending a <c>QUIT</c> command before closing the socket.</remarks>
            <param name="abruptClose">Closes session abruptly (see comments).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Login">
            <summary>Log into an account on the FTP server using <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/>.</summary>
            <remarks>This is only necessary if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>false</c>.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SendUserName(System.String)">
            <summary>
            Supply the user-name to log into an account on the FTP server. 
            Must be followed by the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendPassword(System.String)"/> method.
            </summary>
            <remarks>This is only necessary if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>false</c>.</remarks>
            <param name="user">User-name of the client's account on the server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SendPassword(System.String)">
            <summary>
            Supply the password for the previously supplied
            user-name to log into the FTP server. Must be
            preceeded by the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendUserName(System.String)"/> method
            </summary>
            <remarks>This is only necessary if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>false</c>.</remarks>
            <param name="loginPassword">Password of the client's account on the server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SendAccountInfo(System.String)">
            <summary>
            Supply account info to the FTP server. 
            </summary>
            <remarks>This can be used for a variety of purposes - for example, 
            the server could
            indicate that a password has expired (by sending 332 in reply to
            PASS) and a new password automatically supplied via ACCT. Or it could
            be used by proxies to supply a proxy password. It
            is up to the server (or proxy) how it uses this string.
            </remarks>
            <param name="accountInfo">Account information string.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ResumeTransfer">
            <summary>Make the next file transfer (upload or download) resume.</summary>
            <remarks>
            <para>
            For uploads, the
            bytes already transferred are skipped over, while for downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ResumeNextTransfer">
            <summary>Make the next file transfer (upload or download) resume.</summary>
            <remarks>
            <para>
            For uploads, the
            bytes already transferred are skipped over, while for downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ResumeNextDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            <para>
            If the next transfer is an upload, this setting is cancelled. 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CancelResume">
            <summary>Cancel the resume.</summary>
            <remarks>
            Use this method if something goes wrong
            and the server is left in an inconsistent state.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String)">
            <summary>
            Upload a local file to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.  If the stream is left open the its position will be at the
            end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
            position if required.</para>
            </remarks>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String)">
             <summary>
             Upload a stream of data to the FTP server in the current working directory.
             </summary>
             <remarks>
             <para>The stream is closed after the transfer is complete if
             <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
             open otherwise.  If the stream is left open the its position will be at the
             end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
             position if required.</para>
             <para><example>The following example uploads the contents of 
             a <see cref="T:System.IO.MemoryStream"/> to the server and downloads the
             same file into another MemoryStream:</example>
             <code>
              // build StringStream (defined below) for "Hello world"
             byte[] bytes = Encoding.ASCII.GetBytes("Hello world");
             MemoryStream inStr = new MemoryStream(bytes);
            
             // upload the stream to a file on the server
             ftpConnection.UploadStream(inStr, "helloworld.txt");
             inStr.Close();
            
             // create a MemoryStream and download into it
             MemoryStream outStr = new MemoryStream();
             ftpConnection.DownloadStream(outStr, "helloworld.txt");
             outStr.Seek(0, SeekOrigin.Begin);
             string str = Encoding.GetString(outStr.GetBuffer());
             Console.WriteLine(str);
             outStr.Close();
             </code></para>
             </remarks>
             <param name="srcStream">Input stream of data to put.</param>
             <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String)">
             <summary>
             Upload an array of bytes to the FTP server in the current working directory.
             </summary>
             <para><example>The following example uploads the string <c>"Hello world"</c>
             to the server into a file called <c>helloworld.txt</c>:</example>
             <code>
                // get data to be transferred
               string s = "Hello world";
               byte[] bytes = Encoding.ASCII.GetBytes(s);
            
               // upload the byte-array to a file on the server
               ftpConnection.UploadByteArray(bytes, "helloworld.txt");
             </code></para>
             <param name="bytes">Array of bytes to put.</param>
             <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String,System.Boolean)">
            <summary>
            Upload a local file to the FTP server in the current working directory. Allows appending
            if current file exists.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode)">
            <summary>
            Upload a local file to the FTP server in the current working directory. Allows appending
            if current file exists.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Upload a stream of data to the FTP server in the current working directory.  Allows appending
            if current file exists.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.WriteMode)">
            <summary>
            Upload a stream of data to the FTP server in the current working directory.  Allows appending
            if current file exists.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String,System.Boolean)">
            <summary>
            Upload data to the FTP server in the current working directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String,EnterpriseDT.Net.Ftp.WriteMode)">
            <summary>
            Upload data to the FTP server in the current working directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)">
            <summary>Download a file from the FTP server and save it locally.</summary>
            <remarks>Transfers in the current <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType"/>. </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode)">
            <summary>Download a file from the FTP server and save it locally.</summary>
            <remarks>Transfers in the current <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType"/>. </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadStream(System.IO.Stream,System.String)">
            <summary>Download a file from the FTP server and write it to the given stream.</summary>
            <remarks>
            <para>Transfers are in the current <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType"/>.
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) is are left
            open otherwise.  If the stream is left open the its position will be at the
            end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
            position if required.</para>
            <para>
            <example>The following example shows a file being downloaded into a 
            <see cref="T:System.IO.MemoryStream"/>, which is then used to initialize a
            <see cref="T:System.IO.StreamReader"/>.</example>
            <code>ftpConnection.CloseStreamsAfterTransfer = false;
            MemoryStream memStr = new MemoryStream();
            ftpConnection.DownloadStream(memStr, "filename");
            memStr.Seek(0, SeekOrigin.Begin);
            StreamReader inStr = new StreamReader(memStr);
            ... use sr for whatever ...</code></para>
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadByteArray(System.String)">
            <summary>Download data from the FTP server and return it as a byte-array.</summary>
            <remarks>
            <para>Transfers in the current <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType"/>. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <returns>Returns a byte-array containing the file-data.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeSiteCommand(System.String,System.String[])">
            <summary>
            Invokes the given site command on the server.
            </summary>
            <remarks>
            <para>
            Site-specific commands are special commands that may be defined by a server.  
            Such commands are defined on a server-by-server basis.
            </para>
            <para>
            For example, a specific FTP server might define a <c>PROCESS</c> site-command which 
            results in another piece of software on the server being directed to perform some
            sort of processing on a particular file.  The command required might be:
            </para>
            <code>
            	SITE PROCESS file-path
            </code>
            <para>
            In this case, the site-command would be invoked as follows:
            </para>
            <code>
            	ftpConnection.InvokeSiteCommand("PROCESS", filePath);
            </code>
            </remarks>
            <param name="command">Site-specific command to be invoked.</param>
            <param name="arguments">Arguments of the command to be invoked.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeFTPCommand(System.String,System.String[])">
            <summary>
            Invokes the given literal FTP command on the server.
            </summary>
            <remarks>
            <para>
            If a particular FTP command is not supported by <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/>, this
            method may sometimes be used to invoke the command.  This will only work for 
            simple commands that don't require special processing.
            </para>
            <para>
            An example of an FTP command that could be invoked using this method is the 
            <c>FEAT</c> command (which is actually behind the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFeatures"/> method.
            This would be done as follows:
            </para>
            <code>
            	string features = ftpConnection.InvokeFTPCommand("FEAT", "211");
            </code>
            The returned <c>string</c> could then be parsed to obtain the supported features
            of the server.
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFeatures">
            <summary>Get the server supplied features.</summary>
            <returns>
            <c>string</c>-array containing server features, or <c>null</c> if no features or not supported.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSystemType">
            <summary>Get the type of the operating system at the server.</summary>
            <returns>The type of server operating system.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetCommandHelp(System.String)">
            <summary>Get the help text for the specified FTP command.</summary>
            <param name="command">Name of the FTP command to get help for.</param>
            <returns>Help text from the server for the supplied command.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos">
            <summary>
            Returns the working directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)">
            <summary>
            Returns the given directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            Returns the given directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="dirListCallback">Callback to notify for each listing item</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles">
            <summary>
            Lists current working directory's contents as an array of strings of file-names.
            </summary>
            <returns>An array of current working directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles(System.String)">
            <summary>
            List the given directory's contents as an array of strings of file-names.
            </summary>
            <param name="directory">Name of directory</param>
            <remarks>
            The directory name can sometimes be a file mask depending on the FTP server.
            </remarks>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles(System.String,System.Boolean)">
            <summary>
            List the given directory's contents as an array of strings of file-names or
            full file details.
            </summary>
            <param name="directory">Name of directory</param>
            <param name="full">true if the full listing is required including file size</param>
            <remarks>
            The directory name can sometimes be a file mask depending on the FTP server.
            </remarks>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteDirectory(System.String)">
            <summary>Delete the specified remote directory.</summary>
            <remarks>
            This method does not recursively delete files.
            </remarks>
            <param name="directory">Name of remote directory to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CreateDirectory(System.String)">
            <summary>Create the specified remote directory.</summary>
            <param name="directory">Name of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetWorkingDirectory">
            <summary>
            Returns the working directory on the server.
            </summary>
            <returns>The working directory on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectory(System.String)">
            <summary>
            Changes the working directory.
            </summary>
            <param name="directory">Directory to change to (may be relative or absolute).</param>
            <returns><c>true</c> if the working directory was changed.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectoryUp">
            <summary>
            Changes to the parent of the current working directory on the server.
            </summary>
            <returns><c>true</c> if the working directory was changed.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteFile(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="remoteFile">Name of remote file to delete.</param>
            <returns><c>true</c> if file was deleted successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RenameFile(System.String,System.String)">
            <summary>Rename a file or directory.</summary>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">New file-name.</param>
            <returns><c>true</c> if the file was renamed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSize(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <remarks>
            This is not a standard FTP command, it is defined in "Extensions to FTP", a draft RFC 
            (draft-ietf-ftpext-mlst-16.txt).
            </remarks>
            <param name="remoteFile">Name or path of remote file in current working directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSize(System.String,System.Boolean)">
            <summary>
            Get the size of a remote file, providing options on how errors are handled. 
            </summary>
            <remarks>
            This is not a standard FTP command, it is defined in "Extensions to FTP", a draft RFC 
            (draft-ietf-ftpext-mlst-16.txt).  If <c>throwOnError is</c> <c>true</c> then an exception 
            is thrown if there's an error, otherwise <c>-1</c> is returned.
            </remarks>
            <param name="remoteFile">Name or path of remote file in current working directory.</param>
            <param name="throwOnError">If <c>true</c> then an exception is thrown if there's an error,
            otherwise <c>-1</c> is returned.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <remarks>
            <para>
            Not all servers support absolute paths, so it's safer to use relative paths.  The
            path separator should be '/'.  If problems are encountered the safest option is
            to change into the desired directory prior to calling this method and then supplying
            the name of the file without its path.
            </para>
            <para>
            The existence of local files may be checked using the <see cref="M:System.IO.File.Exists(System.String)"/>
            method.
            </para>
            </remarks>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the named file exists on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryExists(System.String)">
            <summary>
            Tests if the given directory exists.
            </summary>
            <remarks>
            The FTP protocol doesn't specify a standard way of testing for the existence of a directory, so
            this method tries to change into the directory and assumes that that the directory doesn't
            exist if an exception is thrown.  The current working directory is restored before the method 
            returns.
            </remarks>
            <param name="dir">Name of directory</param>
            <returns><c>true</c> if directory exists and false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetLastWriteTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="remoteFile">Name of remote file.</param>
            <returns>Last write time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetLastWriteTime(System.String,System.Boolean)">
            <summary>Get modification time for a remote file.</summary>
            <remarks> If <c>throwOnError is</c> <c>true</c> then an exception 
            is thrown if there's an error, otherwise <c>-1</c> is returned.</remarks>
            <param name="remoteFile">Name of remote file.</param>
            <param name="throwOnError">If <c>true</c> then an exception is thrown if there's an error,
            otherwise <c>-1</c> is returned.</param>
            <returns>Last write time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.SetLastWriteTime(System.String,System.DateTime)">
            <summary>Set modification time for a remote file.</summary>
            <remarks>
            Although times are passed to the server with second precision, some
            servers may ignore seconds and only provide minute precision.  
            May not be supported by some FTP servers.
            </remarks>
            <param name="remoteFile">Name of remote file.</param>
            <param name="lastWriteTime">Desired write-time (given in local timezone).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeEventHandler(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handler.
            </summary>
            <param name="eventHandler">Event-handler to invoke.</param>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeEventHandler(System.Boolean,System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handler.
            </summary>
            <param name="preferGuiThread">If <c>true</c> then an attempt will be made to 
            run on the GUI thread</param>
            <param name="eventHandler">Event-handler to invoke.</param>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeEventHandler(System.Boolean,System.Boolean,System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handler.
            </summary>
            <param name="preferGuiThread">If <c>true</c> then an attempt will be made to 
            run on the GUI thread</param>
            <param name="permitAsync">Allow delegate to be called asynchronously.</param>
            <param name="del">Delegate to invoke.</param>
            <param name="eventHandler">Event-handler to invoke.</param>
            <param name="sender">Sender of the event.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeDelegate(System.Boolean,System.Boolean,System.Delegate,System.Object[])">
            <summary>
            Invokes the given delegate.
            </summary>
            <param name="preferGuiThread">If <c>true</c> then an attempt will be made to 
            run on the GUI thread</param>
            <param name="permitAsync">Allow delegate to be called asynchronously.</param>
            <param name="del">Delegate to invoke.</param>
            <param name="args">Arguments with which to invoke the delegate.</param>
            <returns>Return value of delegate (if any).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnConnecting">
            <summary>
            Called when a connection-attempt is being made.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnConnected(System.Boolean)">
            <summary>
            Called when a connection-attempt has completed.
            </summary>
            <param name="hasConnected"><c>true</c> if the connection-attempt succeeded.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnConnected(System.Exception)">
            <summary>
            Called when a connection is about to close.
            </summary>
            <param name="exception">Exception that occurred during operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnLoggingIn(System.String,System.String,System.Boolean)">
            <summary>
            Called when the client is about to log in.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnLoggedIn(System.String,System.String,System.Boolean)">
            <summary>
            Called when the client has logged in.
            </summary>
            <param name="userName">User-name of account.</param>
            <param name="password">Password of account.</param>
            <param name="hasLoggedIn"><c>true</c> if the client logged in successfully.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnClosing">
            <summary>
            Called when a connection is about to close.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnClosing(System.Exception)">
            <summary>
            Called when a connection is about to close.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnClosed">
            <summary>
            Called when a connection has closed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnClosed(System.Exception)">
            <summary>
            Called when a connection has closed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploading(System.String,System.String@,EnterpriseDT.Net.Ftp.WriteMode@)">
            <summary>
            Called when a file is about to be uploaded.
            </summary>
            <param name="localPath">Path of local file.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="writeMode">Write-mode of the transfer (i.e. overwrite, append or resume).</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploaded(System.String,System.String,System.Int64,EnterpriseDT.Net.Ftp.WriteMode,System.Exception)">
            <summary>
            Called when a file uploading operation has completed (though it may have been cancelled).
            </summary>
            <param name="localPath">Path of local file.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="append">Flag indicating whether or not the remote file was being appended to.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploading(System.IO.Stream,System.String@,EnterpriseDT.Net.Ftp.WriteMode@,System.Int64@)">
            <summary>
            Called when a stream is about to be uploaded.
            </summary>
            <param name="srcStream">Stream to upload.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="append">Flag indicating whether or not the remote file is being appended to.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploaded(System.IO.Stream,System.Int64,System.String,EnterpriseDT.Net.Ftp.WriteMode,System.Exception,System.Int64)">
            <summary>
            Called when a file uploading operation has completed (though it may have been cancelled).
            </summary>
            <param name="srcStream">Stream to upload.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="append">Flag indicating whether or not the remote file was being appended to.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploading(System.Byte[],System.String@,EnterpriseDT.Net.Ftp.WriteMode@)">
            <summary>
            Called when a byte-array is about to be uploaded.
            </summary>
            <param name="bytes">Byte-array to upload.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="writeMode">Write-mode of the transfer (i.e. overwrite, append or resume).</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnUploaded(System.Byte[],System.String,System.Int64,EnterpriseDT.Net.Ftp.WriteMode,System.Exception)">
            <summary>
            Called when a file uploading operation has completed (though it may have been cancelled).
            </summary>
            <param name="bytes">Byte-array to upload.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="writeMode">Write-mode of the transfer (i.e. overwrite, append or resume).</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloading(System.String@,System.String,System.Boolean@,System.Int64@,System.DateTime@)">
            <summary>
            Called when a file is about to be downloaded.
            </summary>
            <param name="localPath">Path of local file.</param>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloaded(System.String,System.String,System.Int64,System.Boolean,System.Exception,System.Int64,System.DateTime)">
            <summary>
            Called when a file downloading operation has completed (though it may have been cancelled).
            </summary>
            <param name="localPath">Path of local file.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloading(System.IO.Stream,System.String,System.Int64,System.Int64@,System.DateTime@)">
            <summary>
            Called when a file is about to be downloaded.
            </summary>
            <param name="destStream">Stream to which data will be written.</param>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloaded(System.IO.Stream,System.String,System.Int64,System.Exception,System.Int64,System.DateTime)">
            <summary>
            Called when a file downloading operation has completed (though it may have been cancelled).
            </summary>
            <param name="destStream">Stream to which data will be written.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloading(System.String,System.Int64@,System.DateTime@)">
            <summary>
            Called when a file is about to be downloaded.
            </summary>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDownloaded(System.Byte[],System.String,System.Int64,System.Exception,System.Int64,System.DateTime)">
            <summary>
            Called when a file downloading operation has completed (though it may have been cancelled).
            </summary>
            <param name="bytes">Byte-array containing downloaded data.</param>
            <param name="remoteFile">Path of remote file.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnBytesTransferred(System.String,System.Int64,System.Int64)">
            <summary>
            Called every time a specified number of bytes of data have been transferred.
            </summary>
            <param name="remoteFile">The name of the file being transferred.</param>
            <param name="byteCount">The current count of bytes transferred.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnChangingServerDirectory(System.String,System.String)">
            <summary>
            Called when the server directory is about to be changed.
            </summary>
            <param name="oldDirectory">Current directory.</param>
            <param name="newDirectory">New directory</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnChangingLocalDirectory(System.String,System.String)">
            <summary>
            Called when the local directory is about to be changed.
            </summary>
            <param name="oldDirectory">Current directory.</param>
            <param name="newDirectory">New directory</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnCreatingDirectory(System.String)">
            <summary>
            Called when a directory is about to be created.
            </summary>
            <param name="dir">Directory name</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnCreatedDirectory(System.String,System.Boolean,System.Exception)">
            <summary>
            Called when a directory has been created.
            </summary>
            <param name="dir">Directory name</param>
            <param name="cancelled"><c>true</c> if the operation was cancelled (and the file was not deleted).</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDeletingDirectory(System.String)">
            <summary>
            Called when a directory is about to be deleted.
            </summary>
            <param name="dir">Directory name</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDeletedDirectory(System.String,System.Boolean,System.Exception)">
            <summary>
            Called when a directory has been deleted.
            </summary>
            <param name="dir">Directory name</param>
            <param name="cancelled"><c>true</c> if the operation was cancelled (and the file was not deleted).</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDirectoryListing(System.String)">
            <summary>
            Called when a directory listing is about to be retrieved.
            </summary>
            <param name="dir">Directory name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDirectoryListed(System.String,EnterpriseDT.Net.Ftp.FTPFile[],System.Exception)">
            <summary>
            Called when a directory listing has been retrieved.
            </summary>
            <param name="files">File-details.</param>
            <param name="dir">Directory name</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnChangedServerDirectory(System.String,System.String,System.Boolean,System.Exception)">
            <summary>
            Called when the server directory has been changed.
            </summary>
            <param name="oldDirectory">Previous directory.</param>
            <param name="newDirectory">New directory</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnChangedLocalDirectory(System.String,System.String,System.Boolean)">
            <summary>
            Called when the local directory has been changed.
            </summary>
            <param name="oldDirectory">Previous directory.</param>
            <param name="newDirectory">New directory</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDeleting(System.String,System.DateTime@)">
            <summary>
            Called when a file is about to be deleted.
            </summary>
            <param name="remoteFile">File to delete.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDeleted(System.String,System.Boolean,System.Exception,System.DateTime)">
            <summary>
            Called when a file deletion operation has completed (though it may have been cancelled).
            </summary>
            <param name="remoteFile">File deleted.</param>
            <param name="cancelled"><c>true</c> if the operation was cancelled (and the file was not deleted).</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnRenaming(System.String,System.String)">
            <summary>
            Called when a file is about to be renamed.
            </summary>
            <param name="from">Current name.</param>
            <param name="to">New name.</param>
            <returns><c>true</c> if the operation is to continue.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnRenamed(System.String,System.String,System.Boolean,System.Exception)">
            <summary>
            Called when a file has been renamed.
            </summary>
            <param name="from">Previous name.</param>
            <param name="to">New name.</param>
            <param name="cancelled">Indicates whether or not the rename operation was cancelled.</param>
            <param name="ex">Exception thrown (if failed)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnActivePortRangeChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a property is changed in ActivePort
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnFileNotFoundMessagesChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a member of FileNotFoundMessagesChanged is added, removed or changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnTransferCompleteMessagesChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a member of TransferCompleteMessages is added, removed or changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnDirectoryEmptyMessagesChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a member of DirectoryEmptyMessages is added, removed or changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient_BytesTransferred(System.Object,EnterpriseDT.Net.Ftp.BytesTransferredEventArgs)">
            <summary>
            Event-handler for <see cref="E:EnterpriseDT.Net.Ftp.IFileTransferClient.BytesTransferred"/> events received from <see cref="T:EnterpriseDT.Net.Ftp.IFileTransferClient"/>s.
            </summary>
            <remarks>This method simply passes <see cref="E:EnterpriseDT.Net.Ftp.IFileTransferClient.BytesTransferred"/> events onto
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> handlers.</remarks>
            <param name="sender">Sender of events.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient_CommandSent(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>
            Event-handler for <see cref="!:IFileTransferClient.CommandSent"/> events received from <see cref="T:EnterpriseDT.Net.Ftp.IFileTransferClient"/>s.
            </summary>
            <remarks>This method simply passes <see cref="!:IFileTransferClient.CommandSent"/> events onto
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CommandSent"/> handlers.</remarks>
            <param name="sender">Sender of events.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient_CommandError(System.Object,EnterpriseDT.Net.Ftp.FTPErrorEventArgs)">
            <summary>
            Test if the connection is still alive.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ftpClient_ReplyReceived(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>
            Event-handler for <see cref="!:IFileTransferClient.ReplyReceived"/> events received from <see cref="T:EnterpriseDT.Net.Ftp.IFileTransferClient"/>s.
            </summary>
            <remarks>This method simply passes <see cref="!:IFileTransferClient.ReplyReceived"/> events onto
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ReplyReceived"/> handlers.</remarks>
            <param name="sender">Sender of events.</param>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseBytesTransferred(EnterpriseDT.Net.Ftp.BytesTransferredEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseClosed(EnterpriseDT.Net.Ftp.FTPConnectionEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Closed"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseClosing(EnterpriseDT.Net.Ftp.FTPConnectionEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Closing"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseCommandSent(EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CommandSent"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseConnected(EnterpriseDT.Net.Ftp.FTPConnectionEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseConnecting(EnterpriseDT.Net.Ftp.FTPConnectionEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseCreatedDirectory(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatedDirectory"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseCreatingDirectory(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatingDirectory"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDeleted(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleted"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDeletedDirectory(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DeletedDirectory"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDeleting(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleting"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDeletingDirectory(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DeletingDirectory"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDirectoryChanged(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDirectoryChanging(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDirectoryListed(EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDirectoryListing(EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListing"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDownloaded(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseDownloading(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseLocalDirectoryChanged(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectoryChanged"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseLocalDirectoryChanging(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectoryChanging"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseLoggedIn(EnterpriseDT.Net.Ftp.FTPLogInEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseLoggingIn(EnterpriseDT.Net.Ftp.FTPLogInEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaisePropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.PropertyChanged"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseRenamedFile(EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamedFile"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseRenamingFile(EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamingFile"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseReplyReceived(EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ReplyReceived"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseServerDirectoryChanged(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectoryChanged"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseServerDirectoryChanging(EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectoryChanging"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseUploaded(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RaiseUploading(EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CheckConnection(System.Boolean)">
            <summary> 
            Checks if the client has connected to the server and throws an exception if it hasn't.
            This is only intended to be used by subclasses
            </summary>
            <throws>FTPException Thrown if the client has not connected to the server. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.CheckFTPType(System.Boolean)">
            <summary>
            Checks the FTP type and throws an exception if it's incorrect.
            </summary>
            <param name="ftpOnly"><c>true</c> if the type must be FTP.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.RelativePathToAbsolute(System.String,System.String)">
            <summary>
            Combines a relative path with an absolute path.
            </summary>
            <remarks>
            <para>
            An example of an absolute path is 'C:\work\ftp'. Examples of a relative
            path combined with this are shown below:
            </para>
            <list>
            <item>'myfiles\cv.txt' => 'c:\work\ftp\myfiles\cv.txt'</item>
            <item>'.\myfiles\cv.txt' => 'c:\work\ftp\myfiles\cv.txt'</item>
            <item>'..\myfiles\cv.txt' => 'c:\work\myfiles\cv.txt'</item>
            </list>
            </remarks>
            <param name="absolutePath">Absolute path</param>
            <param name="relativePath">Relative path</param>
            <returns>Combination of absolute and relative paths.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetURL">
            <summary>
            Returns a URL corresponding to the current state of this <c>SecureFTPConnection</c>.
            </summary>
            <returns>URL corresponding to the current state of this <c>SecureFTPConnection</c></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetURL(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a URL corresponding to the current state of this <c>SecureFTPConnection</c>.
            The URL optionally includes the directory, user-name and password.
            </summary>
            <param name="includeDirectory">Should the directory be included in the URL?</param>
            <param name="includeUserName">Should the user-name be included in the URL?</param>
            <param name="includePassword">Should the password be included in the URL?</param>
            <returns>URL corresponding to the current state of this <c>SecureFTPConnection</c></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.GetHashCode">
            <summary>
            Returns hash-code for this connection.
            </summary>
            <returns>The hash-code for this connection.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnection.ToString">
            <summary>
            Returns a string representation of the connection.
            </summary>
            <returns>A string representation of the connection</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.InstanceNumber">
            <summary>
            Returns the number of this instance.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.Name">
            <summary>
            Name of this component.
            </summary>
            <remarks>May be used by to identify connections as desired.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ParentControl">
            <summary>
            Reference to Windows Forms controls (if available).
            </summary>
            <remarks>
            <para>This property only applies to Windows Forms applications.</para>
            <para>If the <c>ParentControl</c> property is set then all events and callbacks 
            will be executed in the thread in which this control was created.  If it is not
            set then FTPConnection will still attempt to find a control on whose thread
            events and callback will be executed.  This prevents cross-thread errors.</para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol" -->
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.Version">
            <summary>The version of the assembly.</summary>
            <value>An <c>int</c> array of <c>{major,middle,minor}</c> version numbers.</value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.BuildTimestamp">
            <summary>The assembly's build timestamp.</summary>
            <value>
            Timestamp of when the assembly was built in the format <c>d-MMM-yyyy HH:mm:ss z</c>.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.StrictReturnCodes">
            <summary>Controls whether or not checking of return codes is strict.</summary>
            <remarks>
            <para>
            Some servers return non-standard reply-codes.  When this property is <c>false</c>
            only the first digit of the reply-code is checked, thus decreasing the sensitivity
            of edtFTPj to non-standard reply-codes.  The default is <c>true</c> meaning that
            reply-codes must match exactly.
            </para>
            </remarks>
            <value>  
            <c>true</c> if strict return code checking, <c>false</c> if non-strict.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.PublicIPAddress">
            <summary>
            IP address of the client as the server sees it.
            </summary>
            <remarks>
            This property is necessary when using active mode in situations where the
            FTP client is behind a firewall.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoPassiveIPSubstitution">
            <summary>
            Use <c>AutoPassiveIPSubstitution</c> to ensure that 
            data-socket connections are made to the same IP address
            that the control socket is connected to.
            </summary>
            <remarks>
            <para>
            <c>AutoPassiveIPSubstitution</c> is useful in passive mode when the 
            FTP server is supplying an incorrect IP address to the client for 
            use in creating data connections (directory listings and file 
            transfers), e.g. an internal IP address that is not accessible from 
            the client. Instead, the client will use the IP address obtained 
            from the FTP server's hostname.
            </para>
            <para>
            This usually happens when an FTP server is behind
            a NAT router and has not been configured to reflect the fact that
            its internal (LAN) IP address is different from the address that
            external (Internet) machines connect to.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ActivePortRange">
            <summary>
            Specifies the range of ports to be used for data-channels in active mode.
            </summary>
            <remarks>
            <para>By default, the operating system selects the ports to be used for
            active-mode data-channels.  When ActivePortRange is defined,
            a port within this range will be selected.</para>
            <para>This settings is not used in passive mode.</para>
            <para>This can be particularly useful in scenarios where it is necessary to 
            configure a NAT router to statically route a certain range of ports to the
            machine on which the FTP client is running.</para>	
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.FileNotFoundMessages">
            <summary>
            Holds fragments of server messages that indicate a file was not found
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a file was not found. 
            If an FTP server is returning a different message that still clearly 
            indicates a file was not found, use this property to add a new server 
            fragment to the repository via the Add method. It would be helpful to
            email support at enterprisedt dot com to inform us of the message so
            it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferCompleteMessages">
            <summary>
            Holds fragments of server messages that indicate a transfer completed.
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a transfer completed.
            If an FTP server is returning a different message that still clearly 
            indicates the transfer complete, use this property to add a new server 
            fragment to the repository via the Add method. It would be helpful to
            email support at enterprisedt dot com to inform us of the message so
            it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryEmptyMessages">
            <summary>
            Holds fragments of server messages that indicate a directory
            is empty.
            </summary>
            <remarks>
            The fragments are used when it is necessary to examine the message
            returned by a server to see if it is saying a directory is empty, which
            is normally used by DirDetails. If an FTP server is returning a different
            message that still clearly indicates a directory is empty, use this
            property to add a new server fragment to the repository via the Add method.
            It would be helpful to email support at enterprisedt dot com to inform 
            us of the message so it can be added to the next build.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.Timeout">
            <summary> 
            TCP timeout (in milliseconds) of the underlying sockets (0 means none).
            </summary>
            <summary> 
            TCP timeout (in milliseconds) of the underlying sockets (0 means none).
            </summary>
            <remarks>Timout value in milliseconds.  The default value is 120000, which indicates 
            a 120 second timeout period.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TCPBufferSize">
            <summary> 
            TCP read/write buffer size of the underlying sockets (-1 means use defaults). For some
            transfers setting this value to 0 can improve performance.
            </summary>
            <remarks>The default value is -1, which means use the Microsoft defaults. </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server (FTP and FTPS).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ConnectMode">
            <summary>
            The connection-mode (passive or active) of data-channels.
            </summary>
            <remarks>
            <para>
            When the connection-mode is active, the server will initiate connections
            to the FTP client, meaning that the FTP client must open a socket and wait for the
            server to connect to it.  This often causes problems if the FTP client is behind
            a firewall.
            </para>
            <para>
            When the connection-mode is passive, the FTP client will initiates connections
            to the server, meaning that the FTP client will connect to a particular socket
            on the server.  This is generally used if the FTP client is behind a firewall.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.IsConnected">
            <summary>
            Indicates whether the FTP client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.IsTransferring">
            <summary>
            Indicates whether the FTP client is currently transferring data.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.
            </summary>
            <remarks>
            <para>This property determines the approximate number of bytes transferred
            between each <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.</para>
            <para>The default value is 4096.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferNotifyListings">
            <summary>
            By default the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event is not triggered 
            during directory listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferBufferSize">
            <summary>
            The size of the application buffers used in reading and writing data.
            </summary>
            <remarks>
            <para>The size of receive and transmit buffers.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.CloseStreamsAfterTransfer">
            <summary>
            Determines if transfer-methods taking <see cref="T:System.IO.Stream"/>s as arguments should
            close the stream once the transfer is completed.
            </summary>
            <remarks>
            If <c>CloseStreamsAfterTransfer</c> is <c>true</c> (the default) then streams are closed after 
            a transfer has completed, otherwise they are left open.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress">
            <summary>
            The domain-name or IP address of the FTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
            FTPConnection ftp = new FTPConnection();
            ftp.ServerAddress = "my-server-name";
            ftp.UserName = "my-username";
            ftp.Password = "my-password";
            ftp.Connect();
            ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>Most FTP servers use port 21 (the default)</para>
            <para>This property may only be set if not currently connected.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.WorkingDirectory">
            <summary>
            The current working directory on the server. 
            </summary>
            <remarks>
            If the client is not currently connected, this is the initial
            working directory that will be changed to once the client connects.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.HomeDirectory">
            <summary>
            The server-side directory that the client is in immediately after connecting.
            </summary>
            <remarks>Prior to logging in the value is <c>null</c>.
            If the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory"/> property was not set prior to connection then its
            value immediately after logging in will be the same as that of HomeDirectory.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory">
            <summary>
            The initial/current working directory on the server. 
            </summary>
            <remarks>
            If the client is not currently connected, this is the initial
            working directory that will be changed to once the client connects.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectory">
            <summary>
            The working directory on the local file-system into which files are downloaded. 
            </summary>
            <remarks>
            <para><c>LocalDirectory</c> must be an absolute path, e.g. C:\work\ftp</para>
            <para><c>LocalDirectory</c> is specific to this component, i.e. changing it does not
            change the working directory of the application using this assembly. Files are downloaded
            into this directory if it is set and a relative path or no path is supplied as the destination
            filename. 
            </para>
            <para><c>LocalDirectory</c> is <c>null</c> by default meaning that the application's 
            normal working directory is used when downloading files.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the FTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the FTP client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.DataEncoding">
            <summary>
            The character-encoding to use for transferring data in ASCII mode.
            </summary>
            <remarks>
            <para>
            The default is to use the default character encoding (generally UTF8). 
            Some common character encodings to try for western European languages are 
            <c>Windows-1252</c> and <c>ISO-8859-1</c>. 
            </para>
            <para>
            This encoding is not used when transferring data in binary mode.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.CommandEncoding">
            <summary>
            The character-encoding to use for FTP control commands and when dealing with file- and directory-paths.
            </summary>
            <remarks>
            <para>
            The default is <c>ASCII</c>, but should be changed when using file-names or
            directories containing non-ASCII characters.
            </para>
            <para>
            Officially the FTP protocol (RFC959) only supports 7-bit ASCII characters. This 
            means that file and directory names transferred across the control channel can 
            only be ASCII. Fortunately, most servers actually support at least 8-bit ASCII. However 
            there is no standard for what extended ASCII encoding is to be used. As a result, the meaning of 
            characters 0 to 127 is well defined, but the meaning of characters 128 to 255 
            varies from one server to the other. One server might interpret character 
            193 as an accented A, whereas another might interpret it as an accented E. 
            </para>
            <para>
            By default, <c>FTPConnection</c> supports 7-bit ASCII. If it encounters a character
            whose code is 128 to 255 it will represent it as a question mark. This property 
            allows the developer to select 
            an 8-bit character encoding that matches that of the server. Unfortunately many 
            servers do not state what 8-bit ASCII character set they are using, so it is 
            often necessary to use trial and error to find out. Some common character 
            encodings to try for western European languages are <c>Windows-1252</c> and <c>ISO-8859-1</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.SynchronizePassiveConnections">
            <summary> 
            For cases where the FTP server does not properly manage PASV connections,
            it may be necessary to synchronize the creation of passive data sockets.
            It has been reported that some FTP servers (such as those at Akamai) 
            appear to get confused when multiple FTP clients from the same IP address
            attempt to connect at the same time (the server sends the same port number to multiple clients). 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.FilePathEncoding">
            <summary>
            The character-encoding to use when dealing with file- and directory-paths.
            </summary>
            <remarks>
            The default is <c>ASCII</c>, but should be changed when communicating with FTP servers
            that have file-names containing non-ASCII characters
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ParsingCulture">
            <summary>The culture for parsing file listings.</summary>
            <remarks>
            <para>
            The <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/> method parses the file listings returned.  The names of the file
            can contain a wide variety of characters, so it is sometimes necessary to set this
            property to match the character-set used on the server.
            </para>
            <para>
            The default is <c>Invariant Language (Invariant Country)</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.FileInfoParser">
            <summary>
            Override the chosen file factory with a user created one - meaning
            that a specific parser has been selected
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TimeDifference">
            <summary>
            [FTP/FTPS Only] Time difference between server and client (relative to client).
            </summary>
            <remarks>
            The time-difference is relative to the server such that, for example, if the server is
            in New York and the client is in London then the difference would be -5 hours 
            (ignoring daylight savings differences).  This property only applies to FTP and FTPS.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TimeIncludesSeconds">
            <summary>
            [FTP/FTPS Only] Indicates whether seconds were included in the most recent directoy listing.
            </summary>
            <remarks>
            Some FTP and FTPS servers don't return file-modified times that include seconds.  This flag
            indicates whether or not the most recent directory listing included seconds.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LastValidReply">
            <summary>The latest valid reply from the server.</summary>
            <value>
            Reply object encapsulating last valid server response.
            </value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.WelcomeMessage">
            <summary>
            Server's welcome message.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <value>Transfer-type to be used for uploads and downloads.</value>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>ASCII</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName">
            <summary>User-name of account on the server.</summary>
            <value>The user-name of the account the FTP server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
            FTPConnection ftp = new FTPConnection();
            ftp.ServerAddress = "my-server-name";
            ftp.UserName = "my-username";
            ftp.Password = "my-password";
            ftp.Connect();
            ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.Password">
            <summary>Password of account on the server.</summary>
            <value>The password of the account the FTP server that will be logged into upon connection.</value>
            <remarks>
            <para>>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
            FTPConnection ftp = new FTPConnection();
            ftp.ServerAddress = "my-server-name";
            ftp.UserName = "my-username";
            ftp.Password = "my-password";
            ftp.Connect();
            ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.AccountInfo">
            <summary>Account information string.</summary>
            <value>The string supplied for use with the FTP ACCT command.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made. It
            is used to supply optional information to the FTP server, and should only be set
            if it is known to be required.</para>
            <para>
            Some proxy servers use this value for their proxy password.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin">
            <summary>Determines if the component will automatically log in upon connection.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> (the default) then the component will automatically attempt 
            to log in when the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect"/> method is called.  The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> and 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/> (if required) properties should be set previously.
            </para>
            <para>
            If the flag is <c>false</c> then the component will not log in until the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Login"/>
            method is called.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoFeatures">
            <summary>Determines if the component will automatically send the FEAT command.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> then the component will automatically send the 
            FEAT command after logging in when the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect"/> method is called. This is
            used to detect if UTF-8 is supported, amongst other things.
            </para>
            <para>
            If the flag is <c>false</c> (the default) then the component will not send the FEAT command after logging
            in.
            </para>
            <para>
            The default has been changed to false because on some FTP servers, calling FEAT affects the
            state of the server - there are problems creating passive sockets for listings and transfers. 
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.EventsEnabled">
            <summary>Determines whether or not events are currently enabled.</summary>
            <value>The <c>EventsEnabled</c> flag determines whether or not events are currently enabled.
            If the flag is <c>true</c> (the default) then events will fire as appropriate.
            If the flag is <c>false</c> then no events will be fired by this object.</value>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.UseGuiThreadIfAvailable">
            <summary>Determines whether or not event-handlers will be run on the GUI thread if one is available.</summary>
            <value>The <c>UseGuiThreadIfAvailable</c> flag determines whether or not event-handlers will be run 
            on the GUI thread if one is available.
            If the flag is <c>true</c> (the default) then they will be run on the GUI thread if one is available 
            (only for Windows Forms applications).
            If the flag is <c>false</c> then they will be run on a worker-thread.</value>
            <remarks>
            It is important to note that if event-handlers are run on a worker-thread then Windows Forms
            related operations will usually fail.  Since such operations are commonly used in event-handlers,
            the default is <c>true</c>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogLevel">
            <summary>
            Determines the level of logs written.
            </summary>
            <remarks>
            <para>
            Note that no logs will be written unless <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.LogToConsole"/> is
            <c>true</c> or <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.LogFile"/> is set.
            </para>
            <para>
            This method wraps <see cref="P:EnterpriseDT.Util.Debug.Logger.CurrentLevel"/> so setting either
            is equivalent to setting the other.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogFile">
            <summary>
            Name of file to which logs will be written.
            </summary>
            <remarks>
            <para>
            This method wraps <see cref="P:EnterpriseDT.Util.Debug.Logger.PrimaryLogFile"/> so setting either
            is equivalent to setting the other.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogToConsole">
            <summary>
            Determines whether or not logs will be written to the console.
            </summary>
            <remarks>
            <para>
            This method wraps <see cref="P:EnterpriseDT.Util.Debug.Logger.LogToConsole"/> so setting either
            is equivalent to setting the other.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogToTrace">
            <summary>
            Determines whether or not logs will be written using <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
            <remarks>
            <para>
            This method wraps <see cref="P:EnterpriseDT.Util.Debug.Logger.LogToTrace"/> so setting either
            is equivalent to setting the other.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.ActiveClient">
            <summary>
            Reference to the currently active <see cref="T:EnterpriseDT.Net.Ftp.IFileTransferClient"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LastTransferCancelled">
            <summary>
            Indicates whether or not the most recent transfer was cancelled.
            </summary>
            <value>Flag is <c>true</c> if the most recent transfer was cancelled and <c>false</c> otherwise.</value>
            <remarks>
            Download and upload operations can be cancelled by the 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.CancelTransfer"/> method.  This property will be <c>true</c> if 
            this method was called during the the most recent transfer and <c>false</c> otherwise.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnection.LogTag">
            <summary>
            Logging tag
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting">
            <summary>Occurs when the component is connecting to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected">
            <summary>Occurs when the component has connected to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn">
            <summary>Occurs when the component is about to log in.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn">
            <summary>Occurs when the component has logged in.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Closing">
            <summary>Occurs when the component is about to close its connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Closed">
            <summary>Occurs when the component has closed its connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading">
            <summary>Occurs when a file is about to be uploaded to the server.</summary>
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that, if set to <c>true</c> will result in the transfer being cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded">
            <summary>Occurs when a file has been uploaded to the server.</summary> 
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that indicates whether or not the transfer was cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading">
            <summary>Occurs when a file is about to be downloaded from the server.</summary> 
            <remarks>
            <para>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that, if set to <c>true</c> will result in the transfer being cancelled.</para>
            
            <para>If the <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/> method was used to initiate the
            transfer then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalPath"/> property may be
            set in order to change the path of the downloaded file.</para>
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded">
            <summary>Occurs when a file has been downloaded from the server.</summary> 
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that indicates whether or not the transfer was cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred">
            <summary>Occurs every time a specified number of bytes of data have been transferred.</summary>
            <remarks>The property, <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.TransferNotifyInterval"/>, determines
            the number of bytes sent between notifications.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamingFile">
            <summary>Occurs when a remote file is about to be renamed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamedFile">
            <summary>Occurs when a remote file has been renamed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleting">
            <summary>Occurs when a file is about to be deleted from the server.</summary> 
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that, if set to <c>true</c> will result in the deletion being cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.Deleted">
            <summary>Occurs when a file has been deleted from the server.</summary> 
            <remarks>The <see cref="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs"/> argument passed to
            handlers has a <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel"/> property,
            that indicates whether or not the deletion was cancelled.</remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging">
            <summary>Occurs when the server directory is about to be changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged">
            <summary>Occurs when the server directory has been changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectoryChanging">
            <summary>Occurs when the server directory is about to be changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectoryChanged">
            <summary>Occurs when the server directory has been changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectoryChanging">
            <summary>Occurs when the local directory is about to be changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectoryChanged">
            <summary>Occurs when the local directory has been changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListing">
            <summary>Occurs when a directory listing operations is commenced.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed">
            <summary>Occurs when a directory listing operations is completed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatingDirectory">
            <summary>Occurs when a directory is about to be created on the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatedDirectory">
            <summary>Occurs when a local directory has been created on the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DeletingDirectory">
            <summary>Occurs when a directory is about to be deleted on the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.DeletedDirectory">
            <summary>Occurs when a local directory has been deleted on the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.CommandSent">
            <summary>Occurs when a command is sent to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.ReplyReceived">
            <summary>Occurs when a reply is received from the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPConnection.PropertyChanged">
            <summary>Occurs when a property is changed.</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.KEEP_ALIVE_PERIOD_WARN">
            <summary>Number of seconds below which the user will be warned about a low KeepAlivePeriodSecs.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.DEFAULT_RETRY_COUNT">
            <summary>Default number of retries.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.DEFAULT_RETRY_DELAY">
            <summary>Default retry delay.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.log">
            <summary>Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.pool">
            <summary>
            Connection pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.poolSettings">
            <summary>
            Stores settings for the connection pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.currentTask">
            <summary>
            Current asynchronous task (<c>null</c> if none).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.currentTaskLock">
            <summary>
            Lock for <c>currentTask</c>.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.taskCounter">
            <summary>
            Counter for async ops.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.taskCounterLock">
            <summary>
            Lock for the async op counter.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.httpClient">
            <summary>
            Reference to HttpClient which does all the HTTP work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.licenseProps">
            <summary>  
            Licensing check
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.key">
            <summary>
            License key.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.owner">
            <summary>
            License owner.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.simpleXmlProperties">
            <summary>
            List of names of properties that may be serialized using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SerializeProperty(System.Xml.XmlWriter,System.String)"/> method.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepConnectionAliveIdle">
            <summary>
            Are we keeping the connection alive when idle?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepConnectionAliveTransfer">
            <summary>
            Are we keeping the connection alive when transferring?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveTime">
            <summary>
            Seconds between "keep alive" commands.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveThread">
            <summary>
            Thread on which keep-alive runs.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveRunning">
            <summary>
            Indicates whether or not the keepAliveThread is currently running.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveThreadCount">
            <summary>
            Counts the number of keep-alive threads that have been created.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.keepAliveThreadCountMutex">
            <summary>
            Used for mutexing access to keepAliveThreadCount.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.lastReplyTime">
            <summary>
            Time of last reply.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.loadingProperties">
            <summary>
            True if properties are currently being loaded.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.synchronizer">
            <summary>
            Synchronizer used for all synchronization operations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.defaultSyncRules">
            <summary>
            Default synchronization rules.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.retryCount">
            <summary>
            Number of times to retry an operation before giving up.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.retryDelay">
            <summary>
            Number of milliseconds to wait before retrying.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.integrityCheckTransfers">
            <summary>
            Do integrity checking?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.forceConnectModeExtensions">
            <summary>
            Force use of EPRT and EPSV?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.compressionPreferred_">
            <summary>
            Is compression preferred?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.crcSupported">
            <summary>
            Is CRC supported?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.isDirCached">
            <summary>
            Should directories be cached?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ExFTPConnection.dirCache">
            <summary>
            Cache of directory listings
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructs a <c>ExFTPConnection</c> object and places it in the given container.
            </summary>
            <param name="container">Component container</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.#ctor">
            <summary>
            Initializes a new instance of the <c>ExFTPConnection</c> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.#ctor(EnterpriseDT.Net.Ftp.ExFTPClient)">
            <summary>
            Create an <c>ExFTPConnection</c> using the given FTP client.
            </summary>
            <param name="ftpClient"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a connection object from the given <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="information">Serialization information.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Clone">
            <summary>
            Creates a new <c>ExFTPConnection</c> that is a copy of the current instance. 
            </summary>
            <returns>A new <c>ExFTPConnection</c> whose properties match those of the current instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CopyProperties(EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            Copies the properties of the given source <c>ExFTPConnection</c> into this instance.
            </summary>
            <param name="source"><c>ExFTPConnection</c> from which properties should be copied</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Dispose(System.Boolean)">
            <summary> 
            Close the connection if it is open.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Connect">
            <summary>Connect to the FTP server and (if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is set) log into the server.</summary>
            <remarks>
            <para>If this component is being used on a form or within another component then
            it is a good idea to use the "Connection Tester" to test the property settings.</para>
            
            <para>Connections are not opened until the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Connect"/> method is called.
            Connection-, Authentication-, and Security-related properties should be set
            prior to opening the connection.</para>
            
            <para>At a minimum, the following properties should be set prior to connection.
            <list type="table">
              <listheader>
            	<term>Property</term>
            	<term>Description</term>
              </listheader>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">Protocol</see></term>
                <description>The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">protocol</see> to use: 
                SFTP, explicit FTPS, implicit FTPS or plain FTP.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress">ServerAddress</see></term>
                <description>The domain-name or IP-address of the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName">UserName</see></term>
                <description>User-name of account on the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password">Password</see></term>
                <description>Password of account on the server.</description>
              </item>
            </list></para>
            
            <para>If <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is <c>true</c> then the 
            component will attempt to log in immediately after successfully connecting.</para>
            
            <para>This method will throw an <c>FTPException</c> if the component is already 
            connected to the server.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.PostLogin">
            <summary>
            Called after the user has been successfully logged in.
            </summary>
            <remarks>
            Sets the transfer-type and the current working directory. If
            AutoLogin is set to false, this method should be called
            explicitly to initialise the client state.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.PerformAutoLogin">
            <summary>Attempt to log into the server if <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.AutoLogin"/> is on.</summary>
            <remarks>A login attempt will take place only if the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> property
            and (optionally) the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Password"/> property have been set.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.AbortAsynchronous(System.Boolean)">
            <summary>
            Aborts all queued asynchronous operations.
            </summary>
            <remarks>
            This method clears the queue of pending asynchronous operations (i.e. those initiated
            using the BeginXXX methods).  If <c>interruptCurrent</c> is <c>true</c> then any
            transfer currently being performed is cancelled.
            </remarks>
            <param name="interruptCurrentTransfer">Causes any current transfer to be cancelled.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Close(System.Boolean)">
            <summary>Quit the FTP session.</summary> 
            <remarks>If <c>abruptClose</c> is <c>true</c> then the session will be closed immediately 
            by closing the control socket without sending the <c>QUIT</c> command, otherwise the
            session will be closed by sending a <c>QUIT</c> command before closing the socket.</remarks>
            <param name="abruptClose">Closes session abruptly (see comments).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to connect to an FTP server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginConnect</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Connect"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous connection.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndConnect(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginConnect(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndConnect</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to close the FTP connection.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginClose</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous closure.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to close the FTP connection.
            </summary>
            <remarks>
            <para>If <c>abruptClose</c> is <c>true</c> then the session will be closed immediately 
            by closing the control socket without sending the <c>QUIT</c> command, otherwise the
            session will be closed by sending a <c>QUIT</c> command before closing the socket.</para>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginClose</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/>.</para>
            </remarks>
            <param name="abruptClose">Closes session abruptly (see comments).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous closure.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndClose(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginClose(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndClose</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to log into an account on the FTP server using 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password"/>.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginLogin</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Login"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous login.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndLogin(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginLogin(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndLogin</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to supply the user-name to log into an account on the FTP server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSendUserName</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendUserName(System.String)"/>.</para>
            </remarks>
            <param name="user">User-name of the client's account on the server.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous send.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndSendUserName(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendUserName(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndSendUserName</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to supply the password for the previously supplied
            user-name to log into the FTP server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSendPassword</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.SendPassword(System.String)"/>.</para>
            </remarks>
            <param name="password">Password of the client's account on the server.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous send.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndSendPassword(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSendPassword(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndSendPassword</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Login">
            <summary>Log into an account on the FTP server using <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Password"/>.</summary>
            <remarks>This is only necessary if <see cref="!:AutoLogin"/> is <c>false</c>.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SendUserName(System.String)">
            <summary>
            Supply the user-name to log into an account on the FTP server. 
            Must be followed by the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SendPassword(System.String)"/> method.
            </summary>
            <remarks>This is only necessary if <see cref="!:AutoLogin"/> is <c>false</c>.</remarks>
            <param name="user">User-name of the client's account on the server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SendPassword(System.String)">
            <summary>
            Supply the password for the previously supplied
            user-name to log into the FTP server. Must be
            preceeded by the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SendUserName(System.String)"/> method
            </summary>
            <remarks>This is only necessary if <see cref="!:AutoLogin"/> is <c>false</c>.</remarks>
            <param name="loginPassword">Password of the client's account on the server.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ResumeTransfer">
            <summary>Make the next file transfer (upload or download) resume.</summary>
            <remarks>
            <para>
            For uploads, the
            bytes already transferred are skipped over, while for downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ResumeNextTransfer">
            <summary>Make the next file transfer (upload or download) resume.</summary>
            <remarks>
            <para>
            For uploads, the
            bytes already transferred are skipped over, while for downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ResumeNextDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            <para>
            If the next transfer is an upload, this setting is cancelled. 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>
            <para>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</para>
            <para>Any asynchronous transfers currently queued cancelled also.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTask(System.IAsyncResult)">
            <summary>
            Cancels the given asynchronous task.
            </summary>
            <remarks>
            <para>The task will always be removed if it isn't currently executing.  If the task
            is currently executing then it can only be cancelled if it is a file-transfer
            or a directory-listing.</para>
            </remarks>
            <param name="task">Task to be cancelled.  Pass in the object returned by a connection's BeginXYZ() method.</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTask(System.Int32)">
            <summary>
            Cancels the asynchronous task with the given ID.
            </summary>
            <remarks>
            <para>The task will always be removed if it isn't currently executing.  If the task
            is currently executing then it can only be cancelled if it is a file-transfer
            or a directory-listing.</para>
            </remarks>
            <param name="task">ID of task to be cancelled.  Pass in the object returned by a connection's BeginXYZ() method.</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to make the next file transfer (upload or download) resume.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginResumeTransfer</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ResumeTransfer"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous resumption.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndResumeTransfer(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginResumeTransfer(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndResumeTransfer</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.TransferFileFXP(EnterpriseDT.Net.Ftp.ExFTPConnection,System.String,System.String)">
            <summary>
            Transfer a file between FTP servers using FXP.
            </summary>
            <remarks>
            <para>
            For this to succeed, both FTP servers must have FXP
            enabled. The source (which is this connection's server)
            and destination FTPClients must already
            be connected to their FTP servers when this method is called.
            </para>
            <para>
            The file will be transferred in whatever mode is currently set, i.e.
            BINARY or ASCII.
            </para>
            <para>
            The file must be in the current working directory of the source, and will
            be placed in the current working directory of the destination.
            </para>
            </remarks>
            <param name="destination">Connection to the destination server.</param>
            <param name="sourceFile">name of file on source server to transfer</param>
            <param name="destinationFile">name of file to be written to destination server</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadStream(System.IO.Stream,System.String)">
             <summary>
             Upload a stream of data to the FTP server in the current working directory.
             </summary>
             <remarks>
             <para>The stream is closed after the transfer is complete if
             <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
             open otherwise.  If the stream is left open the its position will be at the
             end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
             position if required.</para>
             <para><example>The following example uploads the contents of 
             a <see cref="T:System.IO.MemoryStream"/> to the server and downloads the
             same file into another MemoryStream:</example>
             <code>
              // build StringStream (defined below) for "Hello world"
             byte[] bytes = Encoding.ASCII.GetBytes("Hello world");
             MemoryStream inStr = new MemoryStream(bytes);
            
             // upload the stream to a file on the server
             ftpConnection.UploadStream(inStr, "helloworld.txt");
             inStr.Close();
            
             // create a MemoryStream and download into it
             MemoryStream outStr = new MemoryStream();
             ftpConnection.DownloadStream(outStr, "helloworld.txt");
             outStr.Seek(0, SeekOrigin.Begin);
             string str = Encoding.GetString(outStr.GetBuffer());
             Console.WriteLine(str);
             outStr.Close();
             </code></para>
             </remarks>
             <param name="srcStream">Input stream of data to put.</param>
             <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadByteArray(System.Byte[],System.String)">
             <summary>
             Upload an array of bytes to the FTP server in the current working directory.
             </summary>
             <para><example>The following example uploads the string <c>"Hello world"</c>
             to the server into a file called <c>helloworld.txt</c>:</example>
             <code>
                // get data to be transferred
               string s = "Hello world";
               byte[] bytes = Encoding.ASCII.GetBytes(s);
            
               // upload the byte-array to a file on the server
               ftpConnection.UploadByteArray(bytes, "helloworld.txt");
             </code></para>
             <param name="bytes">Array of bytes to put.</param>
             <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadStream(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Upload a stream of data to the FTP server in the current working directory.  Allows appending
            if current file exists.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadByteArray(System.Byte[],System.String,System.Boolean)">
            <summary>
            Upload data to the FTP server in the current working directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadFile(System.String,System.String,System.Boolean)">
            <summary>
            Upload a local file to the FTP server in the current working directory. Allows appending
            if current file exists.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localPath"></param>
            <param name="remoteFile"></param>
            <param name="append"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadDirectory(System.String,System.String)">
            <summary>
            Uploads the local directory (and its subdirectories) to the remote directory.
            </summary>
            <remarks>
            <para>The remote directory will be created if it doesn't already exist.</para>
            <para><see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/> should be used if 
            more control over which files are transferred is required.</para>
            </remarks>
            <param name="localDirectory">Local directory</param>
            <param name="remoteDirectory">Remote directory (will be created if it doesn't already exist)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory.
            </summary>
            <remarks>
            <para>Wildcard expression use <c>'?'</c> to match any single character and <c>'*'</c>
            to match multiple characters.  For example, <c>"file*.txt"</c> will match any file-name
            starting with <c>"file"</c> and having an extension <c>".txt"</c>.</para>
            <para>Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </para>
            </remarks>
            <param name="localDirectory">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadMultiple(System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localDirectory"></param>
            <param name="wildcard"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory.
            </summary>
            <remarks><para>Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </para>
            </remarks>
            <param name="localDirectory">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localDirectory"></param>
            <param name="filter"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory.
            </summary>
            <remarks><para>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories.</para>
            <para>Wildcard expression use <c>'?'</c> to match any single character and <c>'*'</c>
            to match multiple characters.  For example, <c>"file*.txt"</c> will match any file-name
            starting with <c>"file"</c> and having an extension <c>".txt"</c>.</para>
            <para>Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localDirectory"></param>
            <param name="remoteDirectory"></param>
            <param name="wildcard"></param>
            <param name="includeSubDirs"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory.
            </summary>
            <remarks><para>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories.</para>
            <para>Wildcard expression use <c>'?'</c> to match any single character and <c>'*'</c>
            to match multiple characters.  For example, <c>"file*.txt"</c> will match any file-name
            starting with <c>"file"</c> and having an extension <c>".txt"</c>.</para>
            <para>Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncUploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="localDirectory"></param>
            <param name="remoteDirectory"></param>
            <param name="filter"></param>
            <param name="includeSubDirs"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginTransferFileFXP(EnterpriseDT.Net.Ftp.ExFTPConnection,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronously transfer a file between FTP servers using FXP.
            </summary>
            <remarks>
            <para>
            For this to succeed, both FTP servers must have FXP
            enabled. The source (which is this connection's server)
            and destination FTPClients must already
            be connected to their FTP servers when this method is called.
            </para>
            <para>
            The file will be transferred in whatever mode is currently set, i.e.
            BINARY or ASCII.
            </para>
            <para>
            The file must be in the current working directory of the source, and will
            be placed in the current working directory of the destination.
            </para>
            </remarks>
            <param name="destination">Connection to the destination server.</param>
            <param name="sourceFile">name of file on source server to transfer</param>
            <param name="destinationFile">name of file to be written to destination server</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndTransferFileFXP(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in the <c>BeginTransferFileFXP</c> method.
            </summary>
            <remarks>
            <para>Before calling <c>BeginTransferFileFXP</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginTransferFileFXP</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginTransferFileFXP</c> method as a parameter.  This parameter may then be
            passed to the <c>EndTransferFileFXP</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a local file to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a local file to the FTP server in the 
            current working directory. Allows appending if current file exists.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a local file to the FTP server in the 
            current working directory. Allows appending if current file exists.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadFile(System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadDirectory(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload the local directory (and its subdirectories) to the remote directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadDirectory(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localDirectory">Local directory</param>
            <param name="remoteDirectory">Remote directory (will be created if it doesn't already exist)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadFile</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadDirectory</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadDirectory</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadDirectory</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadDirectory(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="!:BeginUploadDirectory(string, string, bool, AsyncCallback, object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload multiple files to the FTP server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.UploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if <c>true</c>, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadFile</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadFile</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadFile</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadFile</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadFile</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadFile(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadMultiple(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadMultiple</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadMultiple</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadMultiple</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadMultiple</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadMultiple</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a stream of data to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadStream</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String)"/>.</para>
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload a stream of data to the FTP server 
            in the current working directory.  
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadStream</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadStream(System.IO.Stream,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="srcStream">Input stream of data to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadStream(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadStream</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadStream</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadStream</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadStream</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadStream</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadStream(System.IO.Stream,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload an array of bytes to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadByteArray</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String)"/>.</para>
            </remarks>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload data to the FTP server in the current working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginUploadByteArray</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.UploadByteArray(System.Byte[],System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndUploadByteArray(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginUploadByteArray</c>
            methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginUploadByteArray</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginUploadByteArray</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginUploadByteArray</c> method as a parameter.  This parameter may then be
            passed to the <c>EndUploadByteArray</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginUploadByteArray(System.Byte[],System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadStream(System.IO.Stream,System.String)">
            <summary>Download a file from the FTP server and write it to the given stream.</summary>
            <remarks>
            <para>Transfers are in the current <see cref="!:TransferType"/>.
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) is are left
            open otherwise.  If the stream is left open the its position will be at the
            end of the stream.  Use <see cref="M:System.IO.Stream.Seek(System.Int64,System.IO.SeekOrigin)"/> to change the
            position if required.</para>
            <para>
            <example>The following example shows a file being downloaded into a 
            <see cref="T:System.IO.MemoryStream"/>, which is then used to initialize a
            <see cref="T:System.IO.StreamReader"/>.</example>
            <code>ftpConnection.CloseStreamsAfterTransfer = false;
            MemoryStream memStr = new MemoryStream();
            ftpConnection.DownloadStream(memStr, "filename");
            memStr.Seek(0, SeekOrigin.Begin);
            StreamReader inStr = new StreamReader(memStr);
            ... use sr for whatever ...</code></para>
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadByteArray(System.String)">
            <summary>Download data from the FTP server and return it as a byte-array.</summary>
            <remarks>
            <para>Transfers in the current <see cref="!:TransferType"/>. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <returns>Returns a byte-array containing the file-data.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadFile(System.String,System.String)">
            <summary>Download a file from the FTP server and save it locally.</summary>
            <remarks>Transfers in the current <see cref="!:TransferType"/>. </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.TransferParameters)">
            <summary>Download a file from the FTP server and save it locally.</summary>
            <remarks>Transfers in the current <see cref="!:TransferType"/>. </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="transferParams">Additional transfer parameters</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode,EnterpriseDT.Net.Ftp.TransferParameters)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localPath"></param>
            <param name="remoteFile"></param>
            <param name="transferParams"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadDirectory(System.String,System.String)">
            <summary>
            Downloads the remote directory (and its subdirectories) to the local directory.
            </summary>
            <remarks>
            <para>The local directory will be created if it doesn't already exist.</para>
            <para><see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/> should be used if 
            more control over which files are transferred is required.</para>
            </remarks>
            <param name="localDirectory">Local directory</param>
            <param name="remoteDirectory">Remote directory (will be created if it doesn't already exist)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <remarks>
            Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </remarks>
            <param name="localDirectory">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadMultiple(System.String,System.String)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localDirectory"></param>
            <param name="wildcard"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <remarks>
            Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </remarks>
            <param name="localDirectory">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localDirectory"></param>
            <param name="filter"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories. Note that if the <c>LocalDirectory</c> 
            property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadMultiple(System.String,System.String,System.String,System.Boolean)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localDirectory"></param>
            <param name="remoteDirectory"></param>
            <param name="wildcard"></param>
            <param name="includeSubDirs"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories. Note that if the <c>LocalDirectory</c> property is set and <c>localDirectory</c> is a relative path,
            it will be combined with the <c>LocalDirectory</c> to find the target directory.
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.SyncDownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            INTERNAL USE ONLY
            </summary>
            <param name="localDirectory"></param>
            <param name="remoteDirectory"></param>
            <param name="filter"></param>
            <param name="includeSubDirs"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and save it locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.WriteMode,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and save it locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="writeMode">Overwrite, Append or Resume.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,EnterpriseDT.Net.Ftp.TransferParameters,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and save it locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="transferParams">Additional transfer parameters</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadDirectory(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to upload the local directory (and its subdirectories) to the remote directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadDirectory(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localDirectory">Local directory</param>
            <param name="remoteDirectory">Remote directory (will be created if it doesn't already exist)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous upload.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">if true, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download multiple files from the FTP server and save them locally.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadMultiple</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>.</para>
            </remarks>
            <param name="localDirectory">local directory name</param>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">if true, subdirectories are put</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadFile(System.String,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadFile</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginDownloadFile</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginDownloadDirectory</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginDownloadDirectory</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginDownloadDirectory</c> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadDirectory(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="!:BeginDownloadDirectory(string, string, bool, AsyncCallback, object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadMultiple(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginDownloadMultiple</c>
            methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginDownloadMultiple</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginDownloadMultiple</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginDownloadMultiple</c> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadMultiple</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadMultiple(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download a file from the FTP server and write it to the given stream.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadStream</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadStream(System.IO.Stream,System.String)"/>.</para>
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadStream(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadStream(System.IO.Stream,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadStream</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to download data from the FTP server and return it as a byte-array.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDownloadByteArray</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DownloadByteArray(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous download.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDownloadByteArray(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDownloadByteArray(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDownloadByteArray</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteFile(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="remoteFile">Name of remote file to delete.</param>
            <returns><c>true</c> if file was deleted successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectory(System.String)">
            <summary>Delete the specified remote directory.</summary>
            <remarks>
            This method does not recursively delete files.
            </remarks>
            <param name="directory">Name of remote directory to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String)">
            <summary>
            Delete multiple files in the current remote directory.
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory.
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,System.String,System.Boolean)">
            <summary>
            Delete all the files in the supplied remote directory (and optionally its subdirectories) 
            that match the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the wildcard are deleted.
            </remarks>
            <param name="remoteDirectory">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">true if recursing through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete all the files in the supplied remote directory (and optionally its subdirectories) 
            that match the supplied filter.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted.
            </remarks>
            <param name="remoteDirectory">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">true if recursing through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectoryTree(System.String)">
            <summary> 
            Delete this entire remote directory and its contents recursively, including all
            subdirectories.
            </summary>
            <remarks>
            Use this method with extreme care!
            </remarks>
            <param name="remoteDirectory">name of remote directory</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the current directory
            that match the given wild-card.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteMultipleFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String)"/>.</para>
            </remarks>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the current directory
            that match the given <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteMultipleFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter)"/>.</para>
            </remarks>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the given directory
            that match the given wild-card.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteMultipleFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,System.String,System.Boolean)"/>.</para>
            </remarks>
            <param name="remoteDirectory">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="includeSubDirs">determines whether or not subdirectories should be included</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the current directory
            that match the given <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/>.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteMultipleFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)"/>.</para>
            </remarks>
            <param name="remoteDirectory">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="includeSubDirs">determines whether or not subdirectories should be included</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDeleteMultipleFiles(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginDeleteMultipleFiles</c>
            methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginDeleteMultipleFiles</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginDeleteMultipleFiles</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginDeleteMultipleFiles</c> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteMultipleFiles</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(EnterpriseDT.Net.Ftp.FileFilter,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteMultipleFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete all the files in the given directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteDirectory(System.String)"/>.</para>
            </remarks>
            <param name="remoteDirectory">remote directory name</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous delete.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDeleteDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectory(System.String,System.AsyncCallback,System.Object)"/>, 
            you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginDeleteDirectory</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginDeleteMultipleFiles</c> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize">
            <summary>
            Synchronizes <see cref="!:LocalDirectory"/> on the local machine with 
            <see cref="!:ServerDirectory"/> according to the synchronization rules
            in <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/>.
            </summary>
            <remarks>
            See <see cref="!:Synchronize(FTPSyncRules,string,string)"/> for more details.
            </remarks>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(System.String,System.String)">
            <summary>
            Synchronizes the given local directory with the given remote directory 
            according to the synchronization rules in <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/>.
            </summary>
            <remarks>
            See <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(System.String,System.String,EnterpriseDT.Net.Ftp.FTPSyncRules)"/> for more details.
            </remarks>
            <param name="localDirectory">Directory on the local machine to synchronize.</param>
            <param name="serverDirectory">Directory on the server to synchronize.</param>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(EnterpriseDT.Net.Ftp.FTPSyncRules)">
            <summary>
            Synchronizes <see cref="!:LocalDirectory"/> on the local machine with 
            <see cref="!:ServerDirectory"/> according to the given synchronization rules.
            </summary>
            <remarks>
            See <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(System.String,System.String,EnterpriseDT.Net.Ftp.FTPSyncRules)"/> for more details.
            </remarks>
            <param name="syncRules">Rules to apply to the synchronization operation.</param>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronize(System.String,System.String,EnterpriseDT.Net.Ftp.FTPSyncRules)">
            <summary>
            Synchronizes the given local directory with the given remote directory 
            according to the given synchronization rules.
            </summary>
            <remarks>
            <para>Synchronization aims to ensure that the files in a directory
            on the local machine match those in a directory on the remote machine.</para>
            <para>The instructions contained in <see cref="T:EnterpriseDT.Net.Ftp.FTPSyncRules"/> inform
            the synchronization process how files should be matched.  If these rules
            are insufficient then the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.SynchronizingFile"/> event may be used
            to provide customized logic for matching files.</para>
            <para>The <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronizing"/> and <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronized"/> events
            are triggered before and after the synchronization operation is performed,
            respectively.</para>
            </remarks>
            <param name="localDirectory">Directory on the local machine to synchronize.
            If this argument is <c>null</c> then <see cref="!:LocalDirectory"/> will be used.</param>
            <param name="serverDirectory">Directory on the server to synchronize.
            If this argument is <c>null</c> then <see cref="!:ServerDirectory"/> will be used.</param>
            <param name="syncRules">Rules to apply to the synchronization operation.
            If this argument is <c>null</c> then <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/> will be used.</param>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to synchronize a local directory with a directory
            on the server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSynchronize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous synchronization.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to synchronize a local directory with a directory
            on the server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSynchronize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.</para>
            </remarks>
            <param name="localDirectory">Directory on the local machine to synchronize.
            If this argument is <c>null</c> then <see cref="!:LocalDirectory"/> will be used.</param>
            <param name="serverDirectory">Directory on the server to synchronize.
            If this argument is <c>null</c> then <see cref="!:ServerDirectory"/> will be used.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous synchronization.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(EnterpriseDT.Net.Ftp.FTPSyncRules,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to synchronize a local directory with a directory
            on the server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSynchronize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.</para>
            </remarks>
            <param name="syncRules">Rules to apply to the synchronization operation.
            If this argument is <c>null</c> then <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/> will be used.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous synchronization.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(EnterpriseDT.Net.Ftp.FTPSyncRules,System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to synchronize a local directory with a directory
            on the server. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginSynchronize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.</para>
            </remarks>
            <param name="localDirectory">Directory on the local machine to synchronize.
            If this argument is <c>null</c> then <see cref="!:LocalDirectory"/> will be used.</param>
            <param name="serverDirectory">Directory on the server to synchronize.
            If this argument is <c>null</c> then <see cref="!:ServerDirectory"/> will be used.</param>
            <param name="syncRules">Rules to apply to the synchronization operation.
            If this argument is <c>null</c> then <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules"/> will be used.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous synchronization.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndSynchronize(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginSynchronize(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndSynchronize</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><see cref="!:FTPSyncReport"/> containing results of synchronization operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeSiteCommand(System.String,System.String[])">
            <summary>
            Invokes the given site command on the server.
            </summary>
            <remarks>
            <para>
            Site-specific commands are special commands that may be defined by a server.  
            Such commands are defined on a server-by-server basis.
            </para>
            <para>
            For example, a specific FTP server might define a <c>PROCESS</c> site-command which 
            results in another piece of software on the server being directed to perform some
            sort of processing on a particular file.  The command required might be:
            </para>
            <code>
            	SITE PROCESS file-path
            </code>
            <para>
            In this case, the site-command would be invoked as follows:
            </para>
            <code>
            	ftpConnection.InvokeSiteCommand("PROCESS", filePath);
            </code>
            </remarks>
            <param name="command">Site-specific command to be invoked.</param>
            <param name="arguments">Arguments of the command to be invoked.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeFTPCommand(System.String,System.String[])">
            <summary>
            Invokes the given literal FTP command on the server.
            </summary>
            <remarks>
            <para>
            If a particular FTP command is not supported by <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/>, this
            method may sometimes be used to invoke the command.  This will only work for 
            simple commands that don't require special processing.
            </para>
            <para>
            An example of an FTP command that could be invoked using this method is the 
            <c>FEAT</c> command (which is actually behind the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFeatures"/> method.
            This would be done as follows:
            </para>
            <code>
            	string features = ftpConnection.InvokeFTPCommand("FEAT", "211");
            </code>
            The returned <c>string</c> could then be parsed to obtain the supported features
            of the server.
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFeatures">
            <summary>Get the server supplied features.</summary>
            <returns>
            <c>string</c>-array containing server features, or <c>null</c> if no features or not supported.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetSystemType">
            <summary>Get the type of the operating system at the server.</summary>
            <returns>The type of server operating system.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetCommandHelp(System.String)">
            <summary>Get the help text for the specified FTP command.</summary>
            <param name="command">Name of the FTP command to get help for.</param>
            <returns>Help text from the server for the supplied command.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to invoke the given literal FTP command on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginInvokeFTPCommand</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeFTPCommand(System.String,System.String[])"/>.</para>
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="validCodes">Valid return-codes (used for validating reply).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndInvokeFTPCommand(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndInvokeFTPCommand</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to invoke the given site command on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginInvokeSiteCommand</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.InvokeSiteCommand(System.String,System.String[])"/>.</para>
            </remarks>
            <param name="command">Site-specific command to be invoked.</param>
            <param name="arguments">Arguments of the command to be invoked.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndInvokeSiteCommand(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeFTPCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginInvokeSiteCommand(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndInvokeSiteCommand</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to get the server supplied features.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFeatures</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFeatures"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetFeatures(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFeatures(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetFeatures</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>
            <c>string</c>-array containing server features, or <c>null</c> if no features or not supported.
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to get the type of the operating system at the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetSystemType</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSystemType"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetSystemType(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSystemType(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetSystemType</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The type of server operating system.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)">
            <summary>
            [FTP/FTPS Only] Begins an asynchronous request to get the help text for the specified FTP command.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetCommandHelp</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetCommandHelp(System.String)"/>.</para>
            </remarks>
            <param name="command">Name of the FTP command to get help for.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetCommandHelp(System.IAsyncResult)">
            <summary>
            [FTP/FTPS Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetCommandHelp(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetCommandHelp</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>Help text from the server for the supplied command.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos">
            <summary>
            Returns the working directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos(System.String)">
            <summary>
            Returns the given directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFiles">
            <summary>
            Lists current working directory's contents as an array of strings of file-names.
            </summary>
            <returns>An array of current working directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFiles(System.String)">
            <summary>
            List the given directory's contents as an array of strings of file-names.
            </summary>
            <param name="directory">Name of directory</param>
            <remarks>
            The directory name can sometimes be a file mask depending on the FTP server.
            </remarks>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFiles(System.String,System.Boolean)">
            <summary>
            List the given directory's contents as an array of strings of file-names or
            full file details.
            </summary>
            <param name="directory">Name of directory</param>
            <param name="full">true if the full listing is required including file size</param>
            <remarks>
            The directory name can sometimes be a file mask depending on the FTP server.
            </remarks>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos(System.String,System.String,System.Boolean)">
            <summary>
            Returns the files in the given directory that match the wildcard, and optionally 
            that of its subdirectories.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="wildcard">Wildcard filter (not supported on all servers)</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CreateDirectory(System.String)">
            <summary>Create the specified remote directory.</summary>
            <param name="directory">Name of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetWorkingDirectory">
            <summary>
            Returns the working directory on the server.
            </summary>
            <returns>The working directory on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ChangeWorkingDirectory(System.String)">
            <summary>
            Changes the working directory.
            </summary>
            <param name="directory">Directory to change to (may be relative or absolute).</param>
            <returns><c>true</c> if the working directory was changed.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ChangeWorkingDirectoryUp">
            <summary>
            Changes to the parent of the current working directory on the server.
            </summary>
            <returns><c>true</c> if the working directory was changed.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearDirectoryCache">
            <summary>
            Clears the directory cache completely.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearDirectoryCache(System.String)">
            <summary>
            Clears a particular directory-listing from the directory cache.
            </summary>
            <param name="directory">Directory to remove.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the working directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents (and optionally that
            of its subdirectories) as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.String,System.String,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents (and optionally that
            of its subdirectories) as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFileInfos</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="wildcard">Wildcard filter (not supported on all servers)</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetFileInfos(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginGetFileInfos</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginGetFileInfos</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginGetFileInfos</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginGetFileInfos</c> method as a parameter.  This parameter may then be
            passed to the <c>EndGetFileInfos</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFileInfos(System.String,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFiles(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to list the current working directory's contents as an array of strings of file-names.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFiles(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to retrieve the given directory's contents as an array of strings of file-names.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetFiles</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFiles(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetFiles(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in one of the <c>BeginGetFiles</c> methods.
            </summary>
            <remarks>
            <para>Before calling <c>BeginGetFiles</c>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <c>BeginGetFiles</c> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <c>BeginGetFiles</c> method as a parameter.  This parameter may then be
            passed to the <c>EndGetFiles</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>An array of current working directory listing strings.</returns>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFiles(System.AsyncCallback,System.Object)"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetFiles(System.String,System.AsyncCallback,System.Object)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete the specified remote directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteDirectoryTree</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteDirectoryTree(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous deletion.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDeleteDirectoryTree(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteDirectoryTree(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to create the specified remote directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginCreateDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.CreateDirectory(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous creation.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndCreateDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginCreateDirectory(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndCreateDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the working directory on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetWorkingDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetWorkingDirectory"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetWorkingDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetWorkingDirectory(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetWorkingDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The working directory on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to change the working directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeWorkingDirectory</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectory(System.String)"/>.</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous change.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndChangeWorkingDirectory(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectory(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeWorkingDirectory</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the directory was changed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to change to the parent of the current working directory on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeWorkingDirectoryUp</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.ChangeWorkingDirectoryUp"/>.</para>
            </remarks>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous change.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndChangeWorkingDirectoryUp(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginChangeWorkingDirectoryUp(System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeWorkingDirectoryUp</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the directory was changed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RenameFile(System.String,System.String)">
            <summary>Rename a file or directory.</summary>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">New file-name.</param>
            <returns><c>true</c> if the file was renamed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetSize(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <remarks>
            This is not a standard FTP command, it is defined in "Extensions to FTP", a draft RFC 
            (draft-ietf-ftpext-mlst-16.txt).
            </remarks>
            <param name="remoteFile">Name or path of remote file in current working directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <remarks>
            <para>
            Not all servers support absolute paths, so it's safer to use relative paths.  The
            path separator should be '/'.  If problems are encountered the safest option is
            to change into the desired directory prior to calling this method and then supplying
            the name of the file without its path.
            </para>
            <para>
            The existence of local files may be checked using the <see cref="M:System.IO.File.Exists(System.String)"/>
            method.
            </para>
            </remarks>
            <param name="remoteFile">Path of remote file.</param>
            <returns><c>true</c> if the named file exists on the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.DirectoryExists(System.String)">
            <summary>
            Tests if the given directory exists.
            </summary>
            <remarks>
            The FTP protocol doesn't specify a standard way of testing for the existence of a directory, so
            this method tries to change into the directory and assumes that that the directory doesn't
            exist if an exception is thrown.  The current working directory is restored before the method 
            returns.
            </remarks>
            <param name="dir">Name of directory</param>
            <returns><c>true</c> if directory exists and false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetLastWriteTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="remoteFile">Name of remote file.</param>
            <returns>Last write time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetLocalCrc(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC of a local file.
            </summary>
            <param name="remoteFile">Name of remote file.</param>
            <param name="offset">Location in the file at which to start calculating the CRC (default is 0).</param>
            <param name="length">Number of bytes from the offset location to calculate the CRC for (default is -1 which means to end of file).</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetRemoteCrc(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC of a remote file.
            </summary>
            <param name="remoteFile">Name of remote file.</param>
            <param name="offset">Location in the file at which to start calculating the CRC (default is 0).</param>
            <param name="length">Number of bytes from the offset location to calculate the CRC for (default is -1 which means to end of file).</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to delete the specified remote file.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDeleteFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.DeleteFile(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous deletion.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDeleteFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDeleteFile(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndDeleteFile</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if file was deleted successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to rename a file or directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginRenameFile</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.RenameFile(System.String,System.String)"/>.</para>
            </remarks>
            <param name="from">Name of file or directory to rename.</param>
            <param name="to">New file-name.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous rename.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndRenameFile(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginRenameFile(System.String,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndRenameFile</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the directory was changed successfully.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to check for the existence of a file on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginExists</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Exists(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Path of remote file.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous rename.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndExists(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginExists(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndExists</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the file exists.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to check for the existence of a directory on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginDirectoryExists</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Exists(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Path of remote file.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous rename.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndDirectoryExists(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginDirectoryExists(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndExists</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns><c>true</c> if the file exists.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the size of a remote file. 
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetSize</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetSize(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetSize(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetSize(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetSize</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the modification time for a remote file.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetLastWriteTime</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetLastWriteTime(System.String)"/>.</para>
            </remarks>
            <param name="remoteFile">Name of remote file in current working directory.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetLastWriteTime(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLastWriteTime(System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetWriteTime</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLocalCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the CRC of a local file.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetLocalCRC</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetLocalCrc(System.String,System.Int64,System.Int32)"/>.</para>
            </remarks>
            <param name="localFile">Name of local file.</param>
            <param name="offset">Location in the file at which to start calculating the CRC (default is 0).</param>
            <param name="length">Number of bytes from the offset location to calculate the CRC for (default is -1 which means to end of file).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetLocalCRC(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLocalCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLocalCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLocalCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetLocalCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetLocalCRC</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The CRC of the file.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetRemoteCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to get the CRC of a remote file.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginGetRemoteCRC</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetRemoteCrc(System.String,System.Int64,System.Int32)"/>.</para>
            </remarks>
            <param name="remoteFile">Name of remote file.</param>
            <param name="offset">Location in the file at which to start calculating the CRC (default is 0).</param>
            <param name="length">Number of bytes from the offset location to calculate the CRC for (default is -1 which means to end of file).</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.EndGetRemoteCRC(System.IAsyncResult)">
            <summary>
            Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetRemoteCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetRemoteCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetRemoteCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.BeginGetRemoteCRC(System.String,System.Int64,System.Int32,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndGetRemoteCRC</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The CRC of the file.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ReadLicenseDetailsFromRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.WriteLicenseDetailsToRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearProperties">
            <summary>
            Clears properties by setting them to their default values.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)">
            <summary>
            Loads properties from the given file.
            </summary>
            <remarks>
            <para>The file must be in the format produced by <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)"/>.</para>
            <para><see cref="!:PropertyChanged"/> events are not triggered while properties are being loaded.</para>
            </remarks>
            <param name="filePath">Path of the file containing the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)">
            <summary>
            Loads properties from the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            <para>The content of the stream must be in the format produced by <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)"/>.</para>
            <para><see cref="!:PropertyChanged"/> events are not triggered while properties are being loaded.</para>
            </remarks>
            <param name="inputStream">Stream containing the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)">
            <summary>
            Saves the properties of the current connection in the given file.
            </summary>
            <remarks>
            The content is written in XML format with the root element being called <c>ExFTPConnection</c>
            and each property having an XML element of the same name.
            </remarks>
            <param name="filePath">Name of the file in which to store the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.IO.Stream)">
            <summary>
            Saves the properties of the current connection in the given <see cref="T:System.IO.Stream"/>.
            </summary>
            <remarks>
            The content is written in XML format with the root element being called <c>ExFTPConnection</c>
            and each property having an XML element of the same name.
            </remarks>
            <param name="outputStream">Stream in which to store the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">Serialization info.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetXml">
            <summary>
            Returns a string containing an XML representation of the current instance.
            </summary>
            <returns>XML representation of the current instance</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.WriteXml(System.Xml.XmlWriter)">
            <summary>
            Converts the current connection into its XML representation. 
            </summary>
            <remarks>
            <para>
            The content is written in XML format with the root element being called <c>ExFTPConnection</c>
            and each property having an XML element of the same name.
            </para>
            <para>
            Note that connections can be written directly to files and streams using the 
            methods <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/> and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.IO.Stream)"/>, respectively.
            </para>
            </remarks>
            <param name="writer">The <see cref="T:System.Xml.XmlWriter"/> to which the connection is serialized.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetSchema">
            <summary>
            This method is only included to satisfy the <see cref="T:System.Xml.Serialization.IXmlSerializable"/> interface.
            It returns <c>null</c>.
            </summary>
            <returns>This method always returns <c>null</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ReadXml(System.String)">
            <summary>
            Initializes a connection the given XML representation.
            </summary>
            <param name="xml">XML representation of a connection instance.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ReadXml(System.Xml.XmlReader)">
            <summary>
            Initializes a connection from its XML representation.
            </summary>
            <remarks>
            Connections can be initialized directly from files and streams using the 
            methods <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)"/>, respectively.
            </remarks>
            <param name="reader"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ReadXml(System.Xml.XmlDocument)">
            <summary>
            Initializes a connection from its XML representation.
            </summary>
            <remarks>
            Connections can be initialized directly from files and streams using the 
            methods <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.IO.Stream)"/>, respectively.
            </remarks>
            <param name="reader"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ParseXml(System.Xml.XmlElement)">
            <summary>
            Extracts the connection properties from the given <see cref="T:System.Xml.XmlElement"/>.
            </summary>
            <param name="element">The element whose children contain the properties.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnConnected(System.Exception)">
            <summary>
            Call base then start the keep-alive thread.
            </summary>
            <param name="exception">Exception that occurred during operation.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnClosing(System.Exception)">
            <summary>
            Stop the keep-alive thread then call base.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.StartKeepAliveThread">
            <summary>
            Start the keep-alive thread.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.StopKeepAliveThread">
            <summary>
            Clear the flag that keeps the keep-alive thread running.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveRun">
            <summary>
            Keep-alive thread's run method.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ftpClient_ReplyReceived(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>
            Remember the time so that we don't send keep-alives unnecessarily.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.TestConnection">
            <summary>
            Test if the connection is still alive.  If not then call Close so
            that events occur as they should.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnProxySettingsChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when one of the properties of ProxySettings has changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.poolSettings_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when a ConcurrentTransferSettings property is changed.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnSynchronizing(System.String,System.String)">
            <summary>
            Called before synchronization begins.
            </summary>
            <param name="localDirectory">Local directory</param>
            <param name="serverDirectory">Remote directory</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnSynchronized(System.String,System.String,System.Boolean,System.Exception,EnterpriseDT.Net.Ftp.FTPSyncResults)">
            <summary>
            Called after synchronization ends.
            </summary>
            <param name="localDirectory">Local directory</param>
            <param name="serverDirectory">Remote directory</param>
            <param name="cancelled"><c>true</c> if the operation was cancelled (and the file was not deleted).</param>
            <param name="ex">Exception thrown (if failed)</param>
            <param name="results">Results of the operation</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnSynchronizingFile(EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs)">
            <summary>
            Called when a file is about to be synchronized.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnTaskQueued(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>
            Called when a new task is queued.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnTaskRunning(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>
            Called just before a task is run.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnTaskCompleted(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>
            Called just after a task is run.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.OnTaskCancelled(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>
            Called when a task has been cancelled.
            </summary>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.NewSite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeEventHandler(System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handlers (on the GUI thread if possible).
            </summary>
            <param name="eventHandler">Event-handlers to invoke.</param>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeEventHandler(System.Boolean,System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handlers (on the GUI thread if possible).
            </summary>
            <param name="preferGuiThread">If <c>true</c> then the handler will be invoked on the GUI thread if possible.</param>
            <param name="eventHandler">Event-handlers to invoke.</param>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.InvokeEventHandler(System.Boolean,System.Boolean,System.Delegate,System.Object,System.EventArgs)">
            <summary>
            Invokes the given event-handlers (on the GUI thread if possible).
            </summary>
            <param name="preferGuiThread">If <c>true</c> then the handler will be invoked on the GUI thread if possible.</param>
            <param name="permitAsync">Allow delegate to be called asynchronously.</param>
            <param name="eventHandler">Event-handlers to invoke.</param>
            <param name="sender">Sender</param>
            <param name="e">Event arguments</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseError(EnterpriseDT.Net.Ftp.FTPErrorEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Error"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaisePropertiesLoaded(EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesLoaded"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaisePropertiesSaved(EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesSaved"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseSynchronized(EnterpriseDT.Net.Ftp.FTPSyncEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronized"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseSynchronizing(EnterpriseDT.Net.Ftp.FTPSyncEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronizing"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseSynchronizingFile(EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.SynchronizingFile"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseTaskQueuedEvent(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskQueued"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseTaskRunningEvent(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCompleted"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseTaskCompletedEvent(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCompleted"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPConnection.RaiseTaskCancelledEvent(EnterpriseDT.Net.Ftp.FTPTaskEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCancelled"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Protocol">
            <summary>
            Type of file transfer to use.
            </summary>
            <remarks>
            edtFTPnet/Express offers two types of non-secure file transfer, FTP and HTTP. Secure file transfer
            protocols are available in edtFTPnet/PRO:
            <list type="bullet">
            <listheader><term>Type</term></listheader>
            <item>
            <term>FTP</term>
            <description>Traditional unencrypted FTP.</description>
            </item>
            <item>
            <term>FTPSExplicit</term>
            <description>FTP-over-SSL which allows switching between secure and unsecure transfers. edtFTPnet/PRO only.</description>
            </item>
            <item>
            <term>FTPSImplicit</term>
            <description>FTP-over-SSL which simply performs FTP over pure SSL sockets. edtFTPnet/PRO only.</description>
            </item>
            <item>
            <term>SFTP</term>
            <description>SSH File Transfer Protocol. edtFTPnet/PRO only.</description>
            </item>
            <item>
            <term>HTTP</term>
            <description>HTTP File Transfers. Currently, only downloads can be performed.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Timeout">
            <summary> 
            TCP timeout (in milliseconds) of the underlying sockets (0 means none).
            </summary>
            <remarks>Timout value in milliseconds.  The default value is 120000, which indicates 
            a 120 second timeout period.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.TransferBufferSize">
            <summary>
            The size of the application buffers used in reading and writing data.
            </summary>
            <remarks>
            <para>The size of receive and transmit buffers.  The default is 32700.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CloseStreamsAfterTransfer">
            <summary>
            Determines if transfer-methods taking <see cref="T:System.IO.Stream"/>s as arguments should
            close the stream once the transfer is completed.
            </summary>
            <remarks>
            If <c>CloseStreamsAfterTransfer</c> is <c>true</c> (the default) then streams are closed after 
            a transfer has completed, otherwise they are left open.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.
            </summary>
            <remarks>
            <para>This property determines the approximate number of bytes transferred
            between each <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.</para>
            <para>The default value is 4096.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.TransferNotifyListings">
            <summary>
            By default the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event is not triggered 
            during directory listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.IntegrityCheckTransfers">
            <summary>
            Control integrity checking after file transfers.
            </summary>
            <remarks>
            <para>
            Some FTP servers support the XCRC command, permitting a checksum to be
            calculated after transferring a file to ensure it transferred correctly. 
            </para>
            <para>
            If this flag is switched on, CRC checks will be attempted for binary transfers. An exception will
            be thrown if CRC checks are not supported by the server. Also, integrity checks cannot be performed
            for appends.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ForceConnectModeExtensions">
            <summary>
            Force the use of EPRT and EPSV extensions even for IPv4
            </summary>
            <remarks>
            <para>
            The IPv6 EPRT and EPSV commands are supported, but by default only used
            for IPv6. They can, however be used for IPv4, and will be if this flag
            is set to true.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CompressionPreferred">
            <summary>
            Flag to enable or disable MODE Z compression for FTP/FTPS transfers.
            </summary>
            <remarks>
            <para>
            Some FTP servers support the MODE Z command, permitting transfers to
            be compressed. This speeds up transfers significantly for files that
            are compressible such as text files.
            </para>
            <para>
            If this flag is switched on, MODE Z compression is enabled if the
            server permits it. If the flag is later switched off, MODE Z compression
            is not disabled until the connection is closed and then re-opened again.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DataEncoding">
            <summary>
            The character-encoding to use for transferring data in ASCII mode.
            </summary>
            <remarks>
            <para>
            The default is to use the default character encoding (generally UTF8). 
            Some common character encodings to try for western European languages are 
            <c>Windows-1252</c> and <c>ISO-8859-1</c>. 
            </para>
            <para>
            This encoding is not used when transferring data in binary mode.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ServerAddress">
            <summary>
            The domain-name or IP address of the FTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              ExFTPConnection ftp = new ExFTPConnection();
              ftp.Protocol = FileTransferProtocol.FTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ServerPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              ExFTPConnection ftp = new ExFTPConnection();
              ftp.Protocol = FileTransferProtocol.FTP;
              ftp.ServerAddress = "my-server-name";
              ftp.ServerPort = 21;
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the FTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the FTP client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.UserName">
            <summary>User-name of account on the server.</summary>
            <value>The user-name of the account the server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
              ExFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.Password">
            <summary>Password of account on the server.</summary>
            <value>The password of the account the FTP server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an FTP client
            connecting to a server:</example>
            <code>
            ExFTPConnection ftp = new ExFTPConnection();
            ftp.ServerAddress = "my-server-name";
            ftp.UserName = "my-username";
            ftp.Password = "my-password";
            ftp.Connect();
            ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.IsTransferring">
            <summary>
            Indicates whether or not a synchronous or asynchronous transfer is currently under way.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CommandEncoding">
            <summary>
            The character-encoding to use when dealing with file- and directory-paths.
            </summary>
            <remarks>
            The default is <c>ASCII</c>, but should be changed when communicating with FTP servers
            that have file-names containing non-ASCII characters
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled">
            <summary>
            Determines whether or not "sleeping" is enabled during multiple
            FTP/FTPS data transfers.
            </summary>
            <remarks>
            <para>FTP/FTPS uses a separate TCP connection for each data transfer (i.e. 
            upload, download, or directory listing).  TCP ports go into a TIME_WAIT 
            state for a number of seconds after each connection, making it unusable 
            for this period.  This means that it is possible to run out of TCP ports 
            when multiple files are transferred in a short period of time.</para>
            <para>Periodic sleeping can reduce this problem.  When enabled through
            the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled"/> property, the
            connection will wait for <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime"/> seconds
            each time <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep"/> files have been
            transferred via multiple-transfer operations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep">
            <summary>
            Number of transfers before "sleeping" during multiple
            FTP/FTPS data transfers.
            </summary>
            <remarks>
            <para>FTP/FTPS uses a separate TCP connection for each data transfer (i.e. 
            upload, download, or directory listing).  TCP ports go into a TIME_WAIT 
            state for a number of seconds after each connection, making it unusable 
            for this period.  This means that it is possible to run out of TCP ports 
            when multiple files are transferred in a short period of time.</para>
            <para>Periodic sleeping can reduce this problem.  When enabled through
            the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled"/> property, the
            connection will wait for <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime"/> seconds
            each time <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep"/> files have been
            transferred via multiple-transfer operations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime">
            <summary>
            Number of seconds spent "sleeping" during multiple
            FTP/FTPS data transfers.
            </summary>
            <remarks>
            <para>FTP/FTPS uses a separate TCP connection for each data transfer (i.e. 
            upload, download, or directory listing).  TCP ports go into a TIME_WAIT 
            state for a number of seconds after each connection, making it unusable 
            for this period.  This means that it is possible to run out of TCP ports 
            when multiple files are transferred in a short period of time.</para>
            <para>Periodic sleeping can reduce this problem.  When enabled through
            the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepEnabled"/> property, the
            connection will wait for <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferSleepTime"/> seconds
            each time <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MultiTransferCountBeforeSleep"/> files have been
            transferred via multiple-transfer operations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DetectTransferMode">
            <summary>
            Determines whether the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            See <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for instructions on 
            how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the 
            current registered extensions.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.SocksProxySettings">
            <summary>
            Settings for SOCKS proxy.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>ExFTPConnection</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para><c>SocksProxySettings</c> is easiest to edit using the specialized
             editor available through the Property View.</para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.SocksProxySettings"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <see cref="T:EnterpriseDT.Util.Socks.Socks4Context"/> or 
            <see cref="T:EnterpriseDT.Util.Socks.Socks5Context"/>.
            For example, for SOCKS4:
            </para>
            <code>
                   myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
                   Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
                   socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
                   socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
                   myFTPClient.SocksProxySettings = socksContext;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for FTPing through firewalls.  HTTP and SOCKS (4,4A and 4) are
            supported.  
            </para>
            <para>
             SOCKS supports both passive (PASV) and active (PORT) mode transfers. 
             Note that only passive mode transfers are possible via an HTTP proxy. There
             is no facility for HTTP proxies to listen for incoming connections, and hence active
             mode transfers cannot be done via an HTTP proxy. An exception will be thrown
             if they are attempted.
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveTransfer">
            <summary>
            Flag to enable the use of keep alive messages during data transfers.
            </summary>
            <remarks>
            During very large transfers some servers timeout, meaning
            that the transfer is not correctly completed. Most servers can't
            cope with keep alives being sent during a transfer, so only set this property if
            you are having timeout problems with very large transfers, and you can't
            increase the timeout on the server. Use with
            caution - this may cause messages to arrive out of order. 
            Note that the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAlivePeriodSecs"/> property is used to
            set the interval between keep alives.
            </remarks> 
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveIdle">
            <summary>
            Flag to enable the use of keep alive messages, which are sent to keep the
            connection alive when no activity is occurring. 
            </summary>
            <remarks>
            The client only contacts the server during periods of inactivity.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAlivePeriodSecs">
            <summary>
            Period (in seconds) at which the client contacts the server so that the connection doesn't time out.
            </summary>
            <remarks>
            The client only contacts the server during periods of inactivity (<see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveIdle"/>), or during transfers if
            <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.KeepAliveTransfer"/> is set.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.DefaultSyncRules">
            <summary>
            Rules that are used during synchronization operations when no other rules are specified.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RetryCount">
            <summary>
            Number of times to retry a failing file-transfer before giving up.
            </summary>
            <remarks>
            <para>If this value is greater than zero then file-transfer operations will be 
            retried if the given number of times.  If the operation has been retried 
            <c>RetryCount</c> times without success then an exception will be thrown.</para>
            <para>A delay of <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RetryDelay"/> milliseconds will separate
            consecutive retries.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RetryDelay">
            <summary>
            Milliseconds to wait for before retrying a failing file-transfer (if RetryCount>0).
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec. Set to -1 or 0
            to indicate no limiting should be applied.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.IsControlChannelSecure">
            <summary>
            Returns <c>true</c> if the FTP control channel is currently encrypted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ExActiveClient">
            <summary>
            Reference to the currently active <see cref="T:EnterpriseDT.Net.Ftp.IExFileTransferClient"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CurrentTask">
            <summary>
            Returns the current asynchronous operation (<c>null</c> if none)
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskProcessor">
            <summary>
            Gets a reference to the connection's task processor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RecursiveOperations">
            <summary>
            Reference to the <see cref="P:EnterpriseDT.Net.Ftp.ExFTPConnection.RecursiveOperations"/> belonging to the connection.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.ConcurrentTransferSettings">
            <summary>
            Settings for concurrent transfers.  Off by default.
            </summary>
            <remarks>
            <para>The <i>concurrent transfer feature</i> of <c>ExFTPConnection</c> and <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>
            can greatly speed up transfers.  This performance is achieved by making several connections to the 
            server at the same time, and using them such that more than one file may be transferred at the same
            time.  For example, if a maximum of 4 connections (see <see cref="!:ConcurrentTransferSettings.MaxConnections"/>
            is set then up to 4 files may be transferred simultaneously.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ExFTPConnection.CacheListings">
            <summary>
            Cache directory listings.
            </summary>
            <remarks>
            If this property <c>true</c> then directory listings will be cached between accesses.
            This can greatly speed up calls to <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFiles"/> and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.GetFileInfos"/>.
            The directory cache may be cleared at any time by calling <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearDirectoryCache"/>.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Error">
            <summary>
            Occurs when an exception is thrown during an asynchronous operation.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronizing">
            <summary>
            Triggered before synchronization actions are begun.
            </summary>
            <remarks>
            This event is triggered after all <see cref="E:EnterpriseDT.Net.Ftp.ExFTPConnection.SynchronizingFile"/> events have been triggered.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.Synchronized">
            <summary>
            Triggered when synchronization actions have been completed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.SynchronizingFile">
            <summary>
            Triggered when a decision is being made on how to synchronize a particular 
            file (i.e. transfer, delete or skip).
            </summary>
            <remarks>
            This event may be used to set the action that is to be taken
            during the synchronization operation.  The event arguments
            (<see cref="T:EnterpriseDT.Net.Ftp.FTPSyncFileEventHandler"/>) gives access to information
            about each file, including name, path, date and size.  These may be
            used to decide what sort of action should be taken, which is done
            by setting the <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.Action"/> property.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesLoaded">
            <summary>
            Occurs when properties are loaded from a file.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesCleared">
            <summary>
            Occurs when properties are cleared via <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.ClearProperties"/>.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.PropertiesSaved">
            <summary>
            Occurs when properties are saved to a file.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskQueued">
            <summary>
            Occurs when an asynchronous task is queued.
            </summary> 
            <remarks>
            Note that this event will never be invoked on the GUI thread, so no 
            Windows Forms operations should be performed directly within handlers.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskRunning">
            <summary>
            Occurs just before an asynchronous task is about to run.
            </summary> 
            <remarks>
            Note that this event will never be invoked on the GUI thread, so no 
            Windows Forms operations should be performed directly within handlers.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCompleted">
            <summary>
            Occurs after an asynchronous task has completed.
            </summary> 
            <remarks>
            Note that this event will never be invoked on the GUI thread, so no 
            Windows Forms operations should be performed directly within handlers.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ExFTPConnection.TaskCancelled">
            <summary>
            Occurs after an asynchronous task has been cancelled.
            </summary> 
            <remarks>
            Note that this event will never be invoked on the GUI thread, so no 
            Windows Forms operations should be performed directly within handlers.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs">
            <summary>
            Provides data for the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> 
            and <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPEventArgs">
            <summary>
            Base for all event argument classes.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPEventArgs.taskID">
            <summary>
            Task identifier.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPEventArgs.connectionInstance">
            <summary>
            Instance number of connection on which task is running.  
            Only applies to connections in the connection-pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPEventArgs.guiThread">
            <summary>
            Indicates whether or not the event-handler has been invoked on the GUI thread.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPEventArgs.TaskID">
            <summary>
            Identifies the asynchronous operation within which the event was triggered
            (applies to asynchronous methods only).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPEventArgs.ConnectionInstanceNumber">
            <summary>
            Identifies the pooled connection on which the task is running.
            </summary>
            <remarks>
            This property applies only to event that are generated from tasks that are
            run on connections in the connection-pool.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPEventArgs.IsGuiThread">
            <summary>
            Indicates whether or not the event-handler has been invoked on the GUI thread.
            </summary>
            <remarks>
            If this property is true, then it's safe to manipulate Windows Forms controls
            from within the event-handler, otherwise <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)"/>
            must be used.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.Type">
            <summary>
            Type of operation - load or save.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.FileName">
            <summary>
            Name of file.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.LoadSaveType">
            <summary>
            Type of file operation.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.LoadSaveType.Load">
            <summary>
            Loading settings from a file.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.LoadSaveType.Save">
            <summary>
            Save settings to a file.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPLoadSaveEventArgs.LoadSaveType.Clear">
            <summary>
            Properties have been cleared (i.e. set to their default values).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLoadSaveEventHandler">
            <summary>
            Delegate for error events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ExFTPControlSocket">
            <summary>
            Supports client-side FTP operations.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPControlSocket">
            <summary>Supports client-side FTP operations</summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.77 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.EOL">
            <summary>   Standard FTP end of line sequence</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.CARRIAGE_RETURN">
            <summary>
            Used for ASCII translation
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.LINE_FEED">
            <summary>
            Used for ASCII translation
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.MAX_ACTIVE_RETRY">
            <summary>   Maximum number of auto retries in active mode</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.CONTROL_PORT">
            <summary>   The default and standard control port number for FTP</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.DEBUG_ARROW">
            <summary>   Used to flag messages</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.PASSWORD_MESSAGE">
            <summary>   Start of password message</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.synchronizePassiveConnections">
            <summary> Synchronize PASV socket connections if true (false by default)</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.strictReturnCodes">
            <summary> Use strict return codes if true</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.remoteHost">
            <summary>Address of the remote host</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.controlPort">
            <summary>FTP port of the remote host</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.controlSock">
            <summary>  The underlying socket.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.timeout">
            <summary>  
            The timeout for the control socket
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.tcpBufferSize">
            <summary>  TCP read and write buffer size
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.writer">
            <summary>  The write that writes to the control socket</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.reader">
            <summary>  The reader that reads control data from the
            control socket
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.activePortRange">
            <summary>
            Port range for active mode
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.activeIPAddress">
            <summary>
            IP address to send with PORT command
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.nextPort">
            <summary>
            The next port number to use if activePortRange is set
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.autoPassiveIPSubstitution">
            <summary>
            If true, uses the original host IP if an internal IP address
            is returned by the server in PASV mode.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPControlSocket.logTag">
            <summary>
            Log tag.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.#ctor(System.String,System.Int32,System.Int32,System.Text.Encoding,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Constructor. Performs TCP connection and
            sets up reader/writer. Allows different control
            port to be used
            </summary>
            <param name="remoteHost">      
            Remote inet address
            </param>
            <param name="controlPort">     
            port for control stream
            </param>
            <param name="timeout">          
            the length of the timeout, in milliseconds
            </param>
            <param name="encoding">          
            encoding to use for control channel
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.#ctor(EnterpriseDT.Util.Debug.ILogTag)">
            <summary>   
            Default constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.Initialize(EnterpriseDT.Net.BaseSocket,System.String,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>   
            Performs TCP connection and sets up reader/writer. 
            Allows different control port to be used
            </summary>
            <param name="sock">
             Socket instance
            </param>
            <param name="remoteHost">     
            address of remote host
            </param>
            <param name="controlPort">     
            port for control stream
            </param>
            <param name="timeout">    
            the length of the timeout, in milliseconds      
            </param>
            <param name="encoding">          
            encoding to use for control channel
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ConnectSocket(EnterpriseDT.Net.BaseSocket,System.String,System.Int32)">
            <summary>   
            Establishes the socket connection
            </summary>
            <param name="socket">
             Socket instance
            </param>
            <param name="address">     
            IP address to connect to
            </param>
            <param name="port">    
            port to connect to     
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ValidateConnection">
            <summary>   Checks that the standard 220 reply is returned
            following the initiated connection. Allow 230 as well, some proxy
            servers return it.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.InitStreams(System.Text.Encoding)">
            <summary>  Obtain the reader/writer streams for this
            connection
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetActivePortRange(EnterpriseDT.Net.Ftp.PortRange)">
            <summary>
            Set the port range to use in active mode
            </summary>
            <param name="portRange">port range to use</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetActiveIPAddress(System.Net.IPAddress)">
            <summary>
            Set an IP address to use for PORT commands
            </summary>
            <param name="address">IP address to use for PORT command</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.Logout">
            <summary>  
            Quit this FTP session and clean up.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.CreateDataSocket(EnterpriseDT.Net.Ftp.FTPConnectMode)">
            <summary>  
            Request a data socket be created on the
            server, connect to it and return our
            connected socket.
            </summary>
            <param name="connectMode">  
            The mode to connect in
            </param>
            <returns>  
            connected data socket
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.CreateDataSocketActive">
            <summary>  
            Request a data socket be created on the Client
            client on any free port, do not connect it to yet.
            </summary>
            <returns>  
            not connected data socket
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetNextAvailablePortFromRange">
            <summary>
            Increment port number to use to next in range, or else recycle
            from lowPort again, making sure we avoid the current port
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetDataPort(System.Net.IPEndPoint)">
            <summary>  
            Sets the data port on the server, i.e. sends a PORT
            command        
            </summary>
            <param name="ep">local endpoint
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ToByteArray(System.UInt16)">
            <summary>  
            Convert a short into a byte array
            </summary>
            <param name="val">  value to convert
            </param>
            <returns>  a byte array
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.CreateDataSocketPASV">
            <summary>  
            Request a data socket be created on the
            server, connect to it and return our
            connected socket.
            </summary>
            <returns>  connected data socket
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.NewPassiveDataSocket(System.String,System.Int32)">
            <summary> Constructs a new <code>FTPDataSocket</code> object (client mode) and connect
            to the given remote host and port number.
            
            </summary>
            <param name="ipAddress">IP Address to connect to.
            </param>
            <param name="port">Remote port to connect to.
            </param>
            <returns> A new <code>FTPDataSocket</code> object (client mode) which is
            connected to the given server.
            </returns>
            <throws>  SystemException Thrown if no TCP/IP connection could be made.  </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.NewActiveDataSocket(System.Int32)">
            <summary> 
            Constructs a new <code>FTPDataSocket</code> object (server mode) which will
            listen on the given port number.
            </summary>
            <param name="port">Remote port to listen on.
            </param>
            <returns> A new <code>FTPDataSocket</code> object (server mode) which is
            configured to listen on the given port.
            </returns>
            <throws>  SystemException Thrown if an error occurred when creating the socket.  </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SendCommand(System.String)">
            <summary>  Send a command to the FTP server and
            return the server's reply as a structured
            reply object
            </summary>
            <param name="command">  
            command to send
            </param>
            <returns>  reply to the supplied command
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.WriteCommand(System.String)">
            <summary>  Send a command to the FTP server. Don't
            read the reply
            
            </summary>
            <param name="command">  command to send
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ReadLine">
            <summary>
            Read a line, which means until a \r\n is reached
            </summary>
            <returns>line that is read</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ReadReply">
            <summary>  Read the FTP server's reply to a previously
            issued command. RFC 959 states that a reply
            consists of the 3 digit code followed by text.
            The 3 digit code is followed by a hyphen if it
            is a muliline response, and the last line starts
            with the same 3 digit code.
            
            </summary>
            <returns>  structured reply object
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.ValidateReply(EnterpriseDT.Net.Ftp.FTPReply,System.String[])">
            <summary>  
            Validate the response the host has supplied against the
            expected reply. If we get an unexpected reply we throw an
            exception, setting the message to that returned by the
            FTP server
            </summary>
            <param name="reply">reply object</param>
            <param name="expectedReplyCodes"> array of expected replies</param>
            <returns>reply object</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.Log(System.String,System.Boolean)">
            <summary>  
            Log a message, checking for passwords
            </summary>
            <param name="msg">
            message to log
            </param>
            <param name="command"> 
            true if a response, false otherwise
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetSocketTimeout(EnterpriseDT.Net.BaseSocket,System.Int32)">
            <summary>  
            Helper method to set a socket's timeout value
            </summary>
            <param name="sock">
            socket to set timeout for
            </param>
            <param name="timeout">
            timeout value to set
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPControlSocket.SetSocketBuffers(EnterpriseDT.Net.BaseSocket,System.Int32)">
            <summary>  
            Helper method to set a socket's read/write buffer sizes
            </summary>
            <param name="sock">
            socket to set timeout for
            </param>
            <param name="size">
            buffer size to set
            </param>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPControlSocket.CommandSent">
            <summary>
            Event for notifying start of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPControlSocket.ReplyReceived">
            <summary>
            Event for notifying start of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPControlSocket.CommandError">
            <summary>
            Occurs when there is an error while a command was being sent or
            a reply was being received.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.SynchronizePassiveConnections">
            <summary> 
            For cases where your FTP server does not properly manage PASV connections,
            it may be necessary to synchronize the creation of passive data sockets.
            It has been reported that some FTP servers (such as those at Akamai) 
            appear to get confused when multiple FTP clients from the same IP address
            attempt to connect at the same time. The default value for 
            SynchronizePassiveConnections is false.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.StrictReturnCodes">
            <summary> 
            Get/Set strict checking of FTP return codes. If strict 
            checking is on (the default) code must exactly match the expected 
            code. If strict checking is off, only the first digit must match.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.Timeout">
            <summary>   
            Get/Set the TCP timeout on the underlying control socket.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.TCPBufferSize">
            <summary>   
             TCP read/write buffer size on the underlying sockets
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.Connected">
            <summary>
            True if the control socket was connected at the last operation
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPControlSocket.AutoPassiveIPSubstitution">
            <summary>
            Use <c>AutoPassiveIPSubstitution</c> to ensure that 
            data-socket connections are made to the same IP address
            that the control socket is connected to.
            </summary>
            <remarks>
            <c>AutoPassiveIPSubstitution</c> can be useful when connecting
            to FTP servers that request data connections be connected to an
            IP address other than the one to which the connection was 
            initially made.  This usually happens when an FTP server is behind
            a NAT router and has not been configured to reflect the fact that
            its internal (LAN) IP address is different from the address that
            external (Internet) machines connect to.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPControlSocket.ConnectSocket(EnterpriseDT.Net.BaseSocket,System.String,System.Int32)">
            <summary>   
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ExFTPControlSocket.SetDataPort(System.Net.IPEndPoint)">
            <summary>  
            Sets the data port on the server, i.e. sends a PORT
            command        
            </summary>
            <param name="ep">local endpoint
            </param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPPassiveDataSocket">
            <summary>  Passive data socket handling class
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.13 $
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPPassiveDataSocket.#ctor(EnterpriseDT.Net.BaseSocket)">
            <summary>  
            Constructor
            </summary>
            <param name="sock"> client socket to use
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPPassiveDataSocket.Close">
            <summary>  
            Closes underlying socket
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPPassiveDataSocket.DataStream">
            <summary>  
            Gets the stream of the connection
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileNotFoundStrings">
            <summary>  
            Contains fragments of server replies that indicate that a file was
            not found.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.7 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.NO_SUCH_FILE">
            <summary>
            Server string indicating file not found (NO_SUCH_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.CANNOT_FIND_THE_FILE">
            <summary>
            Server string indicating file not found (CANNOT_FIND_THE_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.CANNOT_FIND">
            <summary>
            Server string indicating file not found (CANNOT_FIND)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.FAILED_TO_OPEN_FILE">
            <summary>
            Server string indicating file not found (FAILED_TO_OPEN_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.COULD_NOT_GET_FILE">
            <summary>
            Server string indicating file not found (COULD_NOT_GET_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.DOES_NOT_EXIST">
            <summary>
            Server string indicating file not found (DOES_NOT_EXIST)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.NOT_REGULAR_FILE">
            <summary>
            Server string indicating file not found (NOT_REGULAR_FILE)
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileNotFoundStrings.FILE_NOT_FOUND">
            <summary>
            Server string indicating file not found (FILE_NOT_FOUND)
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileNotFoundStrings.#ctor">
            <summary>
            Constructor. Adds the fragments to match on.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileTransferException">
            <summary>  
            Exceptions specific to file transfer protocols
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.7 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferException.replyCode">
            <summary>  Integer reply code</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTransferException.#ctor(System.String)">
            <summary>   
            Constructor. Delegates to super.
            </summary>
            <param name="msg">  Message that the user will be
            able to retrieve
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTransferException.#ctor(System.String,System.Exception)">
            <summary>   
            Constructor. Delegates to super.
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
            <param name="innerException">Exception that caused this exception</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTransferException.#ctor(System.String,System.String)">
            <summary>Constructor. Permits setting of reply code</summary>
            <param name="msg">message that the user will be able to retrieve</param>
            <param name="replyCode">string form of reply code</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTransferException.#ctor(System.String,System.Int32)">
            <summary>  
            Constructor. Permits setting of reply code
            </summary>
            <param name="msg">       
            message that the user will be able to retrieve
            </param>
            <param name="replyCode"> string form of reply code
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FileTransferException.ReplyCode">
            <summary>Get the reply code if it exists</summary>
            <returns>reply if it exists, -1 otherwise</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FileTransferException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileTypes">
            <summary>  
            Attempts to classify files as ASCII (or not)
            </summary>
            <author>
            Bruce Blackshaw       
            </author>
            <version>      
            $Revision: 1.1 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTypes.ascii">
            <summary>Holds hash of ASCII extensions</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.#cctor">
            <summary>Initialize the hash of types</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.Extensions">
            <summary> 
            Get the list of registered ASCII extensions
            </summary>
            <returns> 
            array of file extensions
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)">
            <summary> 
            Register a new ASCII extension
            </summary>
            <param name="ext">new extension</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.UnregisterExtension(System.String)">
            <summary> 
            Unregister an ASCII extension
            </summary>
            <param name="ext">filename extension (excluding ".") to unregister</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FileTypes.IsASCII(System.IO.FileInfo)">
            <summary> 
            Determines if a file is an ASCII file by seeing if it matches 
            registered extensions for ASCII files
            </summary>
            <param name="file">handle to file</param>
            <returns>true if ASCII, false otherwise</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.PortRange">
            <summary>
            Specifies a TCP port range defining the lower and upper limits for
            data-channels.
            </summary>
            <remarks>
            The default is to let the operating system select
            the port number within the range 1024-5000.  If the range is set to
            anything other than the default then ports will be selected sequentially,
            increasing by one until the higher limit is reached and then wrapping around
            to the lower limit.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.LOW_PORT">
            <summary>
            Lowest port number permitted.  This is also the default value for 
            <see cref="P:EnterpriseDT.Net.Ftp.PortRange.LowPort"/>.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.DEFAULT_HIGH_PORT">
            <summary>
            Default value for <see cref="P:EnterpriseDT.Net.Ftp.PortRange.HighPort"/>.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.HIGH_PORT">
            <summary>
            Highest port number permitted.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.propertyChangeHandler">
            <summary>
            Used to notify of changed properties.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.PortRange.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.PortRange.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor setting the lower and higher limits of the range.
            </summary>
            <param name="low">Lower limit of the port-range.</param>
            <param name="high">Higher limit of the port-range.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.PortRange.ValidateRange">
            <summary>
            Validate the port range, and throw an exception if incorrect.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.PortRange.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:System.Object"/>. 
            </summary>
            <returns>A String that represents the current Object. </returns>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.low">
            <summary>
            Low port number in range
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PortRange.high">
            <summary>
            High port number in range
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.PortRange.LowPort">
            <summary>
            Lowest port number in range.
            </summary>
            <remarks>
            The default value is 1024.  If it is left at this value and <see cref="P:EnterpriseDT.Net.Ftp.PortRange.HighPort"/>
            is left at 5000 then the OS will select the port.  If it is set to
            anything other than 1024 then ports will be selected sequentially,
            increasing by one until the higher limit is reached and then wrapping around
            to the lower limit.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.PortRange.HighPort">
            <summary>
            Highest port number in range.
            </summary>
            <remarks>
            The default value is 5000.  If it is left at this value and <see cref="P:EnterpriseDT.Net.Ftp.PortRange.LowPort"/>
            is left at 1024 then the OS will select the port.  If it is set to
            anything other than 5000 then ports will be selected sequentially,
            increasing by one until the higher limit is reached and then wrapping around
            to the lower limit.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.PortRange.UseOSAssignment">
            <summary>
            Determines if the operating system should select the ports within the range 1024-5000.
            </summary>
            <remarks>
            If <c>UseOSAssignment</c> is set to <c>true</c> then the OS will select data-channel
            ports within the range 1024-5000.  Otherwise ports will be selected sequentially,
            increasing by one until the higher limit is reached and then wrapping around
            to the lower limit.  Setting this flag will cause <see cref="P:EnterpriseDT.Net.Ftp.PortRange.LowPort"/> and
            <see cref="P:EnterpriseDT.Net.Ftp.PortRange.HighPort"/> to be set to 1024 and 5000, respectively.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.PortRange.PropertyChangeHandler">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnectMode">
            <summary>
            Enumerates the connect modes that are possible, active and passive.
            </summary>
            <remarks>
            The mode describes the behaviour of the server. In active mode, the server
            actively connects to the client to establish a data connection. In passive mode
            the client connects to the server.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnectMode.ACTIVE">
            <summary>   
            Represents active - PORT - connect mode. The server connects to the client
            for data transfers.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPConnectMode.PASV">
            <summary>   
            Represents passive - PASV - connect mode. The client connects to the server 
            for data transfers.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPErrorEventArgs">
            <summary>
            Provides data for error events.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.ShowMessageBox">
            <summary>
            Shows a <see cref="T:System.Windows.Forms.MessageBox"/> containing the
            message of the exception.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.ShowMessageBox(System.Windows.Forms.IWin32Window)">
            <summary>
            Shows a <see cref="T:System.Windows.Forms.MessageBox"/> containing the
            message of the exception.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.ShowMessageBox(System.Boolean)">
            <summary>
            Shows a <see cref="T:System.Windows.Forms.MessageBox"/> containing the
            type of the exception as well as its message and stack-trace.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.ShowMessageBox(System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Shows a <see cref="T:System.Windows.Forms.MessageBox"/> containing the
            type of the exception as well as its message and stack-trace.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.Exception">
            <summary>
            Exception that was thrown.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.SyncMethodName">
            <summary>
            Name of the method that was being executed when the exception was thrown.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPErrorEventArgs.Arguments">
            <summary>
            Arguments to the method that was being executed when the exception was thrown.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPErrorEventHandler">
            <summary>
            Delegate for error events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs">
            <summary>
            Base-class for EventArgs classes associated with cancelable events.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.#ctor(System.Boolean,System.Boolean,System.Exception)">
            <summary>
            Constructs an instance of <c>FTPCancelableEventArgs</c>, setting
            the default value of <see cref="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Cancel"/> as specified.
            </summary>
            <param name="defaultCancelValue">Default value of <see cref="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Cancel"/>.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Cancel">
            <summary>
            Determines whether or not the operation should be cancelled.
            </summary>
            <remarks>
            If <c>Cancel</c> is <c>true</c> then the operation will be cancelled,
            otherwise it will proceed.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Succeeded">
            <summary>
            Indicates whether or not the transfer succeeded.
            </summary>
            <remarks>
            This property maybe used in event-handlers for <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/> to determine whether or not the transfer
            succeeded.  The <see cref="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Exception"/> property may be used to determine the
            nature of the error if this property indicates that the transfer failed.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Exception">
            <summary>
            The exception thrown if a transfer failed.
            </summary>
            <remarks>
            This property maybe used in event-handlers for <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/> to determine the error that occurred in
            cases of failure.  The property, <see cref="P:EnterpriseDT.Net.Ftp.FTPCancelableEventArgs.Succeeded"/>, returns <c>true</c> if this
            property is <c>null</c>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging"/> and
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.OldDirectory">
            <summary>
            Path of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.OldDirectoryName">
            <summary>
            Name of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.OldDirectoryPath">
            <summary>
            Path of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.NewDirectory">
            <summary>
            Path of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.NewDirectoryName">
            <summary>
            Name of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.NewDirectoryPath">
            <summary>
            Path of working directory after change.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryEventArgs.CreationTime">
            <summary>
            Creation time of the directory.
            </summary>
            <remarks><c>CreationTime</c> only has a valid value for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.CreatedDirectory"/> event.</remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDirectoryEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanging"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryChanged"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListing"/> and
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.FileInfos">
            <summary>
            Details of files in the directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Directory">
            <summary>
            Path of directory on server being listed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.DirectoryName">
            <summary>
            Name of directory on server being listed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.DirectoryPath">
            <summary>
            Path of directory on server being listed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Succeeded">
            <summary>
            Indicates whether or not the transfer succeeded.
            </summary>
            <remarks>
            This property maybe used in event-handlers for <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> 
            to determine whether or not the directory-listing
            succeeded.  The <see cref="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Exception"/> property may be used to determine the
            nature of the error if this property indicates that the transfer failed.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Exception">
            <summary>
            The exception thrown if a transfer failed.
            </summary>
            <remarks>
            This property maybe used in event-handlers for <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> 
            to determine the error that occurred in
            cases of failure.  The property, <see cref="P:EnterpriseDT.Net.Ftp.FTPDirectoryListEventArgs.Succeeded"/>, returns <c>true</c> if this
            property is <c>null</c>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPDirectoryListEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListing"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.DirectoryListed"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/>,
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/>, and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDataType">
            <summary>
            Type of local data source/destination.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalPath">
            <summary>
            Path of local file if <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDataType"/> is <c>File</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalFile">
            <summary>
            Name of the local file (without path).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDirectory">
            <summary>
            Name of the local directory (not including file-name).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Stream">
            <summary>
            Reference to <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Stream"/> if <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDataType"/> is <c>Stream</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Bytes">
            <summary>
            Reference to byte-array if <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalDataType"/> is <c>ByteArray</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Appended">
            <summary>
            Indicates whether or not data was appended to the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.WriteMode">
            <summary>
            Write-mode of the transfer (i.e. overwrite, append or resume)
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Append">
            <summary>
            Indicates whether or not data was appended to the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Resume">
            <summary>
            Indicates whether or not this tranfer should be resumed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFile">
            <summary>
            Name of remote file as passed into the method that initiated the transfer.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFileName">
            <summary>
            Name of remote file without the path.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemotePath">
            <summary>
            Full path of remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteDirectory">
            <summary>
            Full path of remote directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.FileSize">
            <summary>
            Size of remote file (see remarks)
            </summary>
            <remarks>
            <para>This property has been supercede by <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalFileSize"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFileSize"/>, to 
            reflect the fact that the local and remote file-sizes may be different when transferring in ASCII mode.</para>
            <para>Some servers do not support the command required to get the size of a particular
            file.  In this case, or in case of an error, the <c>FileSize</c> property will
            be -1.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LocalFileSize">
            <summary>
            Size of local file (see remarks).
            </summary>
            <remarks>
            For binary transfers this is the same as the size of the remove file <see cref="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFileSize"/>, but for
            ASCII transfers it may differ.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.RemoteFileSize">
            <summary>
            Size of remote file (see remarks)
            </summary>
            <remarks>
            <para>For the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/>
            events, the value of this property will be the size of the local file, since it is not yet known
            what size ASCII files will be once uploaded to the server.</para>
            <para>Some servers do not support the command required to get the size of a particular
            file.  In this case, or in case of an error, the <c>FileSize</c> property will
            be -1.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.BytesTransferred">
            <summary>
            Number of bytes transferred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.LastWriteTime">
            <summary>
            Last write-time of the file.
            </summary>
            <remarks>
            For all events, except the <see cref="!:ExFTPConnection.Uploading"/> event, this property
            returns the timestamp of the remote file.  For <see cref="!:ExFTPConnection.Uploading"/>
            the timestamp of the local file is provided.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.Cancel">
            <summary>
            Cancel transfer.
            </summary>
            <remarks>
            <para>
            For <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/>
            this flag may be set to <c>false</c> if the operation is to be aborted.
            For <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/> and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/>
            this flag indicates if the operation was aborted.
            </para>
            <para>
            Note that multiple file transfers cannot be cancelled.
            </para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.DataType">
            <summary>
            Type of data source or destination.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.DataType.File">
            <summary>File data source/destination.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.DataType.Stream">
            <summary>Stream data source/destination.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileTransferEventArgs.DataType.ByteArray">
            <summary>Byte-array data source/destination.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileTransferEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploading"/>, 
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Uploaded"/>, <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloading"/>, 
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Downloaded"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamingFile"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamedFile"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.OldFileName">
            <summary>
            Name of file before the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.OldFilePath">
            <summary>
            Path of file before the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.OldDirectory">
            <summary>
            Directory of file before the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.NewFileName">
            <summary>
            Name of file after the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.NewFilePath">
            <summary>
            Path of file after the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.NewDirectory">
            <summary>
            Directory of file after the renaming takes place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileRenameEventArgs.RenameCompleted">
            <summary>
            Indicates whether or not the renaming operation has been completed successfully.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileRenameEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamingFile"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.RenamedFile"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLogInEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLogInEventArgs.UserName">
            <summary>
            User-name of account on server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLogInEventArgs.Password">
            <summary>
            Password of account on server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPLogInEventArgs.HasLoggedIn">
            <summary>
            Indicates whether or not the client has logged in.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPLogInEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggingIn"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.LoggedIn"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected"/> events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs.ServerAddress">
            <summary>
            Address of server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs.ServerPort">
            <summary>
            FTP port on server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs.IsConnected">
            <summary>
            Indicates whether or not the client is now connected to the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPConnectionEventArgs.Exception">
            <summary>
            The exception thrown if Connect or Close failed.
            </summary>
            <remarks>
            If this property is non-null during a <see cref="!:Closing"/> event then it means that
            the connection was closed due to an error.  In this case, if the exception is an
            <see cref="T:System.IO.IOException"/> then it usually means that the connection failed.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnectionEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connecting"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.Connected"/> events.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPDirectoryCache.dirCache">
            <summary>
            Cache of directory listings
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPDirectoryCache.ClearDirectoryCache">
            <summary>
            Clears the directory cache completely.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPDirectoryCache.ClearDirectoryCache(System.String)">
            <summary>
            Clears a particular directory-listing from the directory cache.
            </summary>
            <param name="directory">Directory to remove.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPException">
            <summary>  
            FTP specific exceptions
            </summary>
            <author>      Bruce Blackshaw
            </author>
            <version>     $Revision: 1.19 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(System.String)">
            <summary>   
            Basic constructor allowing exception message to be set
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(System.String,System.Exception)">
            <summary>   
            Basic constructor allowing exception message to be set
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
            <param name="innerException">Exception that caused this exception</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(System.String,System.String)">
            <summary>Constructor. Permits setting of reply code
            
            </summary>
            <param name="msg">message that the user will be able to retrieve
            </param>
            <param name="replyCode">string form of reply code </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(System.String,System.Int32)">
            <summary>
            Constructor. Permits setting of reply code
            </summary>
            <param name="msg">message that the user will be able to retrieve</param>
            <param name="replyCode">reply code</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPException.#ctor(EnterpriseDT.Net.Ftp.FTPReply)">
            <summary>
            Constructor. Permits setting of reply code
            </summary>
            <param name="reply">reply object</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPAuthenticationException">
            <summary>  
            FTP authentication exceptions
            </summary>
            <author>      Bruce Blackshaw
            </author>
            <version>     $Revision: 1.19 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPAuthenticationException.#ctor(System.String)">
            <summary>   
            Basic constructor allowing exception message to be set
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPAuthenticationException.#ctor(System.String,System.Int32)">
            <summary>   
            Basic constructor allowing exception message to be set
            </summary>
            <param name="msg">Message that the user will be able to retrieve</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTransferCancelledException">
            <summary>
            Thrown when a recursive operation is aborted.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPTransferCancelledException.#ctor(System.String,System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
            <param name="bytesTransferred">Number of bytes transferred before the transfer was cancelled.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTransferCancelledException.BytesTransferred">
            <summary>
            Number of bytes transferred before the transfer was cancelled.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPConnectionClosedException">
            <summary>
            Thrown when the server terminates the connection
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnectionClosedException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPConnectionClosedException.#ctor(System.String,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.MalformedReplyException">
            <summary>
            Thrown when the client receives an invalid reply to a command.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.MalformedReplyException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ControlChannelIOException">
            <summary>
            Thrown when the client receives an invalid reply to a command.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFile">
            <summary>  
            Represents a remote file (implementation)
            </summary>
            <author>
            Bruce Blackshaw       
            </author>
            <version>      
            $Revision: 1.20 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.UNKNOWN">
            <summary> Unknown remote server type</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.WINDOWS">
            <summary> Windows type</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.UNIX">
            <summary> UNIX type</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.VMS">
            <summary> VMS type</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.format">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.type">
            <summary> Type of file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.isLink">
            <summary> Is this file a symbolic link?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.linkNum">
            <summary> Number of links to file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.filePermissions">
            <summary> Permission bits string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.isDir">
            <summary> Is this a directory?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.fileSize">
            <summary> Size of file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.fileName">
            <summary> File/dir name</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.linkedFileName">
            <summary> Name of file this is linked to</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.fileOwner">
            <summary> Owner if known</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.userGroup">
            <summary> Group if known</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.lastModifiedTime">
            <summary> Last modified</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.rawRep">
            <summary> Raw string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.filePath">
            <summary>Directory if known</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.identifier">
            <summary>Identifier</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFile.kids">
            <summary>Children if a directory</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.#ctor(System.Int32,System.String,System.String,System.Int64,System.Boolean,System.DateTime@)">
            <summary> 
            Constructor
            </summary>
            <param name="type">         
            type of file
            </param>
            <param name="raw">          
            raw string returned from server
            </param>
            <param name="name">         
            name of file
            </param>
            <param name="size">         
            size of file
            </param>
            <param name="isDir">        
            true if a directory
            </param>
            <param name="lastModifiedTime"> 
            last modified timestamp
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.#ctor(System.String,System.Int64,System.Boolean,System.DateTime)">
            <summary> 
            Constructor
            </summary>
            <param name="name">         
            name of file
            </param>
            <param name="size">         
            size of file
            </param>
            <param name="isDir">        
            true if a directory
            </param>
            <param name="lastModifiedTime"> 
            last modified timestamp
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.#ctor(System.String,System.Int64,System.Boolean,System.DateTime,System.String)">
            <summary> 
            Constructor
            </summary>
            <param name="name">         
            name of file
            </param>
            <param name="size">         
            size of file
            </param>
            <param name="isDir">        
            true if a directory
            </param>
            <param name="lastModifiedTime"> 
            last modified timestamp
            </param>
            <param name="path"> 
            full path of file
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.SetLastModified(System.DateTime,System.TimeSpan)">
            <summary>
            Sets the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.LastModified"/> time.
            </summary>
            <param name="time"></param>
            <param name="timeDifference"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.ApplyTimeDifference(System.TimeSpan)">
            <summary>
            Subtracts the given <see cref="T:System.TimeSpan"/> to the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.LastModified"/> timestamp.
            </summary>
            <param name="difference">Time-span to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFile.ToString">
            <returns> 
            string representation
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Type">
            <summary> 
            Get the type of file, eg UNIX
            </summary>
            <returns> the integer type of the file
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Name">
            <returns> 
            Returns the name.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Raw">
            <returns> 
            Returns the raw server string.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.LinkCount">
            <returns> 
            Returns or sets the number of links to the file
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Link">
            <returns> 
            Is this file a link
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.LinkedName">
            <returns> 
            Returns the linked name.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Group">
            <returns> 
            Gets or sets the group.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Owner">
            <returns> 
            Gets or sets the owner.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Dir">
            <returns> 
            Gets or sets whether this is a directory
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Path">
            <returns> 
            Path of file if set
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Identifier">
            <returns> 
            Identifier
            </returns>
            <remarks>If the server (e.g. Google Docs) uses provides an identifier in addition to the file-name then
            this property will return this identifier.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Children">
            <returns> 
            If a directory, returns its children
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Permissions">
            <returns> 
            Gets or sets the permissions.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.LastModified">
            <returns> 
            Gets last modified timestamp
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFile.Size">
            <returns> 
            Gets size of file
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileCallback">
            <summary>
            Delegate for passing a single FTPFile object.  Used in directory-listing callbacks.
            </summary>
            <param name="file">The file.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileFactory">
            <summary>  
            Factory for creating FTPFile objects
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.27 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.WINDOWS_STR">
            <summary> Windows server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.UNIX_STR">
            <summary> UNIX server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.AIX_STR">
            <summary> UNIX server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.VMS_STR">
            <summary> VMS server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.OS400_STR">
            <summary> OS/400 server comparison string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.system">
            <summary> SYST string</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.windows">
            <summary> Cached windows parser</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.unix">
            <summary> Cached unix parser</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.vms">
            <summary> Cached unix parser</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.os400">
            <summary> Cached OS400 parser</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.parser">
            <summary> Does the parsing work</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.parsers">
            <summary>
            List of the parsers
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.userSetParser">
            <summary>
            Did the user set the parser?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.parserDetected">
            <summary>
            Has the parser been detected?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.parserCulture">
            <summary>Culture used for parsing file details</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileFactory.timeDiff">
            <summary>Time difference between server and client (relative to client).</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.#ctor(System.String)">
            <summary> 
            Constructor
            </summary>
            <param name="system">   SYST string
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.#ctor(EnterpriseDT.Net.Ftp.FTPFileParser)">
            <summary> Constructor. User supplied parser. Note that parser
            detection is disabled if a parser is explicitly supplied
            </summary>
            <param name="parser">  the parser to use
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.#ctor">
            <summary> Default constructor. No parsers are set.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.AddParser(EnterpriseDT.Net.Ftp.FTPFileParser)">
            <summary>
            Rather than forcing a parser (as in the constructor that accepts
            a parser), this adds a parser to the list of those used.
            </summary>
            <param name="parser">parser to add to list being used</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.SetParser(System.String)">
            <summary> 
            Set the remote server type
            </summary>
            <param name="system">SYST string</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.DetectParser(System.String[])">
            <summary>
            Detect the parser format to use
            </summary>
            <param name="files"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.Parse(System.String[])">
            <summary>
            Parse an array of raw file information returned from the
            FTP server
            </summary>
            <param name="fileStrings">    array of strings
            </param>
            <returns> array of FTPFile objects
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileFactory.GetSystem">
            <summary> 
            Get the SYST string
            </summary>
            <returns> the system string.
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.ParsingCulture">
            <summary>
            Get/set the culture info for parsing
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.ParserSetExplicitly">
            <summary>
            Was the parser set explicitly, or was it worked out
            via the SYST command>
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.FileParser">
            <summary>
            Get or set the file parser to be used. If it is
            set explicitly, it is never rotated.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.VMSParser">
            <summary>
            Get the instance of the VMS parser
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.TimeDifference">
            <summary>
            [FTP/FTPS Only] Time difference between server and client (relative to client).
            </summary>
            <remarks>
            The time-difference is relative to the server such that, for example, if the server is
            in New York and the client is in London then the difference would be -5 hours 
            (ignoring daylight savings differences).  This property only applies to FTP and FTPS.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileFactory.System">
            <summary>
            Get or set the system string (typically the string
            returned from the SYST command).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.RestartParsingException">
            <summary>  
            Signals to restart the parsing from first file
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileSyncPair">
            <summary>
            Matched pair of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/>s, where one is local and one is the matching remote file.
            </summary>
            <remarks>
            If either of the references to the two files is null then that indicates that there
            was no file with a matching name.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileSyncPair.#ctor(System.String,EnterpriseDT.Net.Ftp.FTPFile,EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Constructor.
            </summary>
            <param name="relativePath">relative path</param>
            <param name="localFile">local file reference</param>
            <param name="remoteFile">remote file reference</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSyncPair.LocalFile">
            <summary>
            Get and set the local file.
            </summary>
            <remarks>
            If this reference is <c>null</c> then there is no local file whose name matches
            that of the remote file.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSyncPair.RemoteFile">
            <summary>
            Get and set the remote file.
            </summary>
            <remarks>
            If this reference is <c>null</c> then there is no remote file whose name matches
            that of the local file.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSyncPair.Name">
            <summary>
            Gets the name of this pair (without its directory).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSyncPair.RelativePath">
            <summary>
            The path relative to the base-directory.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher">
            <summary>
            Raises events when files in the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory">current remote directory</see>
            are created, changed or deleted.
            </summary>
            <remarks>
            <para>
            <c>FTPFileSystemWatcher</c> listens to <see cref="T:EnterpriseDT.Net.Ftp.FTPConnection"/> events and 
            (<see cref="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.DirectoryPollingEnabled">optionally</see>) polls the FTP server
            every <see cref="!:RefreshPeriodSecs"/> to detect changes.
            </para><para>
            Three events are provided for notification of changes on the remote file:
            <list type="table">
            <listheader>
              <term>Event</term>
              <description>Triggered when <c>FTPFileSystemWatcher</c> detects that..</description>
            </listheader>
            <item>
              <term><see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Created"/></term>
              <description>...a file has been created on the server.</description>
            </item>
            <item>
              <term><see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Changed"/></term>
              <description>...a file has been created on or uploaded to the server.</description>
            </item>
            <item>
              <term><see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Deleted"/></term>
              <description>...a file has been deleted on the server.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.log">
            <summary>Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.#ctor">
            <summary>
            Default consructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.OnCreated(System.String,EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Called when a file is created in the current remote directory.
            </summary>
            <param name="directory">Directory in which file was created.</param>
            <param name="file">File that was created</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.EnableRaisingEvents">
            <summary>
            Enables generation of events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.DirectoryPollingEnabled">
            <summary>
            Determines whether or not the server directory should be fetched periodically. 
            </summary>
            <remarks>
            <para>
            If enabled the server will be polled every
            <see cref="!:RefreshPeriodSecs"/> seconds to detect changes that are not
            made via the current <see cref="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Connection"/> instance.  If no such changes are
            expected then this is not necessary since changes made through the current
            <see cref="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Connection"/> will be detected by means of event-handlers.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.PollingPeriodSecs">
            <summary>
            Number of seconds between consecutive directory listings.
            </summary>
            <remarks>
            <para>Note that this property will only be used if <see cref="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.DirectoryPollingEnabled"/>
            is true.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.DelayPeriodSecs">
            <summary>
            Number of seconds to wait after a connection is established or the current directory
            is changed before requesting a directory listing.
            </summary>
            <remarks>
            This property is used to reduce the chance of requesting redundant directory listings.
            For example, other FTP GUI controls will often request a directory listing after changing
            directories, so an additional request from <c>FTPFileSystemWatcher</c> would be redundant.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Connection">
            <summary>
            Get or set the FTP connection object for which status information is 
            being displayed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Created">
            <summary>
            Notifies that a file has been created in the current remote directory.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Changed">
            <summary>
            Notifies that the size and/or last-modified time of a file in the current remote
            directory has changed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Deleted">
            <summary>
            Notifies that a file has been deleted in the current remote directory.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileChangeEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Created"/>, 
            <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Changed"/>,  and <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Deleted"/> 
            events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPFileChangeEventArgs.File">
            <summary>
            File that was created, changed or deleted.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFileChangeEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Created"/>, 
            <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Changed"/>,  and <see cref="E:EnterpriseDT.Net.Ftp.FTPFileSystemWatcher.Deleted"/> 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPIntegrityCheckException">
            <summary>
            Thrown when a transfer fails the integrity check
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPIntegrityCheckException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPReply">
            <summary>  Encapsulates the FTP server reply
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.8 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPReply.replyCode">
            <summary>  Reply code</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPReply.replyText">
            <summary>  Reply text</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPReply.data">
            <summary> Lines of data returned, e.g. FEAT</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPReply.#ctor(System.String,System.String)">
            <summary>  Constructor. Only to be constructed
            by this package, hence package access
            
            </summary>
            <param name="replyCode"> the server's reply code
            </param>
            <param name="replyText"> the server's reply text
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPReply.#ctor(System.String,System.String,System.String[])">
            <summary>  Constructor. Only to be constructed
            by this package, hence package access
            
            </summary>
            <param name="replyCode"> the server's reply code
            </param>
            <param name="replyText"> the server's full reply text
            </param>
            <param name="data">      data lines contained in reply text
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPReply.ReplyCode">
            <summary>  Getter for reply code
            
            </summary>
            <returns> server's reply code
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPReply.ReplyText">
            <summary>  Getter for reply text
            
            </summary>
            <returns> server's reply text
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPReply.ReplyData">
            <summary> Getter for reply data lines
            
            </summary>
            <returns> array of data lines returned (if any). Null
            if no data lines
            </returns>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSynchronizer.log">
            <summary>Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSynchronizer.Cancel">
            <summary>
            Cancels the current operation.
            </summary>
            <remarks>
            The method that is performing the operation will throw an
            <see cref="T:EnterpriseDT.Net.Ftp.FTPTransferCancelledException"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSynchronizer.LogTag">
            <summary>
            Log tag.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTask">
            <summary>
            Describes an asynchronous method-call launched by one of <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>'s
            <c>Begin__()</c> methods.
            </summary>
            <remarks>
            <see cref="P:EnterpriseDT.Net.Ftp.FTPTask.TaskID"/> is a unique identifier for the asynchronous method-call.  It may be 
            passed to <see cref="!:ExFTPConnection.CancelTask()"/> to cancel the task.  The properties,
            <see cref="P:EnterpriseDT.Net.Ftp.FTPTask.Method"/>, <see cref="!:MethodName"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPTask.Arguments"/> provide information
            about the synchronous method being called (asynchronously).
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPTask.Cancel">
            <summary>
            Cancels this task (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTask(System.IAsyncResult)"/>.
            </summary>
            <returns><c>true</c> if the task was cancelled successfully.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.Connection">
            <summary>
            Connection on which task was executed.
            </summary>
            <remarks>
            This property is <c>null</c> until the task has been completed.  It may be used
            in the callback.  The connection may be a pool connection or the main connection.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.TaskID">
            <summary>
            ID of task.
            </summary>
            <remarks>Each <c>FTPTask</c> object returned by an asynchronous method will have a unique identifier.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.UsePool">
            <summary>
            Indicates whether or not the task is being executing using the connection pool.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.Method">
            <summary>
            <see cref="T:System.Reflection.MethodInfo"/> object identifying the synchronous method being called (asynchronously).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.Arguments">
            <summary>
            Arguments being used.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.Status">
            <summary>
            Current status of the task.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTask.MethodIdentifier">
            <summary>
            Name of synchronous method being called (asynchronously).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus">
            <summary>
            Status of task.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus.Queued">
            <summary>Task is in a queue waiting to run.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus.Running">
            <summary>Task is currently running.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus.Completed">
            <summary>Task has completed.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTask.TaskStatus.Cancelled">
            <summary>Task has been cancelled.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncRules">
            <summary>
            Contains a set of instructions for how a synchronization operation should be performed.
            </summary>
            <remarks>
            <para></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.Direction">
            <summary>
            Controls the direction of synchronization.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.IgnoreCase">
            <summary>
            Determines whether or not case is ignored when matching file-names.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.IncludeFilesInFilter">
            <summary>
            Controls whether the filter is an inclusion-filter or an exclusion-filter.
            </summary>
            <remarks>If <c>IncludeFilesInFilter</c> is true (the default) then only the files
            that match the filter (if there is one) will be synchronized.  Otherwise only those
            that don't match it will be synchronized.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterType">
            <summary>
            Controls whether the <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FileNameFilter"/> should be interpreted as a wildcard string
            or a regular expression.
            </summary>
            <remarks>
            Wildcard strings use a DOS-like notation where <c>?</c> matches any single character and 
            <c>*</c> matches multiple characters.  Regular expressions are of the kind used in 
            <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterOnServer">
            <summary>
            Controls whether files are filtered on the client (the default) or on the server.  
            Requires server to support filtering.
            </summary>
            <remarks>
            When set to <c>true</c> filters will be passed to the server such that only files
            that match the filter are returned to the client in directory listings.  This can be more 
            efficient since smaller listings may be returned, but it requires the server to support
            filtering (wildcards or regular-expressions).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FileNameFilter">
            <summary>
            File-name filter that controls which files are synchronized.
            </summary>
            <remarks>
            <c>FileNameFilter</c> may contain multiple strings separated by commas.  Each string
            may be a regular expression (as defined by <see cref="T:System.Text.RegularExpressions.Regex"/>)
            or a wildcard string (where <c>?</c> matches any single character and <c>*</c> matches 
            multiple characters).  The type of filter (wildcard or regular expression) may be chosen via the
            <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterType"/> property.  The filter may be used to exclude or include files; this
            behavior is selected via the <see cref="!:ExcludeFilesInFilter"/> property.  By default files in
            the filter are included.  If no filter is defined then all files will be considered.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterCallback">
            <summary>
            FileFilter callback to be called each time a file is to be filtered.
            </summary>
            <remarks>
            If <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FilterType"/> is set to <see cref="!:FTPFileType.Callback"/> then this 
            <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> will be called when a file is to be filtered.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.IgnoreDate">
            <summary>
            Controls whether or not dates are taken into consideration when performing file comparisons.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.TransferAlways">
            <summary>
            Causes files to be transferred regardless of date and size.
            </summary>
            <remarks>
            This flag overrides all other flags except <see cref="P:EnterpriseDT.Net.Ftp.FTPSyncRules.DeleteIfSourceAbsent"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.TransferNewOnly">
            <summary>
            If <c>TransferNewOnly</c> is set then only files that do not exist on the target file-system 
            will be considered.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.TransferMatchingOnly">
            <summary>
            If <c>TransferMatchingOnly</c> is set then only files that exist both on the source and target
            file-systems will be considered.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.DeleteIfSourceAbsent">
            <summary>
            When set, this flag will advise that if a file exists on the target but not on the source then
            that file should be deleted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.SyncLocalDateAfterDownload">
            <summary>
            When set, this flag will cause the control to set the date of the local file
            to be the same as the remote file after the file has been downloaded.  
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.IncludeSubdirectories">
            <summary>
            When set, this flag will cause files in subdirectories to be included in the 
            synchronization operaton.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.StopOnError">
            <summary>
            When set, this flag will cause synchronization to stop when errors occur.
            </summary>
            <remarks>
            If <c>StopOnError</c> is <c>true</c> (the default) the synchronization process will stop 
            when an error occurs.  If <c>StopOnError</c> is <c>false</c> then <see cref="T:EnterpriseDT.Net.Ftp.FTPSynchronizer"/>
            will continue the process as far as it can.  For example, if an attempt to create a directory
            fails then it will give up on transferring files in that directory, but will keep transferring
            other files.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncRules.FileRegEx">
            <summary>
            Returns an array of regular expression that match the wildcards.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncResults">
            <summary>
            Encapsulates the results of a synchronization operation.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.GetFileAction(EnterpriseDT.Net.Ftp.FTPFileSyncPair)">
            <summary>
            Returns the action that was applied to the given file-pair.
            </summary>
            <param name="filePair">File-pair to retrieve action for.</param>
            <returns>Action that was applied.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.GetActionSucceeded(EnterpriseDT.Net.Ftp.FTPFileSyncPair)">
            <summary>
            Did the action succeed for the given file-pair.
            </summary>
            <param name="filePair">File-pair</param>
            <returns><c>true</c> if the action succeeded.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.GetException(EnterpriseDT.Net.Ftp.FTPFileSyncPair)">
            <summary>
            Exception thrown when action was attempted (if any).
            </summary>
            <param name="filePair">File-pair to get exception for.</param>
            <returns>Exception thrown when action was attemped or <c>null</c> if no exception was thrown.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.GetException(System.String)">
            <summary>
            Exception thrown when attempting to get a directory listing (if any).
            </summary>
            <param name="directory">Directory to get exception for.</param>
            <returns>Exception thrown when attempting to get a directory listing or <c>null</c> if no exception was thrown.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPSyncResults.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the results.
            </summary>
            <param name="verbose">Show file-by-file results or just a summary?</param>
            <returns>A string representation.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncResults.FilePairs">
            <summary>
            All pairs of files.
            </summary>
            <remarks>Pairs are matched by their paths relative to the base directories.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncResults.TotalCount">
            <summary>
            Total number of file-pairs.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncResults.SuccessCount">
            <summary>
            Number of actions successfully applied.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncResults.FailureCount">
            <summary>
            Number of failures encountered when actions were applied.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncEventHandler">
            <summary>
            Event-handler for synchronization events.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event-arguments</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncFileEventHandler">
            <summary>
            Event-handler for synchronization events.
            </summary>
            <param name="sender">Sender</param>
            <param name="e">Event-arguments</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncEventArgs">
            <summary>
            Arguments for synchronization events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncEventArgs.LocalDirectory">
            <summary>
            Local directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncEventArgs.RemoteDirectory">
            <summary>
            Remote directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncEventArgs.Results">
            <summary>
            Results of synchronization operation.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs">
            <summary>
            Events for file synchronization events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.SynchronizationRules">
            <summary>
            Rules for synchronization.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.LocalFileExists">
            <summary>
            Does the local file exist?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.LocalFile">
            <summary>
            Reference to an <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object representing the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.RemoteFileExists">
            <summary>
            Does the remote file exist?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.RemoteFile">
            <summary>
            Reference to an <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object representing the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncFileEventArgs.Action">
            <summary>
            Action to apply.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncFileAction">
            <summary>
            Used for determining which synchronization action should be applied.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.None">
            <summary>Do nothing.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.Download">
            <summary>Download the file.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.Upload">
            <summary>Upload the file.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.DeleteLocal">
            <summary>Delete the local file.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPSyncFileAction.DeleteRemote">
            <summary>Delete the remote file.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPSyncException">
            <summary>
            Thrown when a synchronization operation fails.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPSyncException.Results">
            <summary>
            Results of the synchronization operation.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.PoolMode">
            <summary>
            Determines whether or not the main connection will be included in the pool of connections
            that is used for concurrent transfers.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PoolMode.UseMainConnection">
            <summary>
            The main connection will be included in the pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PoolMode.ReserveMainConnection">
            <summary>
            The main connection will be excluded from the pool.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.PoolMode.Automatic">
            <summary>
            The component will automatically determine the most appropriate mode.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings">
            <summary>
            Settings for controlling concurrent transfers.
            </summary>
            <remarks>
            <para>When concurrent transfers are <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.Enabled"/> <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> 
            (and <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>) will maintain a pool of up to 
            <c>MaxConnections-1</c> 'slave' connections in addition to its own 'main' connection.
            Many servers limit the number of connections
            a single client may make to the server, so the number of active connections may
            be less than <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.MaxConnections"/>.</para>
            <para>Interactive applications, such as traditional FTP client apps, can benefit from
            reserving one connection for user-actions, such as fetching directory listings.
            Thus when <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PoolMode"/> is set to <see cref="!:PoolMode.ReserveMainConnection"/>
            the main connection will not usually be used for transfers.  This is not an issue in 
            non-interactive applications in which case the <c>PoolMode</c> may be set to
            <see cref="!:PoolMode.UseMainConnection"/>.  The default value of <c>PoolMode</c> is
            <see cref="!:PoolMode.Automatic"/> where the main connection will used if
            <see cref="P:System.Windows.Forms.Form.ActiveForm"/> is not <c>null</c>.</para>
            <para>Although it's generally desirable to reserve the main connection for
            user interactivity in FTP client-type applications, this cannot be done if
            the server only permits one connection to the server.  If 
            <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.FallBackToMainConnection"/> is set to <c>true</c> (the default)
            then the main connection will be used for transfers if it is the only possible 
            connection to the server.</para>
            <para>If <c>AutoRequeue</c> is enabled then a task that has been given a failed connection will
            automatically be requeued if at least one connection is still operational.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.OnPropertyChanged(System.String)">
            <summary>
            Called when a property has been changed.
            </summary>
            <param name="propertyName">Name of property.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.Enabled">
            <summary>
            Determines whether or not concurrent transfers enabled.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PoolMode">
            <summary>
            Controls whether or not the main connection is included in the pool.  
            </summary>
            <remarks>
            Concurrent transfers are executed on a set of connections called a "pool".  This set of connections
            is maintained alongside the main <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> (or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>)
            object.  If <c>PoolMode</c> is <see cref="!:PoolMode.UseMainConnection"/> then the main connection will 
            be included in the pool and therefore made available for concurrent transfers.  This is often not 
            desirable in GUI applications where it's desirable to keep a connection available for servicing 
            user-actions, such as listing directories; in these cases <c>PoolMode</c> should be set
            to <see cref="!:PoolMode.ReserveMainConnection"/>.  If the <c>PoolMode</c> is set to
            to <see cref="!:PoolMode.Automatic"/> (the default) then the component will automatically try to determine
            the most appropriate mode.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.MaxConnections">
            <summary>
            Maximum number of connections to the server.
            </summary>
            <remarks>
            <para>When concurrent transfers are <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.Enabled"/> <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> 
            (and <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>) will maintain a pool of up to 
            <c>MaxConnections-1</c> 'slave' connections in addition to its own 'main' connection.
            Many servers limit the number of connections
            a single client may make to the server, so the number of active connections may
            be less than <c>MaxConnections</c>.</para>
            <para>Interactive applications, such as classic FTP client apps, can benefit from
            reserving one connection for user-actions, such as fetching directory listings.
            Thus when <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PoolMode"/> is set to <see cref="!:PoolMode.ReserveMainConnection"/>
            the main connection will not usually be used for transfers.  This is not an issue in 
            non-interactive applications in which case the <c>PoolMode</c> may be set to
            <see cref="!:PoolMode.UseMainConnection"/>.  The default value of <c>PoolMode</c> is
            <see cref="!:PoolMode.Automatic"/> where the main connection will used if
            <see cref="P:System.Windows.Forms.Form.ActiveForm"/> is not <c>null</c>.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.AutoRequeue">
            <summary>
            Automatically requeue tasks on connection-failure.
            </summary>
            <remarks>
            If <c>AutoRequeue</c> is enabled then a task that has been given a failed connection will
            automatically be requeued if at least one connection is still operational.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.FallBackToMainConnection">
            <summary>
            Should the main connection be used if all connections in the pool fail?
            </summary>
            <remarks>
            Some servers allow only one connection per user.  In these cases concurrent transfers are
            not possible.  If, however, concurrent transfers have been enabled and the main connection
            is not included in the pool (i.e. <see cref="P:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PoolMode"/> is <see cref="!:PoolMode.ReserveMainConnection"/>), 
            then transfers will fail because no additional connections could be made.  In these cases,
            the main connection may be used as a fallback by having <c>FallBackToMainConnection</c> set
            to <c>true</c> (the default).  This has the potentially undesirable effect
            of tying up the main connection while files are being transferred, thus making it unavailable 
            for other operations, such as listing directories.  In GUI applications, this will result
            in a less responsive interface. 
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.ConcurrentTransferSettings.PropertyChanged">
            <summary>Occurs when a property is changed.</summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTaskState">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTaskState.task">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTaskState.connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPTaskState.#ctor(EnterpriseDT.Net.Ftp.FTPTask,EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="task"></param>
            <param name="connection"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskState.Task">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskState.Connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTaskEventArgs">
            <summary>
            Arguments for task-related events.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskEventArgs.MethodIdentifier">
            <summary>
            Identified which method is called.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskEventArgs.MethodsArguments">
            <summary>
            Arguments for the method.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPTaskEventArgs.Exception">
            <summary>
            Exception if one was thrown.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTaskEventHandler">
            <summary>
            Delegate for task-related events.
            </summary>
            <param name="sender"><see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> (or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>) 
            which threw the event.</param>
            <param name="e">Arguments of the event.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTaskCancelledException">
            <summary>
            Thrown when a task is cancelled before it has started running.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPTaskCancelledException.#ctor(System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPMessageEventArgs">
            <summary>
            Event args for ReplyReceived and CommandSent events
            </summary>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPMessageEventArgs.#ctor(System.String)">
            <summary>
            Constructor
            <param name="message"> 
            The message sent to or from the remote host
            </param>
            </summary>        
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.FTPMessageEventArgs.Message">
            <summary>
            Gets the message 
            </summary>   
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPMessageHandler">
            <summary>
            Delegate used for ReplyReceived and CommandSent events
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs">
            <summary>
            Event args for BytesTransferred event
            </summary>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>        
            <param name="remoteFile">The name of the file being transferred, or the name of the directory
            if it is a directory listing.</param>
            <param name="byteCount">The current count of bytes transferred.</param>
            <param name="resumeOffset">File position at which the transfer was resumed (0 of not resumed).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.#ctor(System.String,System.String,System.Int64,System.Int64)">
            <summary>
            Constructor
            </summary>        
            <param name="remoteDirectory">Remote directory.</param>
            <param name="remoteFile">The name of the file being transferred, or the name of the directory
            if it is a directory listing.</param>
            <param name="byteCount">The current count of bytes transferred.</param>
            <param name="resumeOffset">File position at which the transfer was resumed (0 of not resumed).</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.ByteCount">
            <summary>
            Gets the byte count.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.ResumeOffset">
            <summary>
            If a transfer was resumed then this property will return the byte-offset from which
            the transfer starts.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.RemoteFile">
            <summary>
            The name of the file being transferred, or the name of the directory
            if it is a directory listing.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.RemoteDirectory">
            <summary>
            Remote directory of file being transferred, or directory being listed.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.BytesTransferredEventArgs.RemotePath">
            <summary>
            Remote path of file being transferred, or directory being listed.
            </summary>   
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.BytesTransferredHandler">
            <summary>
            Delegate used for the BytesTransferred event
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferEventArgs">
            <summary>
            Event args for TransferStarted/Complete
            </summary>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TransferEventArgs.#ctor(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.TransferDirection,EnterpriseDT.Net.Ftp.FTPTransferType)">
            <summary>
            Constructor
            </summary>        
            <param name="localStream"> 
            The stream being transferred to/from.
            </param>
            <param name="remoteFilename"> 
            The remote file name to be uploaded or downloaded
            </param>
            <param name="direction"> 
            Upload or download
            </param>
            <param name="transferType"> 
            ASCII or binary
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TransferEventArgs.#ctor(System.Byte[],System.String,EnterpriseDT.Net.Ftp.TransferDirection,EnterpriseDT.Net.Ftp.FTPTransferType)">
            <summary>
            Constructor
            </summary>        
            <param name="localByteArray"> 
            The byte-array being transferred to/from.
            </param>
            <param name="remoteFilename"> 
            The remote file name to be uploaded or downloaded
            </param>
            <param name="direction"> 
            Upload or download
            </param>
            <param name="transferType"> 
            ASCII or binary
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TransferEventArgs.#ctor(System.String,System.String,EnterpriseDT.Net.Ftp.TransferDirection,EnterpriseDT.Net.Ftp.FTPTransferType)">
            <summary>
            Constructor
            </summary>        
            <param name="localFilePath"> 
            Path of the local file to be uploaded or downloaded (<c>null</c> for <c>Stream</c> and <c>byte[]</c> transfers)
            </param>
            <param name="remoteFilename"> 
            The remote file name to be uploaded or downloaded
            </param>
            <param name="direction"> 
            Upload or download
            </param>
            <param name="transferType"> 
            ASCII or binary
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.LocalFilePath">
            <summary>
            Gets the path of the local file.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.LocalStream">
            <summary>
            Gets the stream being transferred to/from.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.LocalByteArray">
            <summary>
            Gets the byte-array being transferred to/from.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.RemoteFilename">
            <summary>
            Gets the remote filename 
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.Direction">
            <summary>
            Gets the transfer direction 
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferEventArgs.TransferType">
            <summary>
            Gets the transfer type 
            </summary>   
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferHandler">
            <summary>
            Delegate used for TransferStarted and TransferComplete events
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferDirection">
            <summary>
            Enumerates the possible transfer directions
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TransferDirection.UPLOAD">
            <summary>   
            Represents uploading a file
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TransferDirection.DOWNLOAD">
            <summary>   
            Represents downloading a file
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.WriteMode">
            <summary>
            Enumerates the possible write modes
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WriteMode.Overwrite">
            <summary>   
            Overwrite the file
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WriteMode.Append">
            <summary>   
            Append to the file
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WriteMode.Resume">
            <summary>   
            Resume uploading the file
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPTransferType">
            <summary>  
            Enumerates the transfer types possible. We support only the two common types, 
            ASCII and Image (often called binary).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTransferType.ASCII">
            <summary>   
            Represents ASCII transfer type. As data is transferred, line terminator characters
            are translated into the local (client) platform's line terminator characters (CRLF for Windows
            platforms). For example, if transferring text files from a Unix server, line terminators will
            be converted from LF to CRLF.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPTransferType.BINARY">
            <summary>   
            Represents Image (or binary) transfer type. Files are transferred byte for byte
            without any conversion.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPFilterType">
            <summary>
            Specifies different types of filters.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFilterType.Wildcard">
            <summary>
            Wildcard strings use a DOS-like notation where <c>?</c> matches any single character and 
            <c>*</c> matches multiple characters.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFilterType.RegularExpression">
            <summary>
            Regular expressions are of the kind used in 
            <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FTPFilterType.Callback">
            <summary>
            A <see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> callback will be called when a file is to be filtered.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.LineTerminatorType">
            <summary>
            Type of line terminator to use
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileTransferProtocol">
            <summary>
            Specifies types of File Transfer Protocols.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTP">
            <summary>
            Standard FTP over <b>unencrypted</b> TCP/IP connections.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit">
            <summary>
            Explicit FTPS: Standard FTP-over-SSL as defined in RFC4217.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSImplicit">
            <summary>
            Implicit FTPS: Nonstandard, legacy version of FTP-over-SSL.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.SFTP">
            <summary>
            SFTP - SSH File Transfer Protocol.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.SCP">
            <summary>
            SCP - Secure Copy.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.HTTP">
            <summary>
            HTTP - standard <b>unencrypted</b> HTTP transfers
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FTPComponentLinker">
            <summary>
            Utility class which assists FTP components to interlink.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPComponentLinker.Link(System.ComponentModel.ISite,EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Calls <see cref="M:EnterpriseDT.Net.Ftp.IFTPComponent.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)"/> on all other 
            FTP components in the container of the given site.
            </summary>
            <param name="site">Site in the container whose FTP components are to be linked.</param>
            <param name="component">New components added to the containiner.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.FTPComponentLinker.Find(System.ComponentModel.ISite,System.Type)">
            <summary>
            Searches the given site's container for a component of the given type.
            </summary>
            <param name="site">Site whose container is to be searched.</param>
            <param name="componentType">Type to search for.</param>
            <returns>Returns the first component found.</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.OS400FileParser">
            <summary>  
            Represents a remote OS400 file parser. 
            </summary>
            <remarks>
            This parser is somewhat experimental :)
            </remarks>
            <author>Bruce Blackshaw
            </author>
            <version>$Revision: 1.11 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.DIR">
            <summary>Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.DDIR">
            <summary>Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.MEM">
            <summary>MEM field?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.MIN_EXPECTED_FIELD_COUNT">
            <summary> Number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.DATE_FORMAT_1">
            <summary>Date formats</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.formats1">
            <summary>array of formats</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.OS400FileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.OS400FileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.OS400FileParser.Parse(System.String)">
            <summary> Parse server supplied string</summary>
            <param name="raw">raw string to parse</param>
            <returns>FTPFile object representing the raw string</returns>
            <remarks>Listing look like the below:
                   CFT             45056 04/12/06 14:19:31 *FILE AFTFRE1.FILE
                   CFT                                     *MEM AFTFRE1.FILE/AFTFRE1.MBR
                   CFT             36864 28/11/06 15:19:30 *FILE AFTFRE2.FILE
                   CFT                                     *MEM AFTFRE2.FILE/AFTFRE2.MBR
                   CFT             45056 04/12/06 14:19:37 *FILE AFTFRE6.FILE
                   CFT                                     *MEM  AFTFRE6.FILE/AFTFRE6.MBR
                   QSYSOPR         28672 01/12/06 20:08:04 *FILE FPKI45POK5.FILE
                   QSYSOPR                                 *MEM FPKI45POK5.FILE/FPKI45POK5.MBR        
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.OS400FileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations">
            <summary>  
            Performs various recursive FTP operations on directories
            </summary>
            <author>
            Bruce Blackshaw       
            </author>
            <version>      
            $Revision: 1.32 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.CURRENT_DIR">
            <summary>
            Name of current dir
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PARENT_DIR">
            <summary>
            Name of parent dir
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.sleepEnabled">
            <summary>
            Is sleeping during transfers switched on?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.countBeforeSleep">
            <summary>
            Number of transfers before sleeping
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.sleepTime">
            <summary>
            Time to sleep in seconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.currentCount">
            <summary>
            Current number of transfers performed
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.cancel">
            <summary>
            Flag used for cancellation.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.cancelMutex">
            <summary>
            Mutex used for protecting access to the cancel flag.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DirDetails(System.String)">
            <summary>
            List this entire remote directory and its contents, including children.
            </summary>
            <remarks>
            Each <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object has an array of FTPFile objects called 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/>.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <returns>list of FTPFile objects that contain their children or <c>null</c> if the 
            remote directory doesn't exist</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DirDetails(System.String,System.String)">
            <summary>
            List this files in remote directory that match the given wildcard, including children.
            </summary>
            <remarks>
            Each <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object has an array of FTPFile objects called 
            <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/>.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard to use for filtering directory listings</param>
            <returns>list of FTPFile objects that contain their children or <c>null</c> if the 
            remote directory doesn't exist</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.LocalDirDetails(System.String,System.Boolean)">
            <summary>
            List this entire local directory and its contents, including children.
            </summary>
            <param name="localDir">name of local directory</param>
            <param name="includeSubdirectories">flag indicating whether or not to include subdirectories</param>
            <returns>list of FTPFile objects that contain their children</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Delete(System.String)">
            <summary> 
            Delete this entire remote directory and its contents recursively
            </summary>
            <param name="remoteDir">name of remote directory</param>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFilesCurrentDir(System.String)">
            <summary>
            Delete all the files in this directory (no subdirectories) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFilesCurrentDir(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete all the files in this directory (no subdirectories) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFiles(System.String,System.String,System.Boolean)">
            <summary>
            Delete all the files in this directory (and its subdirectories if recurse is true) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">true if recursing through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete all the files in this directory (and its subdirectories if recurse is true) that match
            the supplied filter.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">true if recursing through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFiles(System.String,System.String)">
            <summary>
            Delete all the files in this directory (and its subdirectories) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DeleteFiles(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete all the files in this directory (and its subdirectories) that match
            the supplied wildcard.
            </summary>
            <remarks>
            No directories are deleted. Only files matching the filter are deleted. On 
            Windows clients, case is ignored.
            </remarks>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.GetFilesFromCurrentDir(System.String,System.String,System.Boolean)">
            <summary>
            Gets all files matching the supplied wildcard from current remote directory into 
            supplied local dir
            </summary>
            <remarks>
            No directories are retrieved.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>       
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.GetFilesFromCurrentDir(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Gets all files matching the supplied wildcard from current remote directory into 
            supplied local dir
            </summary>
            <remarks>
            No directories are retrieved.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>       
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively going
            through the remote directory name supplied. Gets the directory 
            into the current local directory, into a directory with supplied localDir name
            </summary>
            <remarks>
            No directories are retrieved.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>               
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively going
            through the remote directory name supplied. 
            </summary>
            <remarks>
            Gets the directory into the current local directory, into a directory 
            with supplied localDir name
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>          
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively going
            through the remote directory name supplied. 
            </summary>
            <remarks>
            Gets the directory into the current local directory, into a directory 
            with supplied localDir name
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>          
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively (if recurse is set
            to true) going through the remote directory name supplied. 
            </summary>
            <remarks>
            Gets the directory into the current local directory, into a directory with 
            supplied localDir name
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">determines whether or not files subdirectories should be downloaded</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>  
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Get(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.Boolean)">
            <summary>
            Gets this entire remote directory and its contents, recursively (if recurse is set
            to true) going through the remote directory name supplied. 
            </summary>
            <remarks>
            Gets the directory into the current local directory, into a directory with 
            supplied localDir name
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">determines whether or not files subdirectories should be downloaded</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>  
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PutFilesIntoCurrentDir(System.String,System.String,System.Boolean)">
            <summary>
            Puts all files from supplied local dir matching the supplied wildcard into 
            the current remote directory.  
            </summary>
            <remarks>
            No directories are put.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PutFilesIntoCurrentDir(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Puts all files from supplied local dir matching the supplied wildcard into 
            the current remote directory.  
            </summary>
            <remarks>
            No directories are put.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,System.Boolean)">
            <summary>
            Puts this entire directory and its contents, recursively going through the 
            local directory supplied (which can be relative or absolute). 
            </summary>
            <remarks>
            Puts the directory into the current remote directory, into a directory with 
            the supplied remoteDir name.
            </remarks>
            <param name="localDir">name of local directory to get files into</param>
            <param name="remoteDir">name of remote directory to get files from</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected from</param>         
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,System.String,System.Boolean)">
            <summary> 
            Puts this entire directory and its contents. 
            </summary>
            <remarks>Recursively goes through the local directory supplied 
            (which can be relative or absolute. Puts the directory into the current remote directory,
            into a directory with the supplied remoteDir name. Only files matching the filter are fetched. 
            On Windows clients, case is ignored.</remarks>
            <param name="localDir">name of local directory</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary> 
            Puts this entire directory and its contents. 
            </summary>
            <remarks>Recursively goes through the local directory supplied 
            (which can be relative or absolute. Puts the directory into the current remote directory,
            into a directory with the supplied remoteDir name. Only files matching the filter are fetched. 
            On Windows clients, case is ignored.</remarks>
            <param name="localDir">name of local directory</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary> 
            Puts this entire directory and its contents. 
            </summary>
            <remarks>If recurse is true, it recursively goes through the local directory supplied 
            (which can be relative or absolute. Puts the directory into the current remote directory,
            into a directory with the supplied remoteDir name. Only files matching the filter are fetched. 
            On Windows clients, case is ignored.</remarks>
            <param name="localDir">name of local directory</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
            <param name="recurse">if true, recurse through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Put(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean,System.Boolean)">
            <summary> 
            Puts this entire directory and its contents. 
            </summary>
            <remarks>If recurse is true, it recursively goes through the local directory supplied 
            (which can be relative or absolute. Puts the directory into the current remote directory,
            into a directory with the supplied remoteDir name. Only files matching the filter are fetched. 
            On Windows clients, case is ignored.</remarks>
            <param name="localDir">name of local directory</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
            <param name="recurse">if true, recurse through subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.Cancel">
            <summary>
            Cancels the current recursive operation (if any).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PutDir(System.IO.DirectoryInfo,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary> 
            Puts a directory and its contents recursively
            </summary>
            <param name="dir">reference to DirectoryInfo object</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter">wildcard filter applied to filenames</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DirExists(System.String)">
            <summary>
             Check to see if a directory exists in the current directory
            </summary>
            <returns>true if found, false if not</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PutFile(System.IO.FileInfo,System.Boolean)">
            <summary> 
            Puts a file
            </summary>
            <param name="file">reference to FileInfo object</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.GetDir(System.String,System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary> 
            Get a remote directory and its contents
            </summary>
            <param name="parent">parent directory</param>
            <param name="localDir">name of local directory we are transferring into</param>
            <param name="remoteDir">name of remote directory</param>
            <param name="filter">filter to apply to files (can be null)</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.GetFile(System.String,System.String,System.Boolean)">
            <summary> 
            Get a remote file
            </summary>
            <param name="parent">parent directory</param>
            <param name="remoteFile">remote file name</param>
            <param name="detectTransferMode">true if transfer mode is to be auto-detected</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.DirDetailsInternal(System.String)">
            <summary>
            Get a directory listing
            </summary>
            <param name="dir">directory</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.IsValidDir(System.String)">
            <summary>
            Check it is not the parent or current dir
            </summary>
            <param name="dir">name of dir</param>
            <returns>true if valid to use</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.PauseIfRequired">
            <summary> 
            Sleeps after a configurable number of transfers
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.CheckForCancel">
            <summary>
            Throws an exception if cancel has been set.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.CountBeforeSleep">
            <summary>
            Number of transfers before going to sleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.SleepEnabled">
            <summary>
            Enabling or not of sleeping after a certain number of transfers
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.AbstractRecursiveOperations.SleepTime">
            <summary>
            Number of seconds spent asleep
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ClientRecursiveOperations">
            <summary>
            For use with IFileTransferClients
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ConnRecursiveOperations">
            <summary>
            For use with FTPConnection
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.ConnRecursiveOperations.conn">
            <summary>
            Link to connection
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.FileFilter">
            <summary>
            Used for by multiple-file operations to determine whether or not a particular file
            should be included in the operation.
            </summary>
            <remarks>
            The method that this delegate wraps should return <c>true</c> if the file or directory
            described by the given <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> is to be included in the
            operation being performed, and <c>false</c> if the file or directory is to be
            excluded.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.SecureFTPConnection">
            <summary>
            Extends <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>'s features by providing support for all secure
            file-transfer protocols, i.e. SFTP, explicit FTPS and implicit FTPS.
            </summary>
            <remarks>
            <para><b>Connections</b> are not opened until the <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.Connect"/> method is called.
            Connection-, Authentication-, and Security-related properties should be set
            prior to opening the connection.</para>
            
            <para>At a minimum, the following properties must be set prior to connection.
            <list type="table">
              <listheader>
            	<term>Property</term>
            	<term>Description</term>
              </listheader>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol">Protocol</see></term>
                <description>The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">protocol</see> to use: 
                SFTP, explicit FTPS, implicit FTPS or plain FTP.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerAddress">ServerAddress</see></term>
                <description>The domain-name or IP-address of the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UserName">UserName</see></term>
                <description>User-name of account on the server.</description>
              </item>
              <item>
                <term><see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Password">Password</see></term>
                <description>Password of account on the server.</description>
              </item>
            </list></para>
            
            <para>The <b>Connection Tester</b> may be used to assist with setting these
            and other properties.
            It allows the developer to test various property-settings interactively without running 
            their application.  The Connection Designer may be accessed by 
            (1) double-clicking on the component, (2) right-clicking on the component and 
            selecting "Connection Tester" from the context menu, or (3) selecting the component
            and then clicking on the "Connection Tester" link at the bottom of the 
            Properties View.</para>
            
            <para><b>Secure Transfers</b> are enabled through the Security properties.  At a minimum, 
            the <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">Protocol</see> should be set to <c>SFTP</c>, 
            <c>FTPSExplicit</c> or 
            <c>FTPSImplicit</c> representing the SSH File Transfer Protocol, explicit FTP over
            SSL, and implicit FTP over SSL, respectively.  The issue of Server Validation must 
            also be addressed.</para>
            
            <para><b>Server Validation</b> is the process of making sure that the server with which
            the client is communicating is indeed the intended server.  While developing code, 
            this process may be disabled by setting <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> to
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.None"/>, which disables server validation
            and thus postpones any complications related to it, but this should <b>not</b> be 
            done in deployed applications.</para>
            
            <para>To achieve server validation, the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> property 
            may be set to <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> or 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/>.  The method by 
            which a server is validated depends on whether the protocol is SSH-based 
            or SSL-based.</para>
            
            <para>In the <b>SSL-based protocols</b>, explicit FTPS and implicit FTPS, a certificate that 
            is able to verify the FTP server 
            must be installed on the machine on which the FTP client software is running.  
            This certificate may be either the certificate of the server itself, or the 
            certificate of the Certificate Authority (CA).  <c>SecureFTPConnection</c> provides 
            various means of installing server certificates:
            <list type="bullet">
            <item><term>Design-Time</term>
            <description>The Certificate Manager GUI may be displayed at design-time by
            (1) right-clicking on the component and 
            selecting "Certificate Manager" from the context menu, or (2) selecting the component
            and then clicking on the "Certificate Manager" link at the bottom of the Properties 
            View.</description></item>
            <item><term>Runtime GUI</term>
            <description>The Certificate Manager GUI may be displayed at runtime by using
            the <see cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager"/> method.</description></item>
            <item><term>Runtime Programmatic</term>
            <description>Certificates may be imported into the operating system's Certificate Stores
            using the Import methods of <see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate"/>.</description></item>
            <item><term>Microsoft Management Console (MMC)</term>
            <description>The Microsoft Management Controls (MMC) may be used for managing the
            operating system's certificate stores.</description></item>
            </list></para>
            
            <para>In the <b>SSH-based protocol</b>, SFTP, the server is validated by means of its
            public key.  Typically, the server's public key is stored in either a file 
            containing that single key, or in a file often called <i>known_hosts</i> which can 
            contain a number of public keys for different servers.  When the client connects 
            to the server, the server's public key is returned and compared with the 
            available public keys stored in the client.  Known-host files may be loaded by 
            setting the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile">KnownHosts.KnownHostsFile</see>
            property.  Individual public keys may be loaded using the
            <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)">KnownHosts.AddKnownHost</see>
            method.</para>
            
            <para><b>Client validation</b> is the process by which the client authenticates
            itself to the server.  For many FTP/FTPS/SFTP servers password authentication is 
            sufficient; it is configured through the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UserName"/> and 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Password"/> properties.  
            In explicit FTPS and implicit FTPS, a certificate may also be required; this loaded
            by the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientCertificate"/> property.  In SFTP the server may request
            the public key corresponding to the client's private key, which is set using
            the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyFile"/> property.</para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.log">
            <summary>Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.minSslVersion">
            <summary>Version of secure sockets to use.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.maxSslVersion">
            <summary>Version of secure sockets to use.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.sslFTPClient">
            <summary>
            Reference to SSLFTPClient which does all the FTPS work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.sshFTPClient">
            <summary>
            Reference to SSHFTPClient which does all the SFTP work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.sshSCPClient">
            <summary>
            Reference to SSHSCPClient which does all the SCP work.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.autoSecure">
            <summary>
            Determines if the control channel will automatically be secured upon connection.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.useUnencryptedCommands">
            <summary>
            Switches the control channel to unencrypted when set to true (if supported).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.useUnencryptedData">
            <summary>
            Switches the data channel to unencrypted when set to true (if supported).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPConnection.simpleXmlProperties">
            <summary>
            List of names of properties that may be serialized using the <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.WriteXml(System.Xml.XmlWriter)"/> 
            and <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ParseXml(System.Xml.XmlElement)"/> methods.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Constructs a SecureFTPConnection object and places it in the given container.
            </summary>
            <param name="container">Component container</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.#ctor(EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient)">
            <summary>
            Create an SecureFTPConnection using the given FTP client.
            </summary>
            <param name="sslFTPClient"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Deserializes a connection object from the given <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.
            </summary>
            <param name="information">Serialization information.</param>
            <param name="context">Serialization context.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EnableSFTPCompression">
            <summary>
            Must be used prior to connection. Arranges algorithms in the correct order
            so that compression is used - and can change the preferred compression algorithms.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.DisableSFTPCompression">
            <summary>
            Disable SFTP compression by putting it last in algorithm list
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.SetDotNETSSLVersion(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion,EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion)">
            <summary>
            Set the minimum version in the ServicePointManager
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.AreEqual(EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt[],EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt[])">
            <summary>
            Compare two arrays of prompts for equality
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.InvokeCommandSSH(System.String,System.String[])">
            <summary>
            Invokes the given literal command on the server.
            </summary>
            <param name="command">command to invoke on the server</param>
            <param name="arguments">arguments to the supplied command</param>
            <remarks>
            <para>
            If the server supports the SSH 'exec' command, the command invoked will normally
            be a Unix shell command such as 'ls -al'. This can be invoked as one string with
            no arguments, or arguments can be passed in separately.
            </para>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeMode(System.String,System.String)" -->
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeOwner(System.Int32,System.String)">
            <summary>
            [SFTP Only] Changes the owner of the specified file or directory.
            </summary>
            <param name="ownerID">numerical user id of the owner </param>
            <param name="path">the path to the file/directory on the remote server</param>
            <remarks>
            <para>
            Only numerical user ids are supported currently. Use ExecuteCommand to run
            a Unix command on the server if required (e.g. chown). Not all servers will
            permit this command.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeGroup(System.Int32,System.String)">
            <summary>
            [SFTP Only] Changes the group of the specified file or directory.
            </summary>
            <param name="ownerID">numerical group id </param>
            <param name="path">the path to the file/directory on the remote server</param>
            <remarks>
            <para>
            Only numerical group ids are supported currently. Use ExecuteCommand to run
            a Unix command on the server if required (e.g. chgrp). Not all servers will
            permit this command.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.CreateSymbolicLink(System.String,System.String)">
            <summary>
            [SFTP Only] Creates a symbolic link on the server.
            </summary>
            <param name="linkPath">path name of the symlink to be created </param>
            <param name="targetPath">target of the symlink on the remote server</param>
            <remarks>
            <para>
            Not all servers support symlinks.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Begins an asynchronous request to invoke the given literal command on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginInvokeCommandSSH</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.InvokeCommandSSH(System.String,System.String[])"/>.</para>
            </remarks>
            <param name="command">Command to be sent.</param>
            <param name="arguments">arguments to the supplied command</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndInvokeCommandSSH(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeCommandSSH(System.String,System.String[],System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndInvokeCommandSSH</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Changes the access permissions or modes of the specified file or directory. SFTP only.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeMode</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeMode(System.String,System.String)"/>.</para>
            </remarks>
            <param name="permissions">the absolute mode of the file/directory</param>
            <param name="path">the path to the file/directory on the remote server</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndChangeMode(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeMode(System.String,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeMode</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.Int32,System.String,System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Changes the owner of the specified file or directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeOwner</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeOwner(System.Int32,System.String)"/>.</para>
            </remarks>
            <param name="ownerID">numerical user id of the owner </param>
            <param name="path">the path to the file/directory on the remote server</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndChangeOwner(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.Int32,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.Int32,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.Int32,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeOwner(System.Int32,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeOwner</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.Int32,System.String,System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Changes the group of the specified file or directory.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginChangeGroup</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ChangeGroup(System.Int32,System.String)"/>.</para>
            </remarks>
            <param name="ownerID">numerical group id </param>
            <param name="path">the path to the file/directory on the remote server</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndChangeGroup(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.Int32,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.Int32,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.Int32,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginChangeGroup(System.Int32,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndChangeGroup</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String,System.AsyncCallback,System.Object)">
            <summary>
            [SFTP Only] Creates a symbolic link on the server.
            </summary>
            <remarks>
            <para>You can create a callback method that implements the <see cref="T:System.AsyncCallback"/>
            delegate and pass its name to the <c>BeginCreateSymbolicLink</c> method.  The <c>state</c>
            argument may be used to pass in data that will be passed to the callback
            method.</para>
            <para>For more information please refer to the synchronous version of this method,
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.CreateSymbolicLink(System.String,System.String)"/>.</para>
            </remarks>
            <param name="linkPath">path name of the symlink to be created </param>
            <param name="targetPath">target of the symlink on the remote server</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:EnterpriseDT.Net.Ftp.FTPTask"/> that references the asynchronous get.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndCreateSymbolicLink(System.IAsyncResult)">
            <summary>
            [SFTP Only] Completes the asynchronous operation started in <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String,System.AsyncCallback,System.Object)"/>.
            </summary>
            <remarks>
            <para>Before calling <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String,System.AsyncCallback,System.Object)"/>, you need to create a callback method that 
            implements the <see cref="T:System.AsyncCallback"/> delegate. This callback method executes in a 
            separate thread and is called by the system after <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String,System.AsyncCallback,System.Object)"/> returns. 
            The callback method must accept the <see cref="T:System.IAsyncResult"/> returned by the 
            <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginCreateSymbolicLink(System.String,System.String,System.AsyncCallback,System.Object)"/> method as a parameter.  This parameter may then be
            passed to the <c>EndCreateSymbolicLink</c> method to complete the operation.</para>
            </remarks>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that stores state information for 
            this asynchronous operation.</param>
            <returns>The reply returned by the server.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.OnValidateServer(System.Object,EnterpriseDT.Net.Ftp.ServerValidationEventArgs)">
            <summary>
            Used to invoke on the GUI thread
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.Connect">
             <summary>Connect to the FTP server.</summary>
             <remarks>
             <para>If this component is being used on a form or within another component then
             it is a good idea to use the "Connection Tester" to test the property settings.</para>
             
             <para>Connections are not opened until the <see cref="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.Connect"/> method is called.
             Connection-, Authentication-, and Security-related properties should be set
             prior to opening the connection.</para>
             
             <para>At a minimum, the following properties should be set prior to connection.
             <list type="table">
               <listheader>
            		<term>Property</term>
            		<term>Description</term>
               </listheader>
               <item>
                 <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">Protocol</see></term>
                 <description>The <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol">protocol</see> to use: 
                 SFTP, explicit FTPS, implicit FTPS or plain FTP.</description>
               </item>
               <item>
                 <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerAddress">ServerAddress</see></term>
                 <description>The domain-name or IP-address of the server.</description>
               </item>
               <item>
                 <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.UserName">UserName</see></term>
                 <description>User-name of account on the server.</description>
               </item>
               <item>
                 <term><see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Password">Password</see></term>
                 <description>Password of account on the server.</description>
               </item>
             </list></para>
             
             <para><b>FTPS:</b> If explicit FTPS has been selectedand <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure"/> 
             is <c>true</c> (the default) then the component 
             will try to secure the connection immediately after successfully connecting.  
             A secure connection will always be attempted in implicit FTPS is selected 
             regardless of the value of <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure"/>.</para>
            
             <para><example>The following example illustrates the establishment of an explicit FTPS
             connection using automatic server validation</example>
             <code>
               SecureFTPConnection ftp = new SecureFTPConnection();
               ftp.Protocol = FileTransferProtocol.FTPSExplicit;
               ftp.ServerAddress = "my-server-name";
               ftp.UserName = "my-username";
               ftp.Password = "my-password";
               ftp.ServerValidation = SecureFTPServerValidationType.Automatic;
               // the server's certificate must have been previously registered with
               // the operating system (see class description)
               ftp.Connect();
               ftp.Close();
             </code></para>
             
             <para><b>SFTP:</b> SFTP connections always require some kind of authentication;
             this may be set using the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> property.  Server
             validation is optional, but recommended; it is selected using the
             <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> property.
             </para>
             
             <para><example>The following example illustrates an SFTP client
             connecting to a server using simple password authentication but no
             server validation:</example>
             <code>
               SecureFTPConnection ftp = new SecureFTPConnection();
               ftp.Protocol = FileTransferProtocol.SFTP;
               ftp.ServerAddress = "my-server-name";
               ftp.UserName = "my-username";
               ftp.Password = "my-password";
               ftp.AuthenticationMethod = AuthenticationType.Password;
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               ftp.Connect();
               ftp.Close();
             </code></para>
             
             <para><example>This example illustrates an SFTP client using public key
             authentication connecting to a server:</example>
             <code>
               SecureFTPConnection ftp = new SecureFTPConnection();
               ftp.Protocol = FileTransferProtocol.SFTP;
               ftp.ServerAddress = "my-server-name";
               ftp.UserName = "my-username";
               ftp.AuthenticationMethod = AuthenticationType.PublicKey;
               ftp.ClientPrivateKeyFile = "pathtokeyfile";
               ftp.ClientPrivateKeyPassphrase = "passwordforkeyfile";
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               ftp.Connect();
               ftp.Close();
             </code></para>
             
             <para>This method will throw an <c>FTPException</c> if the component is 
             already connected to the server.</para>
             </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.PostLogin">
            <summary>
            Called after the user has been successfully logged in.
            </summary>
            <remarks>
            Sets the transfer-type and the current working directory. If
            AutoLogin is set to false, this method should be called
            explicitly to initialise the client state.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureConnection">
            <summary>
            [FTP/FTPS Only] Switches an explicit FTPS connection to secure mode.
            </summary>
            <remarks>
            It is not necessary to call this method if <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure"/> is set to
            <c>true</c> (the default) since this is then automatically done when the
            original connection is made.  It is only necessary to do this if 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure"/> is set to <c>false</c> and the user wishes to 
            manually control when the connection is switched to secure mode.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.BeginInvokeAdminCommand(System.String,System.String[],System.AsyncCallback,System.Object)">
            <summary>
            INTERNAL ONLY
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.EndInvokeAdminCommand(System.IAsyncResult)">
            <summary>
            INTERNAL ONLY
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.InvokeAdminCommand(System.String,System.String[])">
            <summary>
            INTERNAL ONLY
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.OnSecuringConnection">
            <summary>
            Called when security is being negotiated on the connection (control channel).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.OnSecuredConnection">
            <summary>
            Called when security has been negotiated on the connection (control channel).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.RaiseSecuredConnection(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuredConnection"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.RaiseSecuringConnection(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuringConnection"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.RaiseValidatingServer(EnterpriseDT.Net.Ftp.ServerValidationEventArgs)">
            <summary>Raise the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.ValidatingServer"/> event.</summary>
            <param name="e">Event arguments.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ReadLicenseDetailsFromRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.WriteLicenseDetailsToRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.NewSite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.CheckFTPType(System.Boolean)">
            <summary>
            Checks the FTP type and throws and exception if it's incorrect.
            </summary>
            <param name="ftpOnly"><c>true</c> if the type must be FTP.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.GetURL">
            <summary>
            Returns a URL corresponding to the current state of this <c>SecureFTPConnection</c>.
            </summary>
            <returns>URL corresponding to the current state of this <c>SecureFTPConnection</c></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.GetURL(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns a URL corresponding to the current state of this <c>SecureFTPConnection</c>.
            The URL optionally includes the directory, user-name and password.
            </summary>
            <param name="includeDirectory">Should the directory be included in the URL?</param>
            <param name="includeUserName">Should the user-name be included in the URL?</param>
            <param name="includePassword">Should the password be included in the URL?</param>
            <returns>URL corresponding to the current state of this <c>SecureFTPConnection</c></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.SecureFTPConnection.ShowSocksProxyEditor(System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the proxy settings editor as a modal dialog or as a window.
            </summary>
            <param name="parent">Reference to parent window (may be null)</param>
            <returns>A reference to the form.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerAddress">
            <summary>
            The domain-name or IP address of the FTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.ServerPort = 22;
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UserName">
            <summary>User-name of account on the server.</summary>
            <value>The user-name of the account the server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Password">
            <summary>Password of account on the server.</summary>
            <value>The password of the account the server that will be logged into upon connection.</value>
            <remarks>
            <para>This property must be set before a connection with the server is made.</para>
            <para><example>The following example illustrates an SFTP client
            connecting to a server using simple password authentication but no
            server validation:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol">
            <summary>
            Type of secure FTP to use.
            </summary>
            <remarks>
            Four types of file transfer are available:
            <list type="bullet">
            <listheader><term>Type</term></listheader>
            <item>
            <term>FTP</term>
            <description>Traditional unencrypted FTP.</description>
            </item>
            <item>
            <term>FTPSExplicit</term>
            <description>FTP-over-SSL which allows switching between secure and unsecure transfers.</description>
            </item>
            <item>
            <term>FTPSImplicit</term>
            <description>FTP-over-SSL which simply performs FTP over pure SSL sockets.</description>
            </item>
            <item>
            <term>SFTP</term>
            <description>SSH File Transfer Protocol, which are secure file transfers via SSH.</description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec. Set to -1 or 0 for
            no bandwidth limiting.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.CompressionPreferred">
            <summary>
            Flag to enable or disable compression for FTP/FTPS/SFTP transfers.
            </summary>
            <remarks>
            <para>
            Some FTP/FTPS servers support the MODE Z command, permitting transfers to
            be compressed. This speeds up transfers significantly for files that
            are compressible such as text files. Most SFTP servers also support
            compression. Note that setting this flag to true does not guarantee that
            compression will occur, as it must be supported by the server.
            </para>
            <para>
            If this flag is switched on, MODE Z compression is enabled if the
            FTP/FTPS server permits it. If the flag is later switched off, MODE Z compression
            is not disabled until the connection is closed and then re-opened again. 
            For SFTP servers, zlib compression is set as the preferred compression, and
            will be used if supported by the server (and it can alter PreferredCompressionAlgorithms,
            adding zlib compression if it is not present).
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SocksProxySettings">
            <summary>
            Settings for SOCKS proxy.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>SecureFTPConnection</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SocksProxySettings"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <see cref="T:EnterpriseDT.Util.Socks.Socks4Context"/> or 
            <see cref="T:EnterpriseDT.Util.Socks.Socks5Context"/>.
            For example, for SOCKS4:
            </para>
            <code>
            	myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
            	Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            	socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            	socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            	myFTPClient.SocksContext = socksContext;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for FTPing through firewalls.  HTTP and SOCKS (4,4A and 4) are
            supported.  
            </para>
            <para>
             SOCKS supports both passive (PASV) and active (PORT) mode transfers. 
             Note that only passive mode transfers are possible via an HTTP proxy. There
             is no facility for HTTP proxies to listen for incoming connections, and hence active
             mode transfers cannot be done via an HTTP proxy. An exception will be thrown
             if they are attempted.
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.CommandEncoding">
            <summary>
            The character-encoding to use when dealing with file- and directory-paths.
            </summary>
            <remarks>
            The default is <c>ASCII</c>, except for SFTP but should be changed 
            when communicating with FTP servers that have file-names containing non-ASCII characters
            <para>
            The default for SFTP is <c>UTF-8</c>, but may need to be changed for SFTP servers
            that do not support UTF-8 (typically SFTP version 3 or below).
            </para>
            <para>
            Note that this value is NOT used for SFTP servers with a version number
            greater than 3 - UTF-8 is <c>always</c> used in these cases as per the standard.
            </para>    
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.WelcomeMessage">
            <summary>
            Server's welcome message.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerCompatibility">
            <summary>
            [SFTP/FTPS] Controls various server security compatibility features.
            </summary>
            <remarks>
            <para>
            Common server incompatibility problems are caused by differing levels
            of adherence to the relevant standards. This is particularly applicable to
            FTPS. For example, the standard dictates how SSL/TLS sockets should be closed.  By default
            SecureFTPConnection will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the server which never arrives.  The <c>ServerCompatibility</c>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete using FTPS then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataWaitOnClose"/>
             and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataClosure"/>.
            If you experience hanging
            as you close your FTPS session then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose"/> and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlClosure"/>.
            </para>
            <para>
            For SFTP, some servers return an error saying the file does not exist after creating it. By
            default, the client does a permission change after creating the file, which 
            is done to ensure the file permissions are correct. If this error is encountered, try using 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut"/> to eliminate the problem.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation">
            <summary>
            [SFTP/FTPS] Method by which the server's certificate or public key is validated.
            </summary>
            <remarks>
            <para>The default for both SFTP and FTPS is 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/>.</para>
            
            <para><b>SFTP:</b> SFTP servers are validated by means of their
            public key.  Typically, the server's public key is stored in either a file 
            containing that single key, or in a file often called <i>known_hosts</i> which can 
            contain a number of public keys for different servers.  When the client connects 
            to the server, the server's public key is returned and compared with the 
            available public keys stored in the client.  Known-host files may be loaded by 
            setting the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile">KnownHosts.KnownHostsFile</see>
            property.  Individual public keys may be loaded using the
            <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)">KnownHosts.AddKnownHost</see>
            method.
            <example>The following example illustrates the loading of server public keys using
            a known-hosts file:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.Automatic;
              ftp.KnownHosts.KnownHostsFile = "my-knownhosts-file";
              ftp.Connect();
              ftp.Close();
            </code>
            <example>The following example illustrates the loading of a server's public key 
            from a public key file:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.AuthenticationMethod = AuthenticationType.Password;
              ftp.ServerValidation = SecureFTPServerValidationType.Automatic;
              ftp.KnownHosts.AddKnownHost("servers-public-key-file");
              ftp.Connect();
              ftp.Close();
            </code>
            </para>
            
            <para><b>FTPS:</b> When an SSL/TLS connection is being negotiated, the FTPS server 
            will present an SSL certificate to the client.  
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType"/>s are used to
            control what the client does with this certificate.  If server validation is used
            then the server's certificate will be validated against those installed on 
            the machine.  Please refer to the <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection">class
            description</see> for more information.
            
            <example>The following example illustrates the establishment of an explicit FTPS
            connection using automatic server validation</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.FTPSExplicit;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.Password = "my-password";
              ftp.ServerValidation = SecureFTPServerValidationType.Automatic;
              // the server's certificate must have been previously registered with
              // the operating system (see class description)
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidationCertificate">
            <summary>
            [FTPS Only] Certificate used to validate the certificate presented by the server.
            </summary>
            <remarks>
            If the server certificate is signed by a valid Certificate Authority, this property need not be set, as
            it can be validated using the existing CA certificates controlled by Windows. 
            If the certificate is self-signed (e.g. for testing) then it can't be validated unless it is 
            imported into the trusted CA authorities certificate store. The alternative is to set this property,
            typically, to a copy of the server's certificate. If set, the certificate
            sent by the server is compared with this certificate. If they don't match, validation
            fails (even if the server's certificate is signed by a CA).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AutoSecure">
            <summary>[FTPS Only] Determines if the component will automatically switch to SSL/TLS upon 
            connection when using FTPS.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> or <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSImplicit"/> 
            then the component will automatically 
            switch to SSL/TLS upon connection.  This is only relevant for explicit FTPS since
            implicit FTPS always operates over an SSL/TLS connection.
            </para>
            <para>
            The default is <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType">
            <summary>
            This property has been deprecated.  Please use <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.Protocol"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SSLVersion">
            <summary>
            [FTPS Only] Minimum SSL/TLS version to use.
            </summary>
            <remarks>
            edtFTPnet/PRO supports SSL 3.0, TLS 1.0, TLS 1.1 and TLS 1.2.  TLS is the successor to SSL and 
            should be used unless the server does not support it - SSL 3.0 has various vulnerabilities such
            as the POODLE exploit. SSLFTPSSLVersion.DETECT no longer will interoperate with SSL 3.0.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.MinSSLVersion">
            <summary>
            [FTPS Only] Minimum SSL/TLS version to use.
            </summary>
            <remarks>
            edtFTPnet/PRO supports SSL 3.0, TLS 1.0, TLS 1.1 and TLS 1.2.  TLS is the successor to SSL and 
            should be used unless the server does not support it - SSL 3.0 has various vulnerabilities such
            as the POODLE exploit. SSLFTPSSLVersion.DETECT no longer will interoperate with SSL 3.0.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.MaxSSLVersion">
            <summary>
            [FTPS Only] Maximum SSL/TLS version to use.
            </summary>
            <remarks>
            edtFTPnet/PRO supports SSL 3.0, TLS 1.0, TLS 1.1 and TLS 1.2.  TLS is the successor to SSL and 
            should be used unless the server does not support it - SSL 3.0 has various vulnerabilities such
            as the POODLE exploit. SSLFTPSSLVersion.DETECT no longer will interoperate with SSL 3.0.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.CipherSuites">
            <summary>
            [FTPS Only] Get/sets the cipher-suites permissible during establishment of a secure
            connection.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerCommonName">
            <summary>
            [FTPS Only] The name to be used when performing a name-check during 
            the validation of the server certificate.
            </summary>
            <remarks>
            An important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  Unless this property is set explicitly, the Common Name is assumed to be
            the same as the host-name that is used to connect to the server.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UseSessionResumption">
            <summary>[FTPS Only] Disables or enables SSL session resumption.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> then the component will automatically 
            use SSL session resumption when establishing new connections. Session resumption is 
            primarily a performance enhancement - it avoids some of the stages of the SSL handshake, 
            using previously cached session data.
            </para>
            <para>
            The default is <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SessionResumptionRequiresExtendedMasterSecret">
            <summary>[FTPS Only] Controls/indicates whether this client requires using the extended
            master secret for TLS session resumption.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> then the component will require the extended master secret 
            to be used for TLS session resumption. This is to avoid a security hole in session resumption. 
            However some servers don't support use of the extended master secret (and yet require session resumption). 
            So the requirement can be disabled using this property.
            </para>
            <para>
            The default is <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UseClientHelloExtension">
            <summary>[FTPS Only] Disables or enables SSL session resumption.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> then the component will send the SSL client hello 
            signature extension when TLS 1.2 is one of the protocol version options. 
            </para>
            <para>
            Some servers require that the TLS 1.2 signature extension is sent if 
            TLS 1.2 is one of the version options listed in the client Hello, even though
            the TLS 1.2 RFC states that a server MUST accept ClientHello
            messages both with and without the extensions field. 
            </para>
            <para>
            So the default is to send the extension if, say, TLS 1.1 and TLS 1.2 are in the negotiation
            list. If this flag is false, the extension is only sent if TLS 1.2 is the minimum version possible.
            </para>
            <para>
            The default is <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UseUnencryptedCommands">
            <summary>[FTPS Only] Switches the component to using an unencrypted command channel
            when using FTPS.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> then the component will automatically 
            switch to an unencrypted command channel after connection and login. If the component is 
            already connected, setting this flag to true will switch to using an unencrypted command 
            channel from this point onwards.
            </para>
            <para>
            Not all FTPS servers support this feature (known as CCC, Clear Control Channel). 
            </para>
            <para>
            Once the command channel is changed to being unencrypted, it cannot be changed back to
            encrypted within the session.  
            </para>
            <para>
            This feature can sometimes be useful in getting past firewalls that need to be able to
            inspect command channels to open ports for directory listings and file transfers.
            </para>
            <para>
            The default is <c>false</c>.
            </para>
            <para>
            If things appear to hang here, set the <c>ServerCompatibility</c> property to 
            <c>SecureFTPCompatibilityFlags.SSLDisableControlWaitOnShutdownSSL</c>
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UseUnencryptedData">
            <summary>[FTPS Only] Switches the component to using an unencrypted data channel
            when using FTPS.</summary>
            <remarks>
            <para>
            If this flag if <c>true</c> and <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecureFTPType"/> is 
            <see cref="F:EnterpriseDT.Net.Ftp.FileTransferProtocol.FTPSExplicit"/> then the component will automatically 
            switch to an unencrypted data channel after connection and login. If the component is 
            already connected, setting this flag to true will switch to using an unencrypted data 
            channel for transfers and listings from this point onwards.
            </para>
            <para>
            The default is <c>false</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientCertificate">
            <summary>
            [FTPS Only] The certificate to be presented to the server.
            </summary>
            <remarks>
            If a server requires client validation then this property must be set.
            <see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate"/>s are created using one of the static
            <c>SSLFTPCertificate.CreateFrom...</c> methods to load a certificate 
            from a file and the <see cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.AssociatePrivateKey(System.String,System.String)"/> 
            to load the associated private key.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerCertificate">
            <summary>
            [FTPS Only] The certificate presented by the server.
            </summary>
            <remarks>
            During the negotiation of a secure connection, the server presents a 
            certificate which may be accessed using this property.  The property
            may not be accessed until a secure connection has been made.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.IsControlChannelSecure">
            <summary>
            [FTPS Only] Indicates whether the control channel is currently secure.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UMask">
            <summary>
            [SFTP Only] The file creation mode mask that is applied to the default permissions 
            to create the final permission set.
            </summary>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The umask and the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.DefaultPermissions"/> are specified in
            octal. The permission set of a new file is specified by taking the default
            permissions in octal, and subtracting the umask.</para>
            <para>For example, if the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.DefaultPermissions"/> are 777 and the umask is
            set to 022, the final create permissions will be 755 (777-022).</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.DefaultPermissions">
            <summary>
            [SFTP Only] The default file creation mode permissions (in octal).
            </summary>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>Permission strings consist of three fields - permissions for owner, group and
            other users. A typical executable file might have permissions of read,write and
            executable permissions set for the owner, and read and execute permissions for 
            everyone else. This is typically displayed as rwxr-xr-x, in the order of 
            owner|group|other.</para>
            <para>Permission strings can also be presented in octal, which has certain advantages.
            An octal number corresponds to each type of permission: 4=read, 2=write and
            1=execute. These are combined to form a group of permissions, i.e. a permissions
            field. For example, to specify that a file has read, write and execute permissions,
            it is assigned 4+2+1 = 7. So for the previous example of rwxr-wr-w, this can be 
            represented in octal as 755, where the 5 comes from 4(read)+1(execute).</para>
            <para>The default permissions are combined with the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.UMask"/> to form the
            final permission set for a new file.</para>
            <para>For more details on permissions and umasks, see a Unix text or look up umask and chmod's 
            man pages.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod">
            <summary>
            [SFTP/SCP Only] The current authentication method being used. 
            </summary>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>Note that the different authentication types also have 
            various required properties associated with them that are required
            to be set.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyFile">
            <summary>[SFTP/SCP Only] Path of the private key file used to authenticate the client in SFTP/SCP.</summary>
            <value>Path of the private key file used to authenticate the client.</value>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>This property must be set before a connection with the server is made. 
            The SFTP server must have been set up with the corresponding public key before this 
            authentication method is used. For this property to be used, 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/> or <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKeyAndPassword"/>.
            </para>
            <para><example>This example illustrates an SFTP client using public key
            authentication connecting to a server:</example>
            <code>
              SecureFTPConnection ftp = new SecureFTPConnection();
              ftp.Protocol = FileTransferProtocol.SFTP;
              ftp.ServerAddress = "my-server-name";
              ftp.UserName = "my-username";
              ftp.AuthenticationMethod = AuthenticationType.PublicKey;
              ftp.ClientPrivateKeyFile = "pathtokeyfile";
              ftp.ClientPrivateKeyPassphrase = "passwordforkeyfile";
              ftp.ServerValidation = SecureFTPServerValidationType.None;
              ftp.Connect();
              ftp.Close();
            </code></para>
            </remarks>        
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyBytes">
            <summary>[SFTP/SCP Only] Byte array containing the private key used to authenticate the client in SFTP/SCP.</summary>
            <value>Byte array containing the private key used to authenticate the client.</value>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>This property must be set before a connection with the server is made. 
            The SFTP server must have been set up with the corresponding public key before this 
            authentication method is used. For this property to be used, 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/> or <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKeyAndPassword"/>.
            </para>
            <para>This property is used in preference to <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyFile"/> if both are set.</para>
            </remarks>        
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ClientPrivateKeyPassphrase">
            <summary>[SFTP/SCP Only] Passphrase of the private key file used to authenticate the client in SFTP/SCP.</summary>
            <value>Passphrase of the private key file used to authenticate the client.</value>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>This property must be set before a connection with the server is made. 
            The SFTP server must have been set up with the corresponding public key before this 
            authentication method is used. For this property to be used, 
            <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/> or <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKeyAndPassword"/>.
            </para>
            </remarks>        
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.KBIPrompts">
            <summary>
            [SFTP/SCP Only] Array of prompts used for keyboard interactive (KBI) authentication. 
            </summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>Setting this property sets up keyboard interactive authentication. 
            The prompts that the server will send to the client must be known. For each prompt, an
            <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/> must be created with the matching prompt string and the
            response to be sent back to the server. Often, a single password prompt is all that is 
            required, and a <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> is supplied for this purpose. 
            For this property to be used, <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.KnownHosts">
            <summary>[SFTP/SCP Only] Manager of the list of known hosts used to authenticate the server.</summary>
            <value>Manager of the list of known hosts used to authenticate the server.</value>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>This manager is used to set the known_hosts file containing a list of
            known hosts and their public keys. It is also used to add public keys explicitly.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.RetryAuthentication">
            <summary>[SFTP/SCP Only] PBy default, authentication is retried automatically using a different method if it fails.</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredKeyExchangeMethods">
            <summary>[SFTP/SCP Only] Preferred key exchange methods to use</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredHostKeyAlgorithms">
            <summary>[SFTP/SCP Only] Preferred algorithm(s) to use for server authentication via public key</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredCipherAlgorithms">
            <summary>[SFTP/SCP Only] Preferred algorithm(s) to use for encryption</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredCompressionAlgorithms">
            <summary>[SFTP/SCP Only] Preferred algorithm(s) to use for compression</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.PreferredMACAlgorithms">
            <summary>[SFTP/SCP Only] Preferred MAC algorithm(s) to use</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerLineTerminator">
            <summary>[SFTP Only] Server line terminator to use for ASCII translation</summary>
            <remarks>
            <para>This property applies to SFTP only. </para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SSHWindowSize">
            <summary>[SFTP/SCP Only] SSH maximum local window size.</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SSHMaxPacketSize">
            <summary>[SFTP/SCP Only] SSH maximum packet size.</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SSHMaxQueuedReadRequests">
            <summary>[SFTP/SCP Only] SSH maximum size of read-request queue.</summary>
            <remarks>
            <para>This property applies to SFTP/SCP only.  In SFTP, files are read block-by-block.  The client sends one request per block.
            Queueing up read-requests helps to counteract latencies.  This property determines the number of read-requests that should be queued up.
            If it's set to <code>1</code> then no requests a queued up meaning that reads are done synchronously.  The default is <code>32</code>.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.SendInitialWindowAdjust">
            <summary>[SFTP/SCP Only] Determines whether a SSH_MSG_CHANNEL_WINDOW_ADJUST message should be
            sent initially.
            </summary>
            <remarks>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ParallelTransferMode">
            <summary>[SFTP Only] Controls if parallel mode transfers are enabled.</summary>
            <remarks>
            <para>Uploads are by default in parallel mode, which is faster than
            serial mode. This mode can be switched off if servers are unable
            to deal with parallel mode.</para>
            <para>This property applies to SFTP only.  Use the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Protocol"/> property to
            select the protocol.</para>
            <para>The default is generally appropriate in most situations.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.CloseStreamsAfterTransfer">
            <summary>
            Determines if transfer-methods taking <see cref="T:System.IO.Stream"/>s as arguments should
            close the stream once the transfer is completed.
            </summary>
            <remarks>
            If <c>CloseStreamsAfterTransfer</c> is <c>true</c> (the default) then streams are closed after 
            a transfer has completed, otherwise they are left open.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the FTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the FTP client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.Timeout">
            <summary> 
            TCP timeout (in milliseconds) of the underlying sockets (0 means none).
            </summary>
            <remarks>Timout value in milliseconds.  The default value is 120000, which indicates 
            a 120 second timeout period.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.TCPBufferSize">
            <summary> 
            TCP read/write buffer size of the underlying sockets (-1 means use defaults). For some
            transfers setting this value to 0 can improve performance.
            </summary>
            <remarks>The default value is -1, which means use the Microsoft defaults. This value
            is not used for HTTP.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server (FTP and FTPS).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.TransferBufferSize">
            <summary>
            The size of the application buffers used in reading and writing data.
            </summary>
            <remarks>
            <para>The size of receive and transmit buffers.  The default is 32700.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.
            </summary>
            <remarks>
            <para>This property determines the approximate number of bytes transferred
            between each <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event.</para>
            <para>The default value is 4096.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.TransferNotifyListings">
            <summary>
            By default the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.BytesTransferred"/> event is not triggered 
            during directory listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.LogTag">
            <summary>
            Log tag
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuringConnection">
            <summary>Occurs when the component is securing the connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuredConnection">
            <summary>Occurs when the component has secured the connection to the server.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.ValidatingServer">
            <summary>Occurs when the server's identity needs to be validated.</summary>
            <remarks>
            This event is only triggered if <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> is set to 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Callback"/>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ServerValidationEventArgs">
            <summary>
            Event args for ValidatingServer event
            </summary>    
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.IsValid">
            <summary>
            Set to true if key is to be accepted, false otherwise. 
            </summary>
            <remarks>
            When the event arg object is received by the callback, this will
            already be set to true if the key or certificate was found.
            The callback should set this to true if the key or certificate
            is to be accepted.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSHPublicKey">
            <summary>
            The public key in the case of an SFTP/SSH server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSLServerCertificate">
            <summary>
            The SSL/TLS certificate presented by the FTP server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSLServerCertificateChain">
            <summary>
            The full chain of SSL/TLS certificates presented by the FTPS server.
            </summary>
            <remarks>
            The server's certificate is the first element in the array, with those of the issuers
            appearing subsequently.  Note that the <see cref="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSLServerCertificate"/> property 
            references the first element in this array.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.ServerValidationEventArgs.SSLValidationStatus">
            <summary>
            Validation status of the SSL/TLS certificate.
            </summary>
            <remarks>
            This property may be used to aid in evaluating whether or not the certificate should be
            accepted.  A value of <see cref="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.ValidCertificate"/> indicates that
            the system is recommending that the server should be validated; other values indicate
            that it should not.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.ServerValidationHandler">
            <summary>
            Delegate used for ValidatingServer event
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType">
            <summary>
            Specifies type of server valudation to use.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.None">
            <summary>Validates the server regardless of the certificate (FTPS) or 
            public key (SFTP) that is presented.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic">
            <summary>
            <para>Automatically performs standard server validation to authenticate the
            server.
            </para>
            <para>For SFTP, the list of known hosts that have been loaded by the client is
            searched for the server's IP address and hostname. The public key presented 
            by the server is checked for a match against the public keys registered for that
            host. Note that if the server presents (for example) a DSA key, only a DSA key 
            registered under the hostname or IP address for the server will be able to match.
            If a matching public key for the server is found, validation succeeds.
            </para>
            <para>
            For FTPS, operating system resources are used to validate the certificate presented
            by the server.  On Windows the installed certificates are used for this purpose.  
            These certificates may be managed on the <i>Contents</i> tab of the <i>Internet Options</i> 
            control panel.  
            </para>
            <para>
            Note that an important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  The Common Name to be used for name-checking is assumed to be the
            same as the host-name that was used upon connection, though it may be set
            manually using the <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerCommonName"/>.
            </para>
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck">
            <summary>
            Same as <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> but without name-checking. In the case of SFTP, all public keys loaded
            by the client are checked for a match irrespective of the hostname or IP address that
            they are registered under. 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Callback">
            <summary>
            A callback supplied by the user is used to validate the public key
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags">
            <summary>
            Controls various server security compatibility features. 
            </summary>
            <remarks>
            <para>
            Common server incompatibility problems are caused by differing level
            of adherence to the relevant standards. This is particularly applicable to
            FTPS. For example, the standard dictates how SSL/TLS sockets should be closed.  By default
            SecureFTPConnection will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the client which never arrives.  The <c>ServerCompatibility</c>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete using FTPS then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataWaitOnClose"/>
             and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataClosure"/>.
            If you experience hanging
            as you close your FTPS session then you should first try 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose"/> and, if the problem
            still occurs, <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlClosure"/>.
            </para>
            <para>
            For SFTP, some servers return an error saying the file does not exist after creating it. By
            default, the client does a permission change after creating the file, which 
            is done to ensure the file permissions are correct. If this error is encountered, try using 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut"/> to eliminate the problem.
            </para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.Standard">
            <summary>No special compatibility options, i.e. standard-compliant FTPS and SFTP.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlClosure">
            <summary>FTPS only. Disables the SSL/TSL closure exchange on the control channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataClosure">
            <summary>FTPS only. Disables the SSL/TSL closure exchange on data channels.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose">
            <summary>FTPS only. Prevents the client from waiting for a reply to the SSL/TLS closure command on the control channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableDataWaitOnClose">
            <summary>FTPS only. Prevents the client from waiting for a reply to the SSL/TLS closure command on the data channel.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSLDisableControlWaitOnShutdownSSL">
            <summary>FTPS only. Prevents the client from waiting for an ShutdownSSL message when calling UseUnencryptedCommands</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut">
            <summary>SFTP only. Disables the permission change made after creating a file.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TandemFileParser">
            <summary>  
            Represents a remote Tandem file parser.
            </summary>
            <remarks>
            It can be explicitly set in FTPConnection by:
            <![CDATA[
            ftp.FileInfoParser.FileParser = new TandemFileParser();
            ]]>
            </remarks>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.MIN_EXPECTED_FIELD_COUNT">
            <summary> Number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.format1">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.formats">
            <summary>array of formats</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TandemFileParser.trimChars">
            <summary>Trim array for permissions string</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TandemFileParser.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TandemFileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TandemFileParser.Parse(System.String)">
            <summary> Parse server supplied string. Should be in
            form 
            <![CDATA[
            File         Code             EOF  Last Modification    Owner  RWEP
            IARPTS        101            16354 18-Mar-08 15:09:12 244, 10 "nnnn"
            JENNYCB2      101            16384 10-Jul-08 11:44:56 244, 10 "nnnn"
            ]]>
            </summary>
            <param name="raw">  
            raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TandemFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferCompleteStrings">
            <summary>  
            Contains fragments of server replies that a transfer completed
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.3 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.TransferCompleteStrings.TRANSFER_COMPLETE">
            <summary>
            Server string indicating no files found (NO_FILES)
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.TransferCompleteStrings.#ctor">
            <summary>
            Constructor. Adds the fragments to match on
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.TransferParameters">
            <summary>
            Transfer parameters used for a transfer
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferParameters.HttpParameters">
            <summary>
            Holds the HTTP parameters to be used for the
            this operation. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.TransferParameters.HttpMethod">
            <summary>
            HTTP method to use - GET is the default
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.UnixFileParser">
            <summary>  
            Represents a remote Unix file parser
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.26 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.SYMLINK_ARROW">
            <summary> Symbolic link symbol</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.SYMLINK_CHAR">
            <summary> Indicates symbolic link</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.ORDINARY_FILE_CHAR">
            <summary> Indicates ordinary file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.DIRECTORY_CHAR">
            <summary> Indicates directory</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format1a">
            <summary>Date format 1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format1b">
            <summary>Date format 1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2a">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2b">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2c">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2d">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2e">
            <summary>Date format 2</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.MIN_FIELD_COUNT">
            <summary> Minimum number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format1">
            <summary>array of format 1 formats</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.format2">
            <summary>array of format 2 formats</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.UnixFileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser.IsValidFormat(System.String[])">
            <summary>
            Valid format for this parser
            </summary>
            <param name="listing">listing array</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser.IsUnix(System.String)">
            <summary> 
            Is this a Unix format listing?
            </summary>
            <param name="raw">raw string to parse</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.UnixFileParser.Parse(System.String)">
            <summary> 
            Parse server supplied string, e.g.:
            
            lrwxrwxrwx   1 wuftpd   wuftpd         14 Jul 22  2002 MIRRORS -> README-MIRRORS
            -rw-r--r--   1 b173771  users         431 Mar 31 20:04 .htaccess
            
            </summary>
            <param name="raw">  raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.UnixFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.VMSFileParser">
            <summary>  
            Represents a remote OpenVMS file parser
            </summary>
            <author>Bruce Blackshaw
            </author>
            <version>$Revision: 1.14 $</version>
            <remarks>Hacked and modified from some helpful source provided by Jason Schultz</remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.DEFAULT_BLOCKSIZE">
            <summary> Number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.DIR">
            <summary>Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.HDR">
            <summary>Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.TOTAL">
            <summary>Total field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.VMSFileParser.MIN_EXPECTED_FIELD_COUNT">
            <summary> Number of expected fields</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.VMSFileParser.IsMultiLine">
            <summary>
            Does this parser parse multiple lines to get one listing?
            </summary>
            <returns>true or false</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.VMSFileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.VMSFileParser.Parse(System.String)">
            <summary> Parse server supplied string</summary>
            <param name="raw">raw string to parse</param>
            <returns>FTPFile object representing the raw string</returns>
            <remarks>Listing look like the below:
             OUTPUT: 
               
               Directory dirname
                
               filename
                       used/allocated    dd-MMM-yyyy HH:mm:ss [group,owner]        (PERMS)
               filename
                       used/allocated    dd-MMM-yyyy HH:mm:ss [group,owner]        (PERMS)
               ...
               
               Total of n files, n/m blocks
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.VMSFileParser.TweakDateString(System.String[])">
            <summary> Tweak the date string to make the month camel case</summary>
            <param name="fields">array of fields</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.VMSFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.VMSFileParser.VersionInName">
            <summary>
            Is the version number returned as part of the filename?
            </summary>
            <remarks>
            Some VMS FTP servers do not permit a file to be deleted unless
            the filename includes the version number. Note that directories are
            never returned with the version number.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.VMSFileParser.BlockSize">
            <summary>
            Get and set the blocksize used to calculate the file
            size.
            </summary>
            <remarks>
            The blocksize is multiplied by the reported size to obtain
            the actual size.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.WildcardFilter">
            <summary>  
            Wildcard file filter that matches against <c>?</c> for single characters and <c>*</c> 
            for multiple characters. Case is ignored.
            </summary>
            <author>
            Bruce Blackshaw       
            </author>
            <version>      
            $Revision: 1.9 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WildcardFilter.ignoreCase">
            <summary>
            On Windows we ignore case
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WildcardFilter.directoriesAlwaysMatch">
            <summary>
            Do directories always match?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WildcardFilter.wildcard">
            <summary>
            The wildcard used
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WildcardFilter.wildcardFields">
            <summary>
            A split up wildcard
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.#ctor">
            <summary>
            Constructor. All files match
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.#ctor(System.String)">
            <summary>
            Wildcards are a combination of '*' and '?'.
            </summary>
            <remarks>
            It is meaningless to have them adjacent to each other, and so this is not permitted.
            </remarks>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.Init(System.String)">
            <summary>
            Called by all constructors
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.Accept(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Matching method accepting an <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> object.
            </summary>
            <param name="file">File to match</param>
            <returns><c>true</c> if file is to be included.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.Accept(System.String)">
            <summary>
            Matching method.
            </summary>
            <remarks>
            Case is ignored.
            </remarks>
            <param name="name">name to test</param>
            <returns>true if name matches wildcard</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WildcardFilter.Split(System.String)">
            <summary>
            Splits string consisting of fields separated by
            </summary>
            <param name="str">string to split</param>
            <returns>array of fields</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.WildcardFilter.Wildcard">
            <summary>
            Get the wildcard string
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.WildcardFilter.IgnoreCase">
            <summary>
            Is case ignored in the wildcard match?
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.WindowsFileParser">
            <summary>  
            Represents a remote Windows file parser
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.19 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.DIR">
            <summary> Directory field</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.MIN_EXPECTED_FIELD_COUNT">
            <summary> Number of expected fields</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.format1">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.format2">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.format3">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.formats">
            <summary>array of formats</summary> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.WindowsFileParser.sep">
            <summary>Splitter token</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WindowsFileParser.#ctor">
            <summary> Default constructor</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WindowsFileParser.IsValidFormat(System.String[])">
            <summary>
            Test for valid format for this parser
            </summary>
            <param name="listing">listing to test</param>
            <returns>true if valid</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.WindowsFileParser.Parse(System.String)">
            <summary> Parse server supplied string. Should be in
            form 
            <![CDATA[
            05-17-03  02:47PM                70776 ftp.jar
            08-28-03  10:08PM       <DIR>          EDT SSLTest
            ]]>
            </summary>
            <param name="raw">  
            raw string to parse
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.WindowsFileParser.TimeIncludesSeconds">
            <summary>
            Get flag indicating whether or not the most recent parse returned seconds.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.CertForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertForm.#ctor">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.PromptForCertificate(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="promptForPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.PromptForCertificate(System.Windows.Forms.Form,System.String,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="promptForPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.CertificatePropertyEditor.PromptForCertificate(System.Windows.Forms.Form,System.String,System.Boolean,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="promptForPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.EncodingConverter">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="sourceType"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="culture"></param>
            <param name="value"></param>
            <param name="destinationType"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.tabControl">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.commandLogTab">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.#ctor(EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="connection"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPDesignerForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.Appender">
            <summary>  Interface for classes that output log
            statements 
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.7 $
            </version>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Appender.Close">
            <summary> Close this appender</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Appender.Log(System.String)">
            <summary> Log a message
            
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Appender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.component">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.guidTestConnection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.cmdTestConnection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.guidLoad">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.cmdLoad">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.guidSave">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.cmdSave">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.verbs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.OnShowConnectionDesigner(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.OnLoad(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.OnSave(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.NewDesignerForm(EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="cxn"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnVerbs.Verbs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.GetSortedActionItems">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.TestConnection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.ServerAddress">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.ServerPort">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.UserName">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionActionList.Password">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner.NewVerbs(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner.DoDefaultAction">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionDesigner.Verbs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.NewVerbs(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.AddCommand(System.ComponentModel.Design.MenuCommand)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="verb"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.FindCommand(System.ComponentModel.Design.CommandID)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="commandID"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.GlobalInvoke(System.ComponentModel.Design.CommandID)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="commandID"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="menuID"></param>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.AddVerb(System.ComponentModel.Design.DesignerVerb)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="verb"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnMenuCmdSvc.Verbs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.#ctor(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <param name="container"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.NewMenuCommandService(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.GetService(System.Type)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="serviceType"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.Component">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.Container">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.DesignMode">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.Name">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPCxnSite.ExtenderListService.GetExtenderProviders">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ListBoxItem">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.PasswordForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.PasswordForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordForm.#ctor">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.PasswordForm.Text">
            <summary/>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.PasswordForm.Password">
            <summary/>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SocksPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SocksPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SocksPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor.List_SelectedValueChanged(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor.GetConnections(System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ConnectionPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.EncodingPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingPropertyEditor.List_SelectedValueChanged(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.EncodingPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.FTPPropertyPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.FTPPropertyPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.FTPPropertyPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ClickableEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ClickableEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ClickableEditor.tree_AfterSelect(System.Object,System.Windows.Forms.TreeViewEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ClickableEditor.GetClickableControls(System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ClickableEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.PasswordEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PasswordEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.#ctor(EnterpriseDT.Util.Socks.SocksContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="socksContext"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.ProxySettingsForm.ProxySettings">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SecureFTPDesignerForm">
            <summary>
            INTERNAL USE ONLY
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPDesignerForm.#ctor(EnterpriseDT.Net.Ftp.SecureFTPConnection)">
            <summary>
            INTERNAL USE ONLY
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnVerbs.guidCertificateManager">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnVerbs.cmdCertificateManager">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnVerbs.NewDesignerForm(EnterpriseDT.Net.Ftp.ExFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="cxn"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionActionList.Protocol">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionDesigner">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionDesigner.Initialize(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionDesigner.NewVerbs(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnMenuCmdSvc.NewVerbs(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnSite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnSite.#ctor(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <param name="container"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPCxnSite.NewMenuCommandService(System.ComponentModel.IComponent)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="component"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ServerCertificatePropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ServerCertificatePropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ServerCertificatePropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ServerCertificatePropertyEditor.PromptForCertificate(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="promptForPrivateKey"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.KnownHostsPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.KnownHostsPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.KnownHostsPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.KnownHostsPropertyEditor.PromptForKnownHostFile(System.Windows.Forms.Form,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="origPath"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.PrivateKeyPropertyEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PrivateKeyPropertyEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PrivateKeyPropertyEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PrivateKeyPropertyEditor.PromptForPrivateKeyFile(System.Windows.Forms.Form,EnterpriseDT.Net.Ftp.SecureFTPConnection)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="parent"></param>
            <param name="origPath"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.PassphraseEditor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PassphraseEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="Context"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.PassphraseEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="context"></param>
            <param name="provider"></param>
            <param name="Value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionSerializer">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionSerializer">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.ExFTPConnectionSerializer.GetTargetObject(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.SecureFTPConnectionSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Design.FTPConnectionEditorSerializer">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.FTPConnectionEditorSerializer.Deserialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="codeDomObject"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Design.FTPConnectionEditorSerializer.Serialize(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="manager"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPAnimation">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPAnimation.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPAnimation.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPAnimation.Connection">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPCommandView">
            <summary>
            <c>FTPCommandView</c> displays all FTP commands and their replies in real-time.
            </summary>
            <remarks>
            <para>Commands are prefixed with the value of <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.CommandPrefix"/> and
            replies are prefixed with <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.ReplyPrefix"/>.</para>
            <para>A context-menu is displayed if the user right-clicks on the control.  The context menu
            has options for clearing all messages; selecting all messages; clearing the current selection;
            copying messages to the clipboard; and freezing the display.  Freezing the display means
            that no new messages are displayed.</para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPMessageView">
            <summary>
            Base class for controls which need to display a list of messages.
            </summary>
            <remarks>
            <c>FTPMessageView</c> is a base-class for <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPCommandView"/> and
            <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPLogView"/>.  It displays a single list-box, with a right-click 
            context menu that allows clearing, copying to clipboad, and freezing
            (i.e. ignoring new messages).
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPMessageView"/> class. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Clear">
            <summary>
            Clears all messages from the list.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Copy">
            <summary>
            Copies all messages (or the currently selected messages) to the clipboard.
            </summary>
            <remarks>
            If no messages are selected then all messages will be copied, otherwise only the
            selected messages will be copied.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SetSelection(System.Int32,System.Boolean)">
            <summary>
            Selects/unselects the message with the given index.
            </summary>
            <param name="index"></param>
            <param name="select"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectAll">
            <summary>
            Selects all messages in the view.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.ClearSelection">
            <summary>
            Clears the current selection.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Freeze">
            <summary>
            Prevents new messages from being displayed.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Unfreeze">
            <summary>
            Enables the display of new messages.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.PrintMessage(System.String)">
            <summary>
            Adds the given message to the view.
            </summary>
            <remarks>
            The control ensures that no more than <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MaxMessages"/> are displayed by 
            deleting the oldest message(s).
            </remarks>
            <param name="message"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.AllowContextMenu">
            <summary>
            Determines whether or not to allow the context menu on right-click.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Connection">
            <summary>
            The <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> whose messages
            are to be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.ClearOnReconnect">
            <summary>
            Controls whether or not messages are cleared when an FTP connection is opened.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MaxMessages">
            <summary>
            Maximum number of messages what will be displayed.
            </summary>
            <remarks>
            Once <c>MaxMessages</c> are displayed, the oldest message will be discarded each time
            a new message is added.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.AutoScroll">
            <summary>
            Determines whether or not the control will keep the latest line visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Messages">
            <summary>
            All the messages currently being displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectedMessages">
            <summary>
            All the messages that are currently selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectedIndices">
            <summary>
            The indices of the currently selected messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectedIndex">
            <summary>
            The index of the current selection, or <c>-1</c> if no message is selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectedMessage">
            <summary>
            The currently selected message, or <c>null</c> if no message is selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.HorizontalScrollbar">
            <summary>
            Gets or sets a value indicating whether a horizontal scroll bar is displayed in the control. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.ItemHeight">
            <summary>
            Gets or sets the height of an item in the view. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.SelectionMode">
            <summary>
            Determines how list box items are selected. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Text">
            <summary>
            The currently selected message, or <c>null</c> if no message is selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.TopIndex">
            <summary>
            Index of the first visible item in the list box control
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.Menu">
            <summary>
            Get the context menu shown on right-click.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemUpload">
            <summary>
            Get the menu-item representing clear.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemDownload">
            <summary>
            Get the menu-item representing copy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemFreeze">
            <summary>
            Get the menu-item representing "freeze" (which halts messages).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemSelectAll">
            <summary>
            Get the menu-item representing "select all".
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPMessageView.MenuItemClearSelection">
            <summary>
            Get the menu-item representing "clear selection".
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPCommandView"/> class. 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.Connection">
            <summary>
            The <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> that is
            currently being edited.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.CommandPrefix">
            <summary>
            String that precedes command messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.ReplyPrefix">
            <summary>
            String that precedes reply messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCommandView.MaxLineLength">
            <summary>
            Maximum length of lines (-1 means no maximum).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor">
            <summary>
            A Windows Forms control which allows the user to edit the properties of an
            <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>.
            </summary>
            <remarks>
            <para><c>FTPConnectionEditor</c> is a <see cref="T:System.Windows.Forms.PropertyGrid"/> that has been
            customized for editing <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> and <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> 
            objects.</para>
            <para>The <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Connection"/> property selects the connection object being
            edited.  By default all properties are displayed, but the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Properties"/> 
            property may be used to hide any of the connection's properties.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Connection">
            <summary>
            The <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/> that is
            currently being edited.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Properties">
            <summary>
            Controls which properties are displayed.
            </summary>
            <remarks>
            <para>By default all properties are displayed.  When specific categories/properties 
            are selected using <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddCategory(System.String,System.String,System.Boolean)"/> or
            <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddProperty(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)"/> then only those categories/properties
            will be displayed.</para>
            <para>The easiest way to edit this property is through your IDE's Property View
            as it will display a custom designer.  It should be noted that this editor
            only allows categories/properties to be hidden or displayed.  If it necessary
            to change Display Names or Descriptions then the methods of 
            <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties"/> should be used.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.ContextMenuDefaultLocation">
            <summary>
            Location at which the context menu will be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.HelpBackColor">
            <summary>
            Background color of the help pane.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.HelpForeColor">
            <summary>
            Foreground color of the help pane.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.HelpVisible">
            <summary>
            Determines whether or not the help pane is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.LineColor">
            <summary>
            Color of lines used within editor.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.PropertySort">
            <summary>
            Method by which properties are sorted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.SelectedGridItem">
            <summary>
            The currently selected <see cref="T:System.Windows.Forms.GridItem"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.ToolbarVisible">
            <summary>
            Determines whether or not the toolbar is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.ViewBackColor">
            <summary>
            Background color of the property display area.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.ViewForeColor">
            <summary>
            Foreground color of the property display area.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.PropertyChanged">
            <summary>
            Called when a connection property is changed.
            </summary>
            <remarks>
            Note that this event is simply delegating the <see cref="E:EnterpriseDT.Net.Ftp.FTPConnection.PropertyChanged"/> event.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties">
            <summary>
            Used by <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor"/> to select the properties that
            may be edited by the user of the control.
            </summary>
            <remarks>
            <para>The easiest way to edit <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionEditor.Properties"/> 
            is through your IDE's Property View as it will display a custom designer.  This editor
            only allows categories/properties to be hidden or displayed.  If it necessary
            to change Display Names or Descriptions then <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddCategory(System.String,System.String,System.Boolean)"/>
            and <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddProperty(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)"/> should be used.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.#ctor(System.Boolean)">
            <summary>
            Constructor that permits setting the default visible state for properties.
            </summary>
            <param name="defaultVisible">Used to set the default visible state.</param>
            <remarks>
            The default visible state applies to all categories and properties that are 
            added to this class.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddCategory(System.String,System.String,System.Boolean)">
            <summary>
            Adds the named category using the given Display Name.
            </summary>
            <param name="name">Actual name of the category.</param>
            <param name="displayName">Name to be display to the user.</param>
            <param name="visible">Is this category visible?</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.AddProperty(System.String,System.String,System.String,System.String,System.Boolean,System.Int32)">
            <summary>
            Adds the named property using the given display information.
            </summary>
            <param name="categoryName">Actual name of the category.</param>
            <param name="propertyName">Actual name of the property.</param>
            <param name="propertyDisplayName">Name to be display to the user.</param>
            <param name="propertyDescription">Description to display to the user.</param>
            <param name="visible">Is this property visible?</param>
            <param name="order">Properties will be displayed in ascending order.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.RemoveProperty(System.String,System.String)">
            <summary>
            Removes the given property.
            </summary>
            <param name="categoryName">Category name</param>
            <param name="propertyName">Property name</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.CountCategories">
            <summary>
            Gets the number of categories.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.CountProperties">
            <summary>
            Gets the total number of properties in all categories.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPConnectionProperties.CountVisibleProperties">
            <summary>
            Gets the total number of visible properties in all categories.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPController">
            <summary>
            Non-visual Windows Forms component attach user-defined buttons or menu-items
            to various operations of an <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>.
            </summary>
            <remarks>
            <para><c>FTPController</c> allows the developer to attach any <see cref="T:System.ComponentModel.Component"/>
            with a <c>Click</c>-event to particular FTP operations.  Such components are
            termed <i>Click Event-Sources</i>.</para>
            
            <para>It is important to note that the FTPController is an optional component 
            whose presence it not required for the other FTP controls to be able to operate 
            and interact.  Its only function is to link buttons, hyperlinks or menu-items 
            to particular FTP actions; if desired, this may be done by explicitly calling 
            methods on the FTP connection object.</para>
            
            <para><c>FTPController</c> supports the following
            Click event-sources:
            <list type="table">
            <listheader><term>Click Event-Source</term><description>FTP Operation</description></listheader>
            <item><term>LoadEventSource</term>
            <description>Prompts the user for a file-name and tries to load the FTP connection properties 
            from that file using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> method.</description></item>
            <item><term>SaveEventSource</term>
            <description>Prompts the user for a file-name and tries to save the properties of
            the associated <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>
            to that file using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/> method.</description></item>
            <item><term>ConnectEventSource</term>
            <description>Causes the associated FTP connection to attempt to connect to an FTP server
            as defined by its properties (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Connect"/>).</description></item>
            <item><term>CloseEventSource</term>
            <description>Causes the associated FTP connection to close (see 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/>).</description></item>
            <item><term>RefreshEventSource</term>
            <description>Causes the associated FTP connection to get the content of the current directory (see 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos"/>).</description></item>
            <item><term>StopEventSource</term>
            <description>Causes the associated FTP connection to cancel the current transfer (see 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTransfer"/>).</description></item>
            </list></para>
            
            <para>Event-sources are enabled and disabled as appropriate.  For example, initially
            only the Load, Save and Connect event-sources are enabled, and once the client has
            connected to the server only the Close and Refresh event-source will be enabled.</para>
            <para>The dialog-boxes that are used to prompt the user for files may be manipulated
            using the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPController.LoadDialog"/> and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPController.SaveDialog"/> properties.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Creates an instance of <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPController"/> within the given container.
            </summary>
            <param name="container">Container to place the new instance in.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.#ctor">
            <summary>
            Creates an instance of <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPController"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Connect">
            <summary>
            Connect to the server.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Close">
            <summary>
            Close the connection to the server.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Refresh">
            <summary>
            Refresh any directory listings.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Stop">
            <summary>
            Stop the current transfer (if any).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Load">
            <summary>
            Load connection settings from a file.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Reload">
            <summary>
            Reloads the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPController.MostRecentFile"/> (if any).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Save">
            <summary>
            Save connection settings to a file.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.Save(System.String,System.String)">
            <summary>
            Save connection settings to a file.
            </summary>
            <param name="initialDirectory">Initial directory for dialog.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPController.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.Site">
            <summary>
            Gets or sets the <see cref="T:System.ComponentModel.ISite"/> associated with this component.
            </summary>
            <remarks>
            Sites bind a component to a container and enable communication between them.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.ParentForm">
            <summary>
            Get or set the parent form of this component.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.ConnectEventSource">
            <summary>
            Control (or other component) whose Click event will initiate an FTP connection.
            </summary>
            <remarks>
            Causes the associated FTP connection to attempt to connect to an FTP server
            as defined by its properties (see <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Connect"/>).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.CloseEventSource">
            <summary>
            Control (or other component) whose Click event will close an FTP connection.
            </summary>
            <remarks>
            Causes the associated FTP connection to close (see 
            <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.Close"/>).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.RefreshEventSource">
            <summary>
            Control (or other component) whose Click event will cause a refresh.
            </summary>
            <remarks>
            Causes the associated FTP connection to get the content of the current 
            directory (see <see cref="M:EnterpriseDT.Net.Ftp.FTPConnection.GetFileInfos"/>).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.StopEventSource">
            <summary>
            Control (or other component) whose Click event will stop a file-transfer.
            </summary>
            <remarks>
            Causes the associated FTP connection to cancel the current transfer (see 
            <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.CancelTransfer"/>).
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.LoadEventSource">
            <summary>
            Control (or other component) whose Click event will open a dialog-box
            to select a file from which connection properties will be loaded.
            </summary>
            <remarks>
            Prompts the user for a file-name and tries to load the FTP connection properties
            from that file using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Load(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.SaveEventSource">
            <summary>
            Control (or other component) whose Click event will open a dialog-box
            to select a file to which connection properties will be saved.
            </summary>
            <remarks>
            Prompts the user for a file-name and tries to save the properties of
            the associated <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>
            to that file using the <see cref="M:EnterpriseDT.Net.Ftp.ExFTPConnection.Save(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.Connection">
            <summary>
            Get or set the FTP connection being controlled.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.ShowErrors">
            <summary>
            Get or set the flag that determines whether FTP errors will be shown in a message-box.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.LoadDialog">
            <summary>
            Get the dialog that is displayed when the LoadEventSource is clicked.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.SaveDialog">
            <summary>
            Get the dialog that is displayed when the SaveEventSource is clicked.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPController.MostRecentFile">
            <summary>
            Most recently loaded or save file.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPFileList">
            <summary>
            Displays a list of files and directories available for upload or download via FTP.
            </summary>
            <remarks>
            <para>
            FTPFileList is an abstract class that provides much of the functionality required 
            to display a list of files (and directories) that can be uploaded or downloaded
            via the various FTP protocols (including secure protocols such as SFTP and FTPS).
            It supports renaming of files, deleting of files, and transfer via drag and drop and
            double-click, as well as a right mouse button menu providing the same functionality.
            </para> 
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.showParentDir">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.showItemIcons">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileIconList">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.nameColumn">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.sizeColumn">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.dateColumn">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.itemMenu">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.uploadMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.downloadMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.deleteMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.renameMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.createDirMenuItem">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.dirPanel">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.allowUpload">
            <summary>INTERNAL USE ONLY.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_ColumnClick(System.Object,System.Windows.Forms.ColumnClickEventArgs)">
            <summary>
            
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_DrawColumnHeader(System.Object,System.Windows.Forms.DrawListViewColumnHeaderEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_DrawItem(System.Object,System.Windows.Forms.DrawListViewItemEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_DrawSubItem(System.Object,System.Windows.Forms.DrawListViewSubItemEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_DoubleClick(System.Object,System.EventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.fileListView_AfterLabelEdit(System.Object,System.Windows.Forms.LabelEditEventArgs)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CreateDirectory">
            <summary>
            Creates a sub-directory in the current directory.
            </summary>
            <remarks>
            <para>
            The initial name of the sub-directory is the text of 'create directory' menu-item 
            with a number appended.
            </para>
            <para>
            This method emulates a click on the 'create directory' menu-item.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.RenameSelectedItem">
            <summary>
            Allows the user to edit the name of a file.
            </summary>
            <remarks>
            <para>
            When the method is called, the first selected item is put into edit mode.  The file
            will be renamed when the item loses focus or when the Escape button is pressed, in 
            which case the rename operation is abandoned.
            </para>
            <para>
            This method emulates a click on the 'rename' menu-item.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.TransferSelectedItems">
            <summary>
            Causes the selected items to be transferred (i.e. uploaded or downloaded).
            </summary>
            <para>
            This method emulates a click on the 'download' or 'upload' menu-item.
            </para>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.DeleteSelectedItems">
            <summary>
            Deletes the selected items.
            </summary>
            <para>
            This method emulates a click on the 'delete' menu-item.
            </para>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FindFileListItem(System.String,System.Boolean)">
            <summary>
            Returns the list item with the given name (or null if one doesn't exist).
            </summary>
            <param name="fileName">Name of item to look for.</param>
            <param name="ignoreCase">Should case be ignored?</param>
            <returns>The list item with the given name (or null if one doesn't exist).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FindFileListItem(System.String)">
            <summary>
            Returns the list item with the given name (or null if one doesn't exist).
            </summary>
            <param name="fileName">Name of item to look for.</param>
            <returns>The list item with the given name (or null if one doesn't exist).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnShowMenu(System.Drawing.Point)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="point"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnSelectItem(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="selectedItem"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnNameChange(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="selectedItem"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnDeleteItem(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="item"></param>
            <param name="file"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.OnCreateDirectory(System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="item"></param>
            <param name="file"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.GetDragData(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem[])">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.RefreshFileList">
            <summary>
            Refresh the file listing currently displayed.
            </summary>
            <remarks>
            This method will typically be overridden in subclasses.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CreateListViewItem(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CreateListViewItem(System.String,System.Boolean,System.Int64,System.DateTime)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="name"></param>
            <param name="isDir"></param>
            <param name="size"></param>
            <param name="modifiedDate"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowFile(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowFile(System.String,System.Int64,System.DateTime)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="name"></param>
            <param name="size"></param>
            <param name="lastModifiedTime"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FindItem(EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileList.GetIconFromExtension(System.String)">
            <summary>
            Returns the system icon for the given file extension (or folder if null).
            </summary>
            <param name="extension">Extension or null to get folder icon.</param>
            <returns>System icon</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CheckBoxes">
            <summary>
            Gets or sets a value indicating whether a check box appears next to 
            each item in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ColumnName">
            <summary>
            Gets the name column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ColumnSize">
            <summary>
            Gets the size column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ColumnDate">
            <summary>
            Gets the date column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.DirectoryPanelVisible">
            <summary>
            Get or set the property that determines whether or not the directory panel is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FullRowSelect">
            <summary>
            Get or set the property that determines whether full rows are selectable (true) or just the file-name (false).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.GridLines">
            <summary>
            Gets or sets a value indicating whether grid lines appear between the 
            rows and columns containing the items and subitems in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ListBackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowIcons">
            <summary>
            Get or set the property that determines whether or not icons are displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.View">
            <summary>
            Gets or sets the style in which the file-list is displayed.
            </summary>
            <remarks>
            The View property allows you to specify the type of display is used to 
            display the file-list. You can set the View property to display each item 
            with large or small icons or display items in a vertical list.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Activation">
            <summary>
            Gets or sets the type of action the user must take to activate an item.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowColumnReorder">
            <summary>
            Get or set the property that determines whether or not the user is allowed to reorder columns.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowContextMenu">
            <summary>
            Get or set the property that determines whether or not to allow the context menu on right-click.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowDelete">
            <summary>
            Get or set the property that allows deletion of files via the delete key.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowDownload">
            <summary>
            Indicates whether or not downloading of files is permitted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowUpload">
            <summary>
            Indicates whether or not uploading of files is permitted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowCreateDirectory">
            <summary>
            Get or set the property that allows creation of directories.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowDrop">
            <summary>
            Indicates whether the user can transfer files using drag-and-drop operations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AllowRename">
            <summary>
            Get or set the property that allows renaming of files via label editing.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Connection">
            <summary>
            Get or set the FTP connection object to use for FTP operations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.HeaderStyle">
            <summary>
            Gets or sets the column header style.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.HideSelection">
            <summary>
            Gets or sets a value indicating whether the selected item in 
            the control remains highlighted when the control loses focus.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.HoverSelection">
            <summary>
            Gets or sets a value indicating whether an item is automatically selected when the 
            mouse pointer remains over the item for a few seconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.LabelWrap">
            <summary>
            Gets or sets a value indicating whether item 
            labels wrap when items are displayed in the control as icons.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.LargeImageList">
            <summary>
            Gets or sets the ImageList to use when displaying items as large icons in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MultiSelect">
            <summary>
            Get or set the property that determines whether or not multiple 
            files may be selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.PromptOnDelete">
            <summary>
            Get or set the property that determines whether or not the user is
            prompted before a file is deleted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Scrollable">
            <summary>
            Get or set the property that determines whether or not scroll-bars will be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SelectedIndices">
            <summary>
            Gets the indexes of the selected items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowDirectories">
            <summary>
            Get or set the property that determines whether or not directories are displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ShowParentDirEllipsis">
            <summary>
            Get or set the property that determines whether or not an entry for 
            the parent directory ('..') is displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SmallImageList">
            <summary>
            Gets or sets the ImageList to use when displaying items as small icons in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Sorting">
            <summary>
            Gets or sets the sort order for items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.UserMessages">
            <summary>
            Get the text messages displayed to user.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.WildcardFilter">
            <summary>
            Get or set the wildcard filter string for displaying files.
            </summary>
            <remarks>
            '?' matches any single character and '*' matches zero or more characters.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SortColumn">
            <summary>
            Column to use for sorting.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SortAscending">
            <summary>
            Direction in which the column will be sorted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SortDirsPrecedeFiles">
            <summary>
            Should directories be shown before files?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Menu">
            <summary>
            Get the context menu shown on right-click.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemUpload">
            <summary>
            Get the menu-item representing uploads.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemDownload">
            <summary>
            Get the menu-item representing downloads.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemRename">
            <summary>
            Get the menu-item representing renaming.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemCreateDirectory">
            <summary>
            Get the menu-item representing directory creation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.MenuItemDelete">
            <summary>
            Get the menu-item representing deleting.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CheckedIndices">
            <summary>
            Gets the indexes of the currently checked items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CheckedItems">
            <summary>
            Gets the currently checked items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Columns">
            <summary>
            Gets the collection of all column headers that appear in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.CustomFilter">
            <summary>
            Gets or sets the FileFilter used for displaying files.
            </summary>
            <remarks>
            This can be used as an alternative to the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.WildcardFilter"/>. If this 
            property is set, it overrides the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.WildcardFilter"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FileItems">
            <summary>
            Gets a collection containing all items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.FocusedFile">
            <summary>
            Gets the item in the control that currently has focus.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ListViewItemSorter">
            <summary>
            Gets or sets the sorting comparer for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SelectedFileItems">
            <summary>
            Gets the file items that are selected in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.TopItem">
            <summary>
            Gets the first visible item in the control.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.DeletingFile">
            <summary>
            Occurs before a file is deleted. 
            </summary>
            <remarks>
            Use <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SelectedFileItems"/> to see which files will be deleted.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.AfterLabelEdit">
            <summary>
            Occurs after a label has been edited but before the corresponding file is renamed.
            </summary>
            <remarks>
            The <c>Cancel</c> property of the arguments may be used to prevent the renaming of the file.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.SelectedIndexChanged">
            <summary>
            Occurs when the selected index has been changed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ItemCheck">
            <summary>
            Occurs when the when the check state of an item changes.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPFileList.ItemChecked">
            <summary>
            Occurs when the when the checked state of an item changes.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages">
            <summary>
            Defines the messages that can be presented to a user by this component.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_DELETE_TITLE">
            <summary>
            Default title of message-box displayed when a file is being deleted.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_DELETE_PROMPT">
            <summary>
            Default prompt shown to user when a file is being deleted.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_DELETE_MULTIPLE_PROMPT">
            <summary>
            Default prompt shown to user when a file is being deleted.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_NAME_EXISTS_TITLE">
            <summary>
            Default title of message-box shown when an attempt is made to rename a file or folder to a name 
            that is already used by another file or folder.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DEFAULT_NAME_EXISTS_MESSAGE">
            <summary>
            Default message shown when an attempt is made to rename a file or folder to a name already used by another file or folder.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.NameExistsTitle">
            <summary>
            Title of message-box shown when an attempt is made to rename a file or folder to a name that is already used by another file or folder.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.NameExistsMessage">
            <summary>
            Message shown when an attempt is made to rename a file or folder to a name already used by another file or folder.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DeleteTitle">
            <summary>
            Title of message-box displayed when a file is being deleted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DeletePrompt">
            <summary>
            Prompt shown to user when a file is being deleted.
            </summary>
            <remarks>
            The file-name is substituted for '{0}'.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileList.Messages.DeleteMultiplePrompt">
            <summary>
            Prompt shown to user when two or more files are being deleted.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem">
            <summary>
            Represents an item in an <c>FTPFileList</c> control.
            </summary>
            <remarks>
            The FTPFileListItem class defines the appearance, behavior, and data 
            associated with an item that is displayed in the <c>FTPFileList</c> control.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem.FileInfo">
            <summary>
            The <c>FTPFile</c> object that this instance is providing
            a visual representation of.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem.FileName">
            <summary>
            The file-name of the item.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem.Size">
            <summary>
            The size of the file in bytes.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListItem.ModifiedTime">
            <summary>
            The last modified time of file.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader">
            <summary>
            Displays a single column header in an <c>FTPFileList</c>. 
            </summary>
            <remarks>
            An FTPColumnHeader is an item in an <c>FTPFileList</c> that contains heading text.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.CompareFileItems(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.Boolean,System.Boolean)">
            <summary>
            Compares two list items.
            </summary>
            <param name="file1">first item</param>
            <param name="file2">second item</param>
            <param name="ascending">true if compared in ascending order, false otherwise</param>
            <returns>if ascending is true, returns 1 if file1 is greater than file2, 0, 
            if they are equal, and -1 if file1 is less than file2. The opposite if not ascending.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ToString">
            <summary>
            Converts the value of this instance to a string.
            </summary>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.Visible">
            <summary>
            Get or set the visibility of this column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.Type">
            <summary>
            Get or set the type of this column header.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.DisplayIndex">
            <summary>
            Get or set the display index for this column header.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ColumnType">
            <summary>
            Lists the types of FTPColumnHeaders.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ColumnType.Name">
            <summary>
            Represents a column containing a file or directory name.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ColumnType.Size">
            <summary>
            Represents a size column.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader.ColumnType.Date">
            <summary>
            Represents a date column.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPDateColumnHeader">
            <summary>
            Displays a single column header in an <c>FTPFileList</c>. 
            </summary>
            <remarks>
            An FTPDateColumnHeader is an item in an <c>FTPFileList</c> that contains heading text for a date column.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPDateColumnHeader.Format">
            <summary>
            Get or set the format specifier for formatting dates.
            </summary>
            <remarks>
            See the custom DateTime format strings for possible values of this property.
            The default is the standard general format specifier, 'g'.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter">
            <summary>
            Used as a sorting comparer for an FTPColumnHeader column.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.#ctor(EnterpriseDT.Net.Ftp.Forms.FTPColumnHeader)">
            <summary>
            Constructor. 
            </summary>
            <param name="column">Column that is to be sorted.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.Compare(System.Object,System.Object)">
            <summary>
            Compares two FTPFileListItems and returns a value indicating whether 
            one is less than, equal to or greater than the other.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.SortColumn">
            <summary>
            Gets or sets the column to be sorted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.Ascending">
            <summary>
            Gets or sets a value that determines if the sort 
            order is ascending or descending.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPFileListSorter.DirsPrecedeFiles">
            <summary>
            Gets or sets a value that determines if directories should precede
            files in the sort order.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList">
            <summary>
            Displays a list of local files and directories available for upload via FTP.
            </summary>
            <remarks>
            <para>
            <c>FTPLocalFileList</c> is analogous to a <see cref="T:System.Windows.Forms.ListView"/>, and displays 
            a list of local files and directories available for upload via FTP.
            </para>
            <para>
            When an instance of <c>FTPLocalFileList</c> is placed on a Windows form, it will 
            automatically detect an instance of <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or 
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>. 
            </para>
            <para>
            If the connection has been established to the FTP server, a listing of the 
            current local working directory will be displayed. Clicking on a filename 
            displayed in the list will cause the file to be uploaded 
            to the current remote working directory of the connection
            </para>
            <para>
            <c>FTPLocalFileList</c> also supports drag and drop in conjunction with 
            <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList"/>. If files are dragged from an instance of 
            <c>FTPLocalFileList</c> and dropped on an instance of <c>FTPRemoteFileList</c>, 
            they will be downloaded to the current local directory, and the file list refreshed.
            </para>
            <para>
            Renaming of local files is also supported by the standard single click mechanism, 
            and local files can be deleted via the delete key. A warning prompt is displayed 
            before the deletion occurs. Upload, rename and delete are also available as 
            right mouse click menu items.
            </para>
            </remarks>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.RefreshFileList">
            <summary>
            Refresh the file listing for the current local working directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.BackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.AllowDownload">
            <summary>
            Indicates whether or not downloading of files is permitted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.ReadOnly">
            <summary>
            Get or set the property that controls whether files can be renamed, 
            deleted or downloaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.LocalDirectory">
            <summary>
            This is used only when the connection is not set.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.Connection">
            <summary>
            Get or set the FTP connection object associated with this file list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.LocalWorkingDirectory">
            <summary>
            Get or set the local working directory for this file listing.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryPanel">
            <summary>
            Get the panel in which directory information is displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryLabel">
            <summary>
            Get the label of the directory panel.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryTextBox">
            <summary>
            Get the textbox showing the directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryButton">
            <summary>
            Get the directory browse button.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DirectoryChanged">
            <summary>Occurs when the directory shown in the list has been changed.</summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList.DragDrop">
            <summary>
            Occurs when a drag-and-drop operation is completed.
            </summary>
            <remarks>
            This event may be used to replace the default DragDrop behavior.
            If this event is handled then the default DragDrop behavior is not performed.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPLogView">
            <summary>
            <c>FTPLogView</c> displays logging messages in real-time.
            </summary>
            <remarks>
            <para>Logging messages provide detailed information about the internal operations of
            the FTP client components.  The level of detail can be controlled by means of
            the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPLogView.LogLevel"/> property with <see cref="!:LogLevel.Off"/> being the lowest and
            <see cref="!:LogLevel.All"/> being the highest.</para>
            <para>A context-menu is displayed if the user right-clicks on the control.  The context menu
            has options for clearing all messages; selecting all messages; clearing the current selection;
            copying messages to the clipboard; and freezing the display.  Freezing the display means
            that no new messages are displayed.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLogView.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPLogView"/> class. 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPLogView.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by the Control. 
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLogView.LogLevel">
            <summary>
            Logging level - all messages at or below this level will be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPLogView.MaxLineLength">
            <summary>
            Maximum length of lines (-1 means no maximum).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.CustomLogLevelAppender">
            <summary>
            Extends <see cref="T:EnterpriseDT.Util.Debug.Appender"/> by allowing an appender to have its own log-level.
            </summary>
            <remarks>
            Appenders implementing this interface have their own log-level, which overrides the global
            logging level, <see cref="P:EnterpriseDT.Util.Debug.Logger.CurrentLevel"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.CustomLogLevelAppender.CurrentLevel">
            <summary>
            Logging level for this appender.  This does not affect the global logging level.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList">
            <summary>
            Displays a list of remote files and directories available for download via FTP.
            </summary>
            <remarks>
            <para>
            <c>FTPRemoteFileList</c> is analogous to a <see cref="T:System.Windows.Forms.ListView"/>, and displays a list of remote 
            files and directories available on an FTP server for download.
            </para>
            <para>
            When an instance of <c>FTPRemoteFileList</c> is placed on a Windows form, it will 
            automatically detect an instance of <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> or 
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>. 
            </para>
            <para>
            If the connection has been established to the FTP server, a listing of the 
            current remote working directory will be displayed. Clicking on a filename 
            displayed in the list will cause the file to be downloaded to the current 
            local working directory of the connection.
            </para>
            <para>
            <c>FTPRemoteFileList</c> also supports drag and drop in conjunction with 
            <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPLocalFileList"/>. If files are dragged from an instance of 
            <c>FTPRemoteFileList</c> and dropped on an instance of <c>FTPLocalFileList</c>, 
            they will be downloaded to the current local directory, and the file list refreshed.
            </para>
            <para>
            Renaming of remote files is also supported by the standard single click 
            mechanism, and remote files and directories can be deleted via the delete key. 
            A warning prompt is displayed before the deletion occurs. Download, rename 
            and delete are also available as right mouse click menu items.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.#ctor">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.ChangeDirectory(System.String)">
            <summary>
            Changes the directory which the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList"/> is displaying.
            </summary>
            <param name="newDirectory">New directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnSelectItem(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="selectedItem"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnNameChange(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="selectedItem"></param>
            <param name="newName"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.GetDragData(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem[])">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="items"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnDeleteItem(EnterpriseDT.Net.Ftp.Forms.FTPFileListItem)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="item"></param>
            <param name="file"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnFileDeleted(System.IAsyncResult)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.OnDirectoryDeleted(System.IAsyncResult)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.RefreshFileList">
            <summary>
            Refresh the file listing for the current remote working directory
            from the FTP server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.AllowUpload">
            <summary>
            Indicates whether or not uploading of files is permitted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.ReadOnly">
            <summary>
            Get or set the property that controls whether files can be renamed, 
            deleted or uploaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.Connection">
            <summary>
            Get or set the FTP connection object associated with this file list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.CurrentDirectory">
            <summary>
            Returns the path of the directory currently shown in the file-list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DirectoryPanel">
            <summary>
            Get the panel in which directory information is displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DirectoryLabel">
            <summary>
            Get the label of the directory panel.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DirectoryTextBox">
            <summary>
            Get the textbox showing the directory.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DragDrop">
            <summary>
            Occurs when a drag-and-drop operation is completed.
            </summary>
            <remarks>
            This event may be used to replace the default DragDrop behavior.
            If this event is handled then the default DragDrop behavior is not performed.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPRemoteFileList.DirectoryChanged">
            <summary>
            Occurs when the current directory has been changed or when an attempt has failed.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar">
            <summary>
            FTPStatusBar is a status bar tailored for use with <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/> and 
            <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPConnection"/>, which provides realtime feedback about the 
            current file transfer.
            </summary>
            <remarks>
            <para>
            Typically, an FTPStatusBar is placed on the same Windows form as an 
            instance of ExFTPConnection. It automatically detects an instance of 
            <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>. When the application is run and a 
            transfer is initiated, the FTPStatusBar displays a number of 
            realtime visual cues about the transfer. 
            </para>
            <para>
            It shows a progress bar giving a visual representation of the percentage 
            of the file size transferred, the actual percentage, the amount of 
            data transferred, the time taken for the transfer, the current transfer 
            speed, and the name of the file. All of these properties are updated 
            dynamically as the transfer proceeds. A cancel button is also provided 
            on the status bar to cancel the transfer as it is happening. 
            </para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.components">
            <summary> 
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.#ctor">
            <summary>
            Default consructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Dispose(System.Boolean)">
            <summary> 
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.InitializeComponent">
            <summary> 
            Required method for Designer support - do not modify 
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TransferPanel">
            <summary>
            Main panel containing all components making up the status bar.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.ProgressBar">
            <summary>
            Gets the ProgressBar showing how much of the current transfer is complete.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.StopButton">
            <summary>
            Gets the button that allows the user to interrupt the current transfer.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TimeLeftLabel">
            <summary>
            Gets the label showing the estimate time left for the current transfer.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.PercentageLabel">
            <summary>
            Gets the label showing the percentage of completion of the current transfer.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.SpeedLabel">
            <summary>
            Gets the label showing the approximate current transfer speed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.StatusLabel">
            <summary>
            Gets the label showing various status messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.FileSizeLabel">
            <summary>
            Gets the label showing the size of the currently selected file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.BackgroundImage">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Dock">
            <summary>
            Gets or sets which edge of the parent container a control is docked to.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Connection">
            <summary>
            Get or set the FTP connection object for which status information is 
            being displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.VisibleWhenIdle">
            <summary>
            Gets or sets a value that controls whether or not the status-bar will be 
            shown when no transfers are taking place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TransferVisibleWhenIdle">
            <summary>
            Gets or sets a value that controls whether or not the transfer-specific section of 
            the status-bar will be shown when no transfers are taking place.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TransferVisible">
            <summary>
            Gets or sets a value that controls whether or not the transfer-specific section of 
            the status-bar will be shown.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TimeLeftVisible">
            <summary>
            Gets or sets a value that controls whether or not the time-left field is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.SpeedVisible">
            <summary>
            Gets or sets a value that controls whether or not the speed field is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.FileSizeVisible">
            <summary>
            Gets or sets a value that controls whether or not the size field is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.PercentageVisible">
            <summary>
            Gets or sets a value that controls whether or not the percentage field is visible.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.ImeMode">
            <summary>
            Gets or sets the Input Method Editor (IME) mode of the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.TabStop">
            <summary>
            Gets or sets a value indicating whether 
            the user can give the focus to this control using the TAB key.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.UserMessages">
            <summary>
            Get the status messages displayed to users.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Error">
            <summary>
            Occurs when an exception is thrown during an asynchronous operation.
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages">
            <summary>
            Defines the messages that can be presented to a user by <c>FTPStatusBar</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextConnecting">
            <summary>
            Gets the text displayed when connecting to a server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextConnected">
            <summary>
            Gets the text displayed when a connection has been established.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextConnectionFailure">
            <summary>
            Gets the text displayed when an attempt to connect has failed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextListing">
            <summary>
            Gets the text displayed when a directory listing is being fetched.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextDownload">
            <summary>
            Gets the text displayed when a file is being downloaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextDownloadComplete">
            <summary>
            Gets the text displayed when a file has been downloaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextDownloadCancelled">
            <summary>
            Gets the text displayed when a download has been cancelled.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextUpload">
            <summary>
            Gets the text displayed when a file is being uploaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextUploadComplete">
            <summary>
            Gets the text displayed when a file has been downloaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPStatusBar.Messages.TextUploadCancelled">
            <summary>
            Gets the text displayed when a download has been cancelled.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView">
            <summary>
            Helps users synchronize a directory on an FTP server with one on the local machine.
            </summary>
            <remarks>
            <para><c>FTPSynchronizeView</c> presents the user with a comparison of the files in the current
            working directory on the server (<see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory"/>) with those in
            the working directory on the local machine (<see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectory"/>).</para>
            
            <para>Files are matched by name with optional case-sensitivity (see <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreCase"/>). 
            The comparison is presented in the form a <see cref="T:System.Windows.Forms.ListView"/> with one row for each matching pair
            of files and with columns showing the names, dates, size of these files, as well as a description 
            of how their dates and sizes compare, and a what action would be required to synchronize them.</para>
            
            <para>A check-box is displayed next to each file, which allows the user to determine whether or
            not the suggested action should be performed.  A synchronize button is displayed in the top-right 
            corner (by default).  When it is pressed all of the checked actions will be performed.</para>
            
            <para><c>FTPSynchronizeView</c> is highly customizable.  The following table shows different
            ways of controlling the file comparisons:
            <list type="table">
              <listheader>
                <term>Behavior</term>
                <description>Properties</description>
              </listheader>
              <item>
                <term>Transfer direction</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Direction"/> determines whether files are to be uploaded or downloaded.</description>
              </item>
              <item>
                <term>Case sensitivity</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreCase"/></description>
              </item>
              <item>
                <term>File-name filtering</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FileNameFilter"/>, <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FilterType"/> 
                  and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ExcludeFilesInFilter"/></description>
              </item>
              <item>
                <term>Date comparison</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreDate"/></description>
              </item>
              <item>
                <term>New/existing files</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TransferNewOnly"/> and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TransferMatchingOnly"/> control
                whether only new files (i.e. ones not present on the target side) are displayed or whether
                only existing files (i.e. ones that exist on both sides) are displayed, respectively.  By
                default both of these flags are off meaning that all files displayed.</description>
              </item>
              <item>
                <term>File deletion</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DeleteIfSourceAbsent"/> controls whether or not files on the "target"
                side of the comparison will be deleted if they are not present on the "source" side.  For example,
                if the transfer direction is set to upload and a file with a particular name is present on the
                server but there is no file with a matching name on the local machine then the suggested
                action will be to delete the file on the server.</description>
              </item>
              <item>
                <term>Real-time updating</term>
                <description>If <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RealTimeUpdate"/> is <c>true</c> then <c>FTPSynchronizeView</c>
                will handle its FTP connection's directory-change events and automatically update its
                content in response.  If it is <c>false</c> then the list will not be updated until 
                <see cref="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RefreshList"/> is called.</description>
              </item>
              <item>
                <term>Hide files with no recommended action.</term>
                <description><see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HideNoAction"/></description>
              </item>
            </list>
            </para>
            
            <para>Customized file comparisons may be defined by handling the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event,
            which will allow the developer to specify the match-text and the action using their own
            comparison algorithm.</para>
            
            <para>All text that appears in <c>FTPSynchronizeView</c> may be modified through the properties
            of <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.UserMessages"/> and the sub-components exposed through <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LocalDirLabel"/>,
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LocalDirTextBox"/>, <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RemoteDirLabel"/>, <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RemoteDirTextBox"/>,
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DirectionButton"/> and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SynchronizeButton"/>.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.#ctor">
            <summary>
            Constructs an <c>FTPSynchronizeView</c>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GetItemAt(System.Int32,System.Int32)">
            <summary>
            Returns the item at the specified location.
            </summary>
            <param name="x">x-coordinate to check (in client coordinates)</param>
            <param name="y">y-coordinate to check (in client coordinates)</param>
            <returns>The <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem"/> at the given location.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GetItemRect(System.Int32)">
            <summary>
            Returns the bounding rectangle of the item with the given index.
            </summary>
            <param name="index">Index of the item.</param>
            <returns>Bounding rectangle of the item with the given index.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RefreshList">
            <summary>
            Refreshes the items in the list by querying the current directories 
            (i.e. <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.ServerDirectory"/> and <see cref="P:EnterpriseDT.Net.Ftp.FTPConnection.LocalDirectory"/>).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Synchronize">
            <summary>
            Performs actions for all checked items.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.AddItems(EnterpriseDT.Net.Ftp.FTPFileSyncPair[])">
            <summary>
            Adds the given items to the list.
            </summary>
            <param name="syncPairs">Items to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.AddItem(EnterpriseDT.Net.Ftp.FTPFileSyncPair)">
            <summary>
            Adds the given item to the list.
            </summary>
            <param name="syncPair">Item to add.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GetDefaultAction(EnterpriseDT.Net.Ftp.FTPFile,EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Returns the default action for the given pair of files.
            </summary>
            <remarks>
            Note that this action may be overridden by handlers of the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event.
            </remarks>
            <param name="localFile">Local file.</param>
            <param name="remoteFile">Remote file.</param>
            <returns>Action that should be performed to synchronize the two files.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GetDefaultMatch(EnterpriseDT.Net.Ftp.FTPFile,EnterpriseDT.Net.Ftp.FTPFile)">
            <summary>
            Returns the default match text for the given pair of files.
            </summary>
            <remarks>
            Note that this text may be overridden by handlers of the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event.
            </remarks>
            <param name="localFile">Local file.</param>
            <param name="remoteFile">Remote file.</param>
            <returns>Text describing how the two files compare.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LinkComponent(EnterpriseDT.Net.Ftp.IFTPComponent)">
            <summary>
            Called by the given FTP component when it is added to a container.
            </summary>
            <remarks>
            This method allows FTP components to interlink themselves automatically.
            </remarks>
            <param name="component">FTP component just added to the container.</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.BackgroundImage">
            <summary>
            Gets or sets the background image displayed in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CheckBoxes">
            <summary>
            Gets or sets a value indicating whether a check box appears next to 
            each item in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DateFormat">
            <summary>
            Format of all dates displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FullRowSelect">
            <summary>
            Get or set the property that determines whether full rows are selectable (true) or just the file-name (false).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.GridLines">
            <summary>
            Gets or sets a value indicating whether grid lines appear between the 
            rows and columns containing the items and subitems in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ListBackColor">
            <summary>
            Gets or sets the background color for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Text">
            <summary>
            Gets or sets the text associated with this control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Activation">
            <summary>
            Gets or sets the type of action the user must take to activate an item.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.AllowColumnReorder">
            <summary>
            Get or set the property that determines whether or not the user is allowed to reorder columns.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.AllowDrop">
            <summary>
            Indicates whether the user can transfer files using drag-and-drop operations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Connection">
            <summary>
            Get or set the FTP connection object to use for FTP operations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HeaderStyle">
            <summary>
            Gets or sets the column header style.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HideSelection">
            <summary>
            Gets or sets a value indicating whether the selected item in 
            the control remains highlighted when the control loses focus.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HoverSelection">
            <summary>
            Gets or sets a value indicating whether an item is automatically selected when the 
            mouse pointer remains over the item for a few seconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.MultiSelect">
            <summary>
            Get or set the property that determines whether or not multiple 
            files may be selected.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Scrollable">
            <summary>
            Get or set the property that determines whether or not scroll-bars will be displayed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SelectedIndices">
            <summary>
            Gets the indexes of the selected items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ShowControlPanel">
            <summary>
            Controls visibility of the panel containing the directory text-boxes, and direction 
            and synchronization buttons.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ShowDirectionButton">
            <summary>
            Controls visibility of the direction button.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ShowSynchronizeButton">
            <summary>
            Controls visibility of the synchronize button.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Sorting">
            <summary>
            Gets or sets the sort order for items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.UserMessages">
            <summary>
            Get the messages displayed to users.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Direction">
            <summary>
            Controls the direction of synchronization.
            </summary>
            <remarks>
            <c>FTPSynchronizeView</c> only works in one direction at a time, although the user can
            instantly switch directions by clicking the direction button.  The <c>Direction</c>
            property may be used to control the direction programmatically.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreCase">
            <summary>
            Determines whether or not case is ignored when matching file-names.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ExcludeFilesInFilter">
            <summary>
            Controls whether the filter is an inclusion-filter or an exclusion-filter.
            </summary>
            <remarks>If <c>ExcludeFilesInFilter</c> is false (the default) then only the files
            that match the filter (if there is one) will be displayed.  Otherwise only those
            that don't match it will be displayed.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FilterType">
            <summary>
            Controls whether the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FileNameFilter"/> should be interpreted as a wildcard string
            or a regular expression.
            </summary>
            <remarks>
            Wildcard strings use a DOS-like notation where <c>?</c> matches any single character and 
            <c>*</c> matches multiple characters.  Regular expressions are of the kind used in 
            <see cref="T:System.Text.RegularExpressions.Regex"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FileNameFilter">
            <summary>
            File-name filter that controls which files are displayed.
            </summary>
            <remarks>
            <c>FileNameFilter</c> may contain multiple strings separated by commas.  Each string
            may be a regular expression (as defined by <see cref="T:System.Text.RegularExpressions.Regex"/>)
            or a wildcard string (where <c>?</c> matches any single character and <c>*</c> matches 
            multiple characters).  The type of filter (wildcard or regular expression) may be chosen via the
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.FilterType"/> property.  The filter may be used to exclude or include files; this
            behavior is selected via the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ExcludeFilesInFilter"/> property.  By default files in
            the filter are included.  If no filter is defined then all files will be considered.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.IgnoreDate">
            <summary>
            Controls whether or not dates are taken into consideration when performing file comparisons.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TransferNewOnly">
            <summary>
            If <c>TransferNewOnly</c> is set then only files that do not exist on the target file-system 
            will be considered.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TransferMatchingOnly">
            <summary>
            If <c>TransferMatchingOnly</c> is set then only files that exist both on the source and target
            file-systems will be considered.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DeleteIfSourceAbsent">
            <summary>
            When set, this flag will advise that if a file exists on the target but not on the source then
            that file should be deleted.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RealTimeUpdate">
            <summary>
            Causes <c>FTPSynchronizeView</c> to be updated automatically when its FTP connection notified of changes.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.HideNoAction">
            <summary>
            Prevents files which are up-to-date to be excluded from the list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SyncLocalDateAfterDownload">
            <summary>
            When set, this flag will cause the control to set the date of the local file
            to be the same as the remote file after the file has been downloaded.  This
            property only has an effect when real-time mode is enabled.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnFileName">
            <summary>
            File-name column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnMatch">
            <summary>
            Match column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnAction">
            <summary>
            Action column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnLocalDate">
            <summary>
            Local date column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnRemoteDate">
            <summary>
            Remote date column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnLocalSize">
            <summary>
            Local size column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ColumnRemoteSize">
            <summary>
            Remote size column.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LocalDirLabel">
            <summary>
            Label next to the local directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.LocalDirTextBox">
            <summary>
            Text-box which displays the local directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RemoteDirLabel">
            <summary>
            Label next to the remote directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.RemoteDirTextBox">
            <summary>
            Text-box which displays the remote directory.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.DirectionButton">
            <summary>
            Button which controls the direction.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SynchronizeButton">
            <summary>
            Button which triggers synchronization.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CheckedIndices">
            <summary>
            Gets the indexes of the currently checked items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CheckedItems">
            <summary>
            Gets the currently checked items in the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Columns">
            <summary>
            Columns shown in file-list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Items">
            <summary>
            Items currently displayed in the list.  Each item is a <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ListViewItemSorter">
            <summary>
            Gets or sets the sorting comparer for the control.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.TopItem">
            <summary>
            Gets the first visible item in the control.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles" -->
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Synchronizing">
            <summary>
            Occurs immediately before synchronization is about to begin.
            </summary>
            <remarks>
            This is a "cancelable" event.  To cancel synchronization, set the <see cref="P:System.ComponentModel.CancelEventArgs.Cancel"/> property
            to <c>true</c> in the event handler.
            </remarks>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Synchronized">
            <summary>
            Occurs when synchronization is complete.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemClick">
            <summary>
            Occurs when an item in the list is clicked.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.SelectedIndexChanged">
            <summary>
            Occurs when the selected index has been changed.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemCheck">
            <summary>
            Occurs when the when the check state of an item changes.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemChecked">
            <summary>
            Occurs when the when the checked state of an item changes.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages">
            <summary>
            Defines the messages that can be presented to a user by <c>FTPSynchronizeView</c>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextLocalMissing">
            <summary>
            Text indicating that there is no local file with the same name as the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextRemoteMissing">
            <summary>
            Text indicating that there is no remote file with the same name as the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextRemoteNewer">
            <summary>
            Text indicating that the remote file with the same name is was modified more recently than the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextLocalNewer">
            <summary>
            Text indicating that the local file with the same name is was modified more recently than the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextLocalBigger">
            <summary>
            Text indicating that the local file with the same name is bigger than the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextRemoteBigger">
            <summary>
            Text indicating that the remote file with the same name is bigger than the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextSameSizeDate">
            <summary>
            Text indicating that the remote file with the same name has the same size and date as the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextActionNone">
            <summary>
            Text indicating that no action is required to synchronize a given file-pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextActionDownload">
            <summary>
            Text indicating that the remote file should be downloaded in order for a file-pair to be synchronized.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextActionUpload">
            <summary>
            Text indicating that the local file should be uploaded in order for a file-pair to be synchronized.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.Messages.TextActionDelete">
            <summary>
            Text indicating that the target file should be deleted in order for a file-pair to be synchronized.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem">
            <summary>
            Represents an item in the <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView"/> list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem.Match">
            <summary>
            Brief textual description of how the two files compare.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem.Action">
            <summary>
            Action required to synchronize the files.
            </summary>
            <remarks>
            <para>Note <c>Action</c> is set to its default values before the event is
            triggered so it is not set in the handler then the default value will be used.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeViewItem.SyncPair">
            <summary>
            Represents the pair of files (one local and one remote) to which the item relates.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction">
            <summary>
            Actions that may be taken in order to synchronize a local file with a remote file.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction.None">
            <summary>
            No action required.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction.Upload">
            <summary>
            Upload the local file to the server.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction.Download">
            <summary>
            Download the remote file from the server.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Forms.FTPSyncAction.Delete">
            <summary>
            Delete the file (either local or remote).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventHandler">
            <summary>
            Delegate for the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event.
            </summary>
            <param name="sender">Object which requested the comparison (usually <see cref="T:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView"/>).</param>
            <param name="e">Handlers should set the <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Match">Match</see> and
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Action">Action</see> properties of this argument.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs">
            <summary>
            Provides a reference to a local file (<see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.LocalFile"/>) and a remote file
            (<see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.RemoteFile"/>) and requires <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Action"/> and <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Match"/> to
            be set in order to return the result of the file comparison.
            </summary>
            <remarks>
            <para>Handlers of the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.CompareFiles"/> event should set the 
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Match">Match</see> and
            <see cref="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Action">Action</see> properties in order to indicate the
            result of the comparison.</para>
            
            <para>Note that the <c>Match</c> and <c>Action</c> properties are set to their default values before the event is
            triggered so they are not set in the handler then the default values will be used.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.LocalFile">
            <summary>
            Reference to the local file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.RemoteFile">
            <summary>
            Reference to the remote file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Action">
            <summary>
            Action required to synchronize the files.
            </summary>
            <remarks>
            <para>Note <c>Action</c> is set to its default values before the event is
            triggered so it is not set in the handler then the default value will be used.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPCompareEventArgs.Match">
            <summary>
            Brief textual description of how the two files compare.
            </summary>
            <remarks>
            <para>Note <c>Match</c> is set to its default values before the event is
            triggered so it is not set in the handler then the default value will be used.</para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventHandler">
            <summary>
            Delegate for the <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemClick"/> event.
            </summary>
            <param name="sender">Object which triggered the event.</param>
            <param name="e">Contains details regarding the click.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs">
            <summary>
            Contains information regarding an <see cref="E:EnterpriseDT.Net.Ftp.Forms.FTPSynchronizeView.ItemClick"/> event.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs.MousePosition">
            <summary>
            Position of the mouse (in client coordinates) when the item was clicked.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs.Button">
            <summary>
            Button that was pressed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs.Clicks">
            <summary>
            Number of times the button was pressed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Forms.FTPSyncItemClickEventArgs.Item">
            <summary>
            Item that was clicked.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.FileUpload">
             <summary>
             Provides functionality for programmatically uploading files 
             with the HTTP protocol.
             </summary>
             <remarks>
             Code modified from Jouni Heikniemi's file upload code, see
             http://www.heikniemi.net/hc/archives/000205.html
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.FileUpload.UploadFile(System.String,System.Uri,System.String,System.Net.CookieContainer,System.Net.ICredentials)">
            <summary>
            Uploads the given file to the given url.
            </summary>
            <param name="pathname">The pathname of the file to be uploaded.</param>
            <param name="uri">The URI to which the file shall be sent.</param>
            <param name="fieldName">The name of the form field for the upload.</param>
            <param name="cookies">Cookies to be sent with the request.</param>
            <param name="credentials">Login credentials to be passed.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.FileUpload.UploadByteArray(System.Byte[],System.String,System.Uri,System.String,System.Net.CookieContainer,System.Net.ICredentials)">
            <summary>
            Uploads the given byte array to the given url.
            </summary>
            <param name="data">The data to be uploaded.</param>
            <param name="fileName">The name to be sent as the filename.</param>
            <param name="uri">The URI to which the file shall be sent.</param>
            <param name="fieldName">The name of the form field for the upload.</param>
            <param name="cookies">Cookies to be sent with the request.</param>
            <param name="credentials">Login credentials to be passed.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.FileUpload.Upload(System.Uri,System.Net.CookieContainer,System.Net.ICredentials,EnterpriseDT.Net.Ftp.Http.UploadSpec[])">
            <summary>
            Uploads the given data.
            </summary>
            <param name="uri">The URI to which the data shall be sent.</param>
            <param name="cookies">Cookies to be sent with the request.</param>
            <param name="credentials">Login credentials to be passed.</param>
            <param name="objects">The data to be sent.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.FileUpload.Upload(System.Uri,System.Collections.Specialized.StringDictionary,System.Net.CookieContainer,System.Net.ICredentials,EnterpriseDT.Net.Ftp.Http.UploadSpec[])">
            <summary>
            Uploads the given data.
            </summary>
            <param name="uri">The URI to which the data shall be sent.</param>
            <param name="formFields">Form fields to be posted along with the file.</param>
            <param name="cookies">Cookies to be sent with the request.</param>
            <param name="credentials">Login credentials to be passed.</param>
            <param name="objects">The data to be sent.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.UploadSpec">
            <summary>
            Holds the information about the file(s) to be uploaded.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.UploadSpec.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            Creates a new upload spec based on a byte array.
            </summary>
            <param name="contents">The contents to be uploaded.</param>
            <param name="fileName">The file to be uploaded.</param>
            <param name="fieldName">The field name as which this file shall be sent to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.UploadSpec.#ctor(System.String,System.String)">
            <summary>
            Creates a new upload spec based on a file name.
            </summary>
            <param name="pathname"></param>
            <param name="fieldName"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.UploadSpec.Contents">
            <summary>
            The byte array content to be uploaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.UploadSpec.FileName">
            <summary>
            The name of the file to be uploaded.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.UploadSpec.FieldName">
            <summary>
            The HTML form field the file should be uploaded into.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.HttpMethod">
            <summary>
            The HTTP method to use. This is so POST or GET can be used to 
            send parameters when the request is created.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpMethod.GET">
            <summary>
            Use HTTP GET. Any parameters are appended to the URL
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpMethod.POST">
            <summary>
            Use HTTP POST. Parameters are posted.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkHandler">
            <summary>
            Delegate used for ParseHtmlLink event
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs">
            <summary>
            Event args for ParseHtmlLink
            </summary>    
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs.#ctor(EnterpriseDT.Net.Ftp.FTPFile,System.String,System.String)">
            <summary>
            Event args for 
            </summary>
            <param name="ftpFile"></param>
            <param name="href"></param>
            <param name="text"></param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs.FTPFile">
            <summary>
            Gets the FTPFile object which has been constructed from the HTML link, which
            can be modified using the supplied href and text.
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs.Href">
            <summary>
            Gets the href link
            </summary>   
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.ParseHtmlLinkEventArgs.Text">
            <summary>
            Gets the href text 
            </summary>   
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Http.HttpClient">
            <summary>
            Provides low-level access to HTTP file transfers. <see cref="T:EnterpriseDT.Net.Ftp.ExFTPConnection"/>
            provides a superior interface and is recommended for general use.
            </summary>
            <author>Bruce Blackshaw</author>
            <version>$Revision: 1.40 $</version>    
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_MONITOR_INTERVAL">
            <summary> Default byte interval for transfer monitor</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_BUFFER_SIZE">
            <summary> Default transfer buffer size</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_PORT">
            <summary> Default port</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_USER_AGENT">
            <summary> Default user agent</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.DEFAULT_CODE_PAGE">
            <summary>
            Default code page, also used for ISO-8859-1
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.log">
            <summary>
            Logger
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.controlPort">
            <summary>
            Port on which we connect to the FTP server and messages are passed
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.remoteHost">
            <summary>
            Remote host we are connecting to
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.userName">
            <summary>
            Optional username for HTTP authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.password">
            <summary>
            Optional password for HTTP authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.timeout">
            <summary>Timeout for requests in milliseconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.monitorInterval">
            <summary> Bytes transferred in between monitor callbacks</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.transferNotifyListings">
            <summary>  Should BytesTransferred event be triggered in directory listings?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.currentlyListing">
            <summary>  A directory listing is being performed</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.transferBufferSize">
            <summary> Size of transfer buffers</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.httpMethod">
            <summary>
            This is how external clients set POST if they want to post the params
            for a download instead of using GET. It's a way for clients to 
            communicate, and isn't used otherwise. So the HttpWebRequest.Method can
            be set to other values, e.g.DELETE without this member being involved. Pretty
            average but no simple solution so far.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.httpParams">
            <summary>
            HTTP parameters
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.hrefRegex">
            <summary>
            Regex for hrefs
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.connected">
            <summary>
            Indicates whether Connect() has been called (or Quit()).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.resume">
            <summary> If true, a file transfer is being resumed</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.deleteOnFailure">
            <summary>If a download to a file fails, delete the partial file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.resumeMarker">
            <summary> Resume byte marker point</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.cancelTransfer">
            <summary>  Can be used to cancel a transfer</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.dataEncoding">
            <summary>
            Encoding to use in ASCII mode
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.currentDirectory">
            <summary>
            Current directory
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.cookies">
            <summary>
            Cookies retrieved from the site
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.proxySettings">
            <summary>
            Proxy settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.throttler">
            <summary>
            Threshold for throttling
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.socks">
            <summary>
            SOCKS settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.transferType">
            <summary>  Record of the transfer type - make the default BINARY for now</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.closeStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>
            The default is <c>true</c>.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.lastBytesTransferred">
            <summary>
            Holds the number of bytes transferred in that most recent transfer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.lastFileTransferred">
            <summary>
            Name of the last file transferred.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.key">
            <summary>
            License key
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Http.HttpClient.owner">
            <summary>
            License owner
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetLocalCRC(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC-32 checksum for the named local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetRemoteCRC(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC-32 checksum for the named remote file. Not supported in HTTP.
            </summary>
            <param name="path"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Connect">
            <summary>Does nothing for this protocol.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.TestConnection">
            <summary>
            Does nothing for HTTP protocol
            </summary>
            <returns>true if connection ok</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Quit">
            <summary>Quit the HTTP session.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.QuitImmediately">
            <summary>
            Quit the FTP session immediately by closing the control socket
            without sending the <c>QUIT</c> command.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Get(System.IO.Stream,System.String)">
            <summary>
            Get data from the HTTP server.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Get(System.String,System.String)">
            <summary>
            Get data from the HTTP server.
            </summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CreateRequest(System.String,System.String)">
            <summary>
            Create the web request
            </summary>
            <param name="remoteFile">remote file</param>
            <returns>web request ready to fetch</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CreateRequest(System.String)">
            <summary>
            Create the web request
            </summary>
            <param name="remoteFile">remote file</param>
            <returns>web request ready to fetch</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetParamString(System.Collections.Specialized.NameValueCollection)" -->
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.DebugResponse(EnterpriseDT.Net.Ftp.Http.ITransferResponse)">
            <summary>
            Dump the response to debug
            </summary>
            <param name="response">response to log</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetASCII(System.String,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>
            Get as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetASCII(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>
            Get as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Data stream to write data to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetBinary(System.String,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>Get as binary file, i.e. straight transfer of data.</summary>
            <param name="localPath">Local file to put data in.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.GetBinary(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>Get as binary file, i.e. straight transfer of data.</summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="destStream">Stream to write to.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Get(System.String)">
            <summary>Get data from the FTP server.</summary>
            <remarks>
            Transfers in whatever mode we are in. Retrieve as a byte array. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.
            </remarks>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ReadChunk(System.IO.Stream,System.Byte[],System.Int32)">
            <summary>
            Attempts to read a specified number of bytes from the given 
            <code>BufferedStream</code> and place it in the given byte-array.
            </summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>Stream</code> to read from.</param>
            <param name="chunk">The byte-array to place read bytes in.</param>
            <param name="chunksize">Number of bytes to read.</param>
            <returns>Number of bytes actually read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ReadChar(System.IO.StreamReader)">
            <summary>Attempts to read a single character from the given <code>StreamReader</code>.</summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>StreamReader</code> to read from.</param>
            <returns>The character read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ReadLine(System.IO.StreamReader)">
            <summary>
            Attempts to read a single line from the given <code>StreamReader</code>. 
            </summary>
            <remarks>
            The purpose of this method is to permit subclasses to execute
            any additional code necessary when performing this operation. 
            </remarks>
            <param name="input">The <code>StreamReader</code> to read from.</param>
            <returns>The string read.</returns>
            <throws>SystemException Thrown if there was an error while reading. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.Byte[],System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.String,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.String,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.IO.Stream,System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.PutASCII(System.String,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>
            Put as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <param name="localPath">Local file to transfer data from.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.PutASCII(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest,System.Boolean)">
            <summary>
            Put as ASCII, i.e. read a line at a time and write
            using the correct newline separator for the OS.
            </summary>
            <param name="localPath">Local file to transfer data from.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.PutBinary(System.String,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest)">
            <summary>Put as binary file, i.e. straight transfer of data.</summary>
            <param name="localPath">Local file to read data from.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.PutBinary(System.IO.Stream,System.String,EnterpriseDT.Net.Ftp.Http.ITransferRequest,System.Boolean)">
            <summary>Put as binary file, i.e. straight transfer of data.</summary>
            <param name="localPath">Local file to read data from.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CdUp">
            <summary>Change the remote working directory to the parent directory.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ChDir(System.String)">
            <summary>Change the remote working directory to that supplied.</summary>
            <param name="dir">Name of remote directory to change to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Dir">
            <summary>
            List an HTML page's hrefs as an array of strings.
            </summary>
            <returns>An array of strings.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Dir(System.String,System.Boolean)">
            <summary>
            List an HTML page's hrefs as an array of strings.
            </summary>
            <param name="dirname">directory or HTML filename</param>
            <returns>An array of strings.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Dir(System.String)">
            <summary>
            List an HTML page's hrefs as an array of strings.
            </summary>
            <param name="dirname">directory or HTML filename</param>
            <returns>An array of strings.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.DirDetails(System.String)">
            <summary>
            List an HTML page's hrefs as an array of FTPFile objects.
            </summary>
            <remarks>
            Each href in the page is represented as an FTPFile object. hrefs that
            appear to be to other HTML pages are represented as directories (as they
            will contain their own list of hrefs). Non HTML references (e.g. links to
            files such as xyz.zip) are represented as files.
            </remarks>
            <param name="dirname">directory or HTML filename</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.IsDirectory(System.String)">
            <summary>
            Is this URL a directory of hrefs, i.e. a normal
            web page that can have its links displayed?
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.IsPage(System.String)">
            <summary>
            Is this url an HTML page?
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.DirDetails">
            <summary>
            List the current directory's hrefs as an array of FTPFile objects.
            </summary>
            <remarks>
            Each href in the page is represented as an FTPFile object. hrefs that
            appear to be to other HTML pages are represented as directories (as they
            will contain their own list of hrefs). Non HTML references (e.g. links to
            files such as xyz.zip) are represented as files.
            </remarks>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>        
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MkDir(System.String)">
            <summary>
            Not supported by HTTP 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Pwd">
            <summary>Get the current remote working directory.</summary>
            <returns>The current working directory.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.RmDir(System.String)">
            <summary>
            Not supported by HTTP 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Exists(System.String)">
            <summary/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Delete(System.String)">
            <summary>
            Not supported by all HTTP servers
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ModTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="remoteFile">Name of remote file.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.SetModTime(System.String,System.DateTime)">
            <summary>
            Not supported by HTTP 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Rename(System.String,System.String)">
            <summary>
            Not supported by HTTP 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Size(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <param name="remoteFile">Name or path of remote file in current directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Resume">
            <summary>Make the next file transfer resume.</summary>
            <remarks>
            <para>
            For downloads, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
            <throws>FTPException</throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.ResumeDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CancelResume">
            <summary> 
            Cancel the resume. Use this method if something goes wrong
            and the client is left in an inconsistent state
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are '?' and '*'</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Http.HttpClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CloseStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>The default is <c>true</c>.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.HttpParameters">
            <summary>
            Holds the HTTP parameters to be used for the
            next operation. These should be cleared if no
            parameters are to be used.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.HttpMethod">
            <summary>
            HTTP method to use - GET is the default
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.ControlPort">
            <summary>
            The port on the server to which to connect to. 
            </summary>
            <remarks>
            <para>Most HTTP servers use port 80 (the default)</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.DataEncoding">
            <summary>
            The encoding to use for data when transferring in ASCII mode.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server. Not applicable for HTTP.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.WelcomeMessage">
            <summary>
            Returns nothing since HTTP doesn't inherently support welcome messages.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.LastBytesTransferred">
            <summary>
            The number of bytes transferred in the last transfer operation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.LastFileTransferred">
            <summary>
            The remote name/path of the last file transferred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the HTTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.IsConnected">
            <summary>
            Indicates whether the client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.RemoteHost">
            <summary>
            The domain-name or IP address of the HTTP server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.UserAgent">
            <summary>
            User agent for HTTP requests
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.UserName">
            <summary>
            User name to use (if required)
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.Password">
            <summary>
            Password to user (if required)
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.Cookies">
            <summary>
            Stores any cookies returned by the server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.Timeout">
            <summary> 
            Timeout on the requests in milliseconds.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.ServerValidation">
            <summary>
            Controls the way in which server certificates are validated.
            </summary>
            <remarks>
            When an SSL/TLS connection is being negotiated, the FTP server will present an
            SSL certificate to the client.  <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType"/>s are used to
            control what the client does with this certificate.  
            The default is <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/>.
            If <c>ServerValidation</c> is <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Callback"/> then
            <see cref="!:ValidatingServer"/> must be handled.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferBufferSize">
            <summary>
            The size of the buffers (in bytes) used in writing to and reading from the data-sockets.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.Http.HttpClient.BytesTransferred"/> event.
            </summary>
            <remarks>
            Reduce this value to receive more frequent notifications of transfer progress.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferNotifyListings">
            <summary>
            By default the BytesTransferred event is not triggered during directory 
            listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>ASCII</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.IsResuming">
            <summary>
            Returns <c>true</c> if the next transfer is to be resumed (i.e. <see cref="M:EnterpriseDT.Net.Ftp.Http.HttpClient.Resume"/> has been called).
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferStartedEx">
            <summary>
            Notifies of the start of a transfer
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferCompleteEx">
            <summary>
            Notifies of the completion of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Http.HttpClient.BytesTransferred">
            <summary>
            Event triggered every time <see cref="P:EnterpriseDT.Net.Ftp.Http.HttpClient.TransferNotifyInterval"/> bytes transferred.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Http.HttpClient.ParseHtmlLink">
            <summary>
            If set this event allows customized parsing of HTML links 
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.CountBeforeSleep">
            <summary>
            Number of transfers before going to sleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.SleepEnabled">
            <summary>
            Enabling or not of sleeping after a certain number of transfers
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.SleepTime">
            <summary>
            Number of seconds spent asleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.SocksContext">
            <summary>
            Not applicable for HTTP. SOCKS proxies are not supported.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for transferring files through firewalls.  Only HTTP proxies
             are supported for HTTP transfers.
            supported.  
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Http.HttpClient.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ASCIICommand">
            <summary>  Change to ASCII
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ScriptCommand">
            <summary>  Description
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.AuthCommand">
            <summary>  
            Auth command. Can only be called for a plain FTP connection.
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.4 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.BinaryCommand">
            <summary>  Change to binary mode
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CccCommand">
            <summary>  CCC command. Can only be called for an explicit SSL connection.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.4 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CdCommand">
            <summary>  Change directory
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CdUpCommand">
            <summary>  Description
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ChmodCommand">
            <summary>  Chmod a file
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.1 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CommandCollector">
            <summary>  
            Collects list of logging commands 
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Script.CommandCollector.logs">
            <summary> Log of messages
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandCollector.LogCommand(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary> Log an FTP command being sent to the server
            
            </summary>
            <param name="cmd">  command string
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandCollector.LogReply(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary> Log an FTP reply being sent back to the client
            
            </summary>
            <param name="reply">  reply string
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandCollector.ClearLogs">
            <summary> Clear the log of all messages
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.CommandCollector.Logs">
            <summary> Get the log of messages
            
            </summary>
            <returns>  message log as a string
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CommandResult">
            <summary>  Result from a script command
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandResult.#ctor">
            <summary> Default constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandResult.#ctor(System.String,System.String)">
            <summary> Constructor 
            
            </summary>
            <param name="">debug
            </param>
            <param name="">shellOutput
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandResult.#ctor(System.Boolean,System.String,System.String)">
            <summary> Constructor 
            
            </summary>
            <param name="">debug
            </param>
            <param name="">shellOutput
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.CommandResult.#ctor(System.Boolean,System.String,System.String,System.Exception)">
            <summary> Constructor 
            
            </summary>
            <param name="">debug
            </param>
            <param name="">shellOutput
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.CommandResult.Debug">
            <summary> Get the debug string. This is debug feedback 
            from the command, which may or may not be displayed
            depending whether debug is switched on
            
            </summary>
            <returns> string
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.CommandResult.ShellOutput">
            <summary> Get the output string appropriate for a shell
            
            </summary>
            <returns> string
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.CommandResult.ForceScriptExit">
            <summary> Should force script to exit 
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.CommentCommand">
            <summary>  Writes a comment to the record file if it exists
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.DebugCommand">
            <summary>  Switch debugging on and off
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.DeleteCommand">
            <summary>  Delete a file
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.DirCommand">
            <summary>  List directory
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.EchoCommand">
            <summary>  Echo command, to display the value of a variable
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.FTPShell">
            <summary>  FTP shell implementation
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.14 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.FTPShell.Main(System.String[])">
            <summary> [user@]host[:port] -c configfile  -n noconnect -h help 
            -p password -o protocol
            
            </summary>
            <param name="">args
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.FTPShell.GetPrompt(EnterpriseDT.Net.Ftp.Script.ScriptEngine)">
            <summary> Get the current prompt
            
            </summary>
            <param name="engine">  reference to scripting engine
            </param>
            <returns> String to use as prompt
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.FTPShell.PrintHelp">
            <summary> Command line help
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.GetCommand">
            <summary>  Get a file. First arg is remote file, second optional arg
            is local file.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.HelpCommand">
            <summary>  Change to ASCII
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.HelpCommand.GetCommandList(System.Collections.Hashtable)">
            <summary> Get the summary of commands
            
            </summary>
            <param name="">commands
            </param>
            <returns> strin
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.LicenseCommand">
            <summary>  Print license details
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.6 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.LocalDeleteCommand">
            <summary>  
            Local delete command
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.LocalRenameCommand">
            <summary>  Description
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.MDeleteCommand">
            <summary>  Implements the mdelete command (mdelete [filter])
            
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.MGetCommand">
            <summary>  Implements the mput command (mput [filter]
            
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.MkDirCommand">
            <summary>  
            Make a directory
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.MPutCommand">
            <summary>  Implements the mput command (mput [filter]
            
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.OpenCommand">
            <summary>  Open the connection
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.10 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ProtectCommand">
            <summary>  Protect command. Can only be called for a plain FTP connection.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.4 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.PutCommand">
            <summary>  Put a file
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.PwdCommand">
            <summary>  Print working directory
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.QuitCommand">
            <summary>  Quit command 
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.QuoteCommand">
            <summary>  Run the supplied command on the server
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.RecordCommand">
            <summary>  Record commands to file
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.RenameCommand">
            <summary>  Description
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.3 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.RmDirCommand">
            <summary>  Remove a directory (it must be empty).
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ScriptEngine">
            <summary>  Scripting engine, used to load FTP scripts and execute them.
            Generally, the only methods used should be the constructor and
            the ExecuteScript() methods. 
            
            The setter methods should be used with caution. Typically, when
            the script is run these setter methods are called to set various
            properties. This means any properties manually set with these
            methods will be overwritten.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.19 $
            
            </version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Script.ScriptEngine.license">
            <summary> The license details
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.#ctor">
            <summary> Default constructor
            
            @throws IOException 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.#ctor(System.String,System.String)">
            <summary> Constructor. Allows user name and password to be passed in
            
            </summary>
            <param name="user">         username
            </param>
            <param name="password">     user's password
            @throws IOException 
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.RunCommand(System.String)">
            <summary> Run a command and write the output
            </summary>
            <param name="command">  command string including arguments
            </param>
            <param name="out">      output stream for feedback
            </param>
            <returns>
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Quit">
            <summary> Quit the session
            
            </summary>
            <param name="out">  output stream for feedback
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ExecuteScript(System.String)">
            <summary> Execute the script in the supplied file
            
            </summary>
            <param name="scriptPath">       full path of the script file
            </param>
            <returns>  ScriptResult
            @throws IOException
            @throws FTPException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ExecuteScript(System.String,System.Boolean)">
            <summary> Execute the script in the supplied file
            
            </summary>
            <param name="scriptPath">       full path of the script file
            </param>
            <param name="exitAtEnd">        if true, close connection at end
            </param>
            <returns>  ScriptResult
            @throws IOException
            @throws FTPException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ExecuteScript(System.IO.StreamReader)">
            <summary> Execute the script in the supplied stream
            
            </summary>
            <param name="scriptStream">  input stream containing the script file
            </param>
            <returns>  ScriptResult
            @throws IOException
            @throws FTPException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ExecuteScript(System.IO.StreamReader,System.Boolean)">
            <summary> Execute the script in the supplied stream.
            
            </summary>
            <param name="scriptStream">  input stream containing the script file
            </param>
            <param name="exitAtEnd">     if true, close connection at end
            </param>
            <returns>  ScriptResult
            @throws IOException
            @throws FTPException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.GetVariable(System.String)">
            <summary> Get a variable that has been set
            
            </summary>
            <param name="name"> name of variable
            </param>
            <returns>  ScriptVariable
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.SetVariable(System.String,System.String)">
            <summary> Set a variable 
            
            </summary>
            <param name="name">  variable name
            </param>
            <param name="value"> variable value
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.StartRecording(System.String)">
            <summary> Start recording commands to file
            
            </summary>
            <param name="recordFile">       file to write commands to
            @throws IOException
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.StopRecording">
            <summary> Stop recording commands 
            
            @throws IOException
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.WriteToRecordFile(System.String)">
            <summary> Write a line to the script record file
            
            </summary>
            <param name="msg">      script line
            @throws IOException
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.SetActivePortRange(System.Int32,System.Int32)">
            <summary> Set the active mode port range to be used
            
            </summary>
            <param name="low">      low port
            </param>
            <param name="high">     high port
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.CanConnect">
            <summary> Can we connect with the current state?
            
            </summary>
            <returns> true if can connect, false otherwise
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ReadCommands(System.IO.StreamReader)">
            <summary> Reads the script commands from a file
            
            </summary>
            <param name="scriptPath">    path of the 
            </param>
            <returns>
            @throws IOException
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ReadLicenseDetailsFromRegistry">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.CommandMap">
            <summary> Get the map of commands
            
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.VariablesMap">
            <summary> Get the map of variables
            
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.LicenseProperties">
            <summary> 
            Get and set license details
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.KnownHosts">
            <summary> Get the known hosts path
            
            </summary>
            <returns> string
            
            </returns>
            <summary> Set the known hosts path
            
            </summary>
            <param name="knownHosts"> path to known hosts file
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ServerPublicKey">
            <summary> Get the server public key path
            
            </summary>
            <returns> path
            
            </returns>
            <summary> Set the server public key path
            
            </summary>
            <param name="serverPublicKey">path to public key
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ClientPrivateKey">
            <summary> Get the client private key path
            
            </summary>
            <returns>  path
            
            </returns>
            <summary> Set the client private key path
            
            </summary>
            <param name="clientPrivateKey"> path to private key
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ClientPrivateKeyPass">
            <summary> Get the passphrase for the client private key
            
            </summary>
            <returns> passphrase
            
            </returns>
            <summary> Set the passphrase for the client private key
            
            </summary>
            <param name="clientPrivateKeyPass"> passphrase
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Recording">
            <summary> Is the engine currently recording commands?
            
            </summary>
            <returns> true if recording
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.RecordFile">
            <summary> Get path of file used to record script to
            
            </summary>
            <returns> string
            
            </returns>
            <summary> Set path of file to record script to 
            
            </summary>
            <param name="file"> file path
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ConnectMode">
            <summary> Get the connect mode. PASV by default.
            
            </summary>
            <returns> connect mode
            
            </returns>
            <summary> Set the connect mode.
            
            </summary>
            <param name="mode"> mode to set.
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.LocalDir">
            <summary> Get the local working directory
            
            </summary>
            <returns> local working directory
            
            </returns>
            <summary> Set the local working directory
            
            </summary>
            <param name="localDir"> new local working directory
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.MessageCollector">
            <summary> Get the message listener
            
            </summary>
            <returns> message listener
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Debug">
            <summary> Is debug turned on? Prints out each line before
            execution if on.
            
            </summary>
            <returns> true if debug enabled, false otherwise
            
            </returns>
            <summary> Set debug flag on or off
            
            </summary>
            <param name="debug">  enable or disable debug
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Ftp">
            <summary> Get a reference to the client being used
            
            </summary>
            <returns> client reference
            
            </returns>
            <summary> Set the client reference
            
            </summary>
            <param name="ftp"> client reference
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.LogFile">
            <summary> Get the name (or full path) of the log file
            
            </summary>
            <returns> log file name
            
            </returns>
            <summary> Set the name or path of the log file
            
            </summary>
            <param name="logfile">   logfile path or name
            @throws IOException
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.LogLevel">
            <summary> Get the log level
            
            </summary>
            <returns>  log level
            
            </returns>
            <summary> Set the log level
            
            </summary>
            <param name="logLevel">new log level
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Password">
            <summary> Get the user's password
            
            </summary>
            <returns>  password
            
            </returns>
            <summary> Set the password to use
            
            </summary>
            <param name="password"> user's password
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ClientCertificate">
            <summary> Get the path of the client certificate for FTPS
            
            </summary>
            <returns> file path
            
            </returns>
            <summary> Set the path of the client certificate for FTPS
            
            </summary>
            <param name="clientCertificate"> file path
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.MaxSSLVersion">
            <summary>
            Set or get the maximum version of SSL/TLS to be used
            </summary>
            <returns> 
            Maximum SSL/TLS version
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ClientPassphrase">
            <summary> Get the passphrase used for the client certificate
            
            </summary>
            <returns> string
            
            </returns>
            <summary> Set the passphrase used for the client certificate
            
            </summary>
            <param name="">clientPassphrase
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ServerValidation">
            <summary> 
            If true, the server certificate must be validated against the
            root certificate in the Windows store
            </summary>
            <returns> 
            true if checking server certificate against store
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.CommonName">
            <summary> Get the set common name for the server. This is what is
            used to match against the server certificate if the hostname
            is not to be used.
            
            </summary>
            <returns> common name
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.IgnoreCommonName">
            <summary> Get the setting for ignoring the common name in server certificate
            validation. This is only used if a server certificate is set. If set
            to true, the common name in the server certificate is not matched with
            the hostname of the server (or any set common names). The default is false.
            
            </summary>
            <returns> true to skip common name matching in server validation
            
            </returns>
            <summary> Set whether the common name should be ignored in server certificate
            validation. This is only used if a server certificate is set. If set
            to true, the common name in the server certificate is not matched with
            the hostname of the server (or any set common names). The default is false.
            
            </summary>
            <param name="">ignoreCommonName
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Port">
            <summary> Get the port number being used. The default is
            0, which means the port will be set internally
            depending on the protocol used.
            
            </summary>
            <returns> port number
            
            </returns>
            <summary> Set the port to connect to
            
            </summary>
            <param name="port"> port used
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ActiveLowPort">
            <summary> Get the low port for active mode
            
            </summary>
            <returns> low port
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.ActiveHighPort">
            <summary> Get the high port for active mode
            
            </summary>
            <returns> high port
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Protocol">
            <summary> Get the protocol to be used
            
            </summary>
            <returns>  protocol
            
            </returns>
            <summary> Set the protocol to be used
            
            </summary>
            <param name="protocol"> protocol to use
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.RemoteHost">
            <summary> Get the remote host name
            
            </summary>
            <returns> hostname
            
            </returns>
            <summary> Set the remote host to connect to
            
            </summary>
            <param name="remoteHost">   remote host name
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.Timeout">
            <summary> Get the timeout value in seconds. The default is 0, 
            which is an infinite timeout.
            
            </summary>
            <returns> timeout
            
            </returns>
            <summary> Set the timeout (in seconds).
            
            </summary>
            <param name="timeout">  timeout value in seconds
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptEngine.User">
            <summary> Get the user
            
            </summary>
            <returns> username
            
            </returns>
            <summary> Set the user
            
            </summary>
            <param name="user"> user name
            
            </param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ScriptResult">
            <summary>  Holds the result of a script which has been run. Various statistics
            are supplied.
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptResult.AddServerMessageLog(System.String)">
            <summary> Add a message to the log. Internal use only.
            
            </summary>
            <param name="log"> log message
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptResult.LastFTPReply">
            <summary> Get the last reply sent back by the FTP server. Not
            applicable for SFTP.
            
            </summary>
            <returns>  last FTP reply
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptResult.ServerMessageLog">
            <summary> Get the server message log for this script
            
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptResult.LastException">
            <summary> What was the last exception?
            
            </summary>
            <returns>
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Script.ScriptResult.ForceScriptExit">
            <summary> Was the script forced to exit by an error?
            
            </summary>
            <returns> true if forced to exit, false otherwise
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ScriptException">
            <summary>
            Script exception.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.ScriptVariable">
            <summary>  String variable for scripting/shell
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.1 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.ScriptVariable.#ctor(System.String,System.String)">
            <summary> Constructor
            
            </summary>
            <param name="name">    name of variable 
            </param>
            <param name="value">   value of variable
            
            </param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.SetCommand">
            <summary>  
            Set various variables in the script engine
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.11 $
            
            </version>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Script.SetCommand.CreateVariable(EnterpriseDT.Net.Ftp.Script.ScriptEngine,System.String,System.String)">
            <summary> Create a new variable (or overwrite an existing one)
            
            </summary>
            <param name="engine">   reference to script engine
            </param>
            <param name="param">    new variable name
            </param>
            <param name="value">    new variable's value
            </param>
            <returns> ScriptResult
            @throws IOException
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.SiteCommand">
            <summary>  Site command
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.5 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Script.VersionCommand">
            <summary>  Print out version details
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.2 $
            
            </version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt">
            <summary>
            Represents an SSH keyboard-interactive prompt. 
            </summary>
            <remarks>
            The SSH server sends a prompt string which the client must respond to. 
            Instances of this class are supplied to the server so that the prompt is
            automatically answered with the required response
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.prompt">
            <summary>
            Prompt string
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.response">
            <summary>
            Client response
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.#ctor">
            <summary>
            Default constructor.  Sets prompt and response to empty strings.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.#ctor(System.String,System.String)">
            <summary>
            Creates a new SSHPrompt object.
            </summary>
            <param name="prompt">prompt string from server, e.g. 'Password:'</param>
            <param name="response">response to this prompt</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.ToString">
            <summary>
            Returns a string representation of the prompt.
            </summary>
            <returns>a string representation of the prompt</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.Prompt">
            <summary>
            Get the prompt string
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt.Response">
            <summary>
            Get the response to the prompt
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt">
            <summary>
            Utility class that makes it easy to create a prompt that is
            a response to a password prompt.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt.PASSWORD_PROMPT">
            <summary>
            Typical password prompt
            </summary>                       
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt.#ctor(System.String)">
            <summary>
            Construct a prompt that provides the user's password
            </summary>
            <param name="password">user's password</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient">
             <summary>
             Provides low-level access to SFTP functionality.
             </summary>
             <remarks>
             <para>
             <c>SSHFTPClient</c> supports SOCKS (4, 4A, and 5) and SFTP.
             </para>
             <para>
             SSHFTPClient supports SFTP, which stands for SSH File Transfer Protocol. 
             Essentially, it is file transfer over an SSH connection, hence it has the
             security of SSH. SFTP is only superficially related to FTP and FTPS. It 
             achieves the same goals of file transfer and related operations, but the
             underlying protocol is entirely different.
             </para>
             <para>
             <example>This example shows a simple SFTP session.
             <code>
               // create an SFTP client
               SSHFTPClient ftp = new SSHFTPClient();
               ftp.RemoteHost = "192.168.10.123";
               
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               
               // set up the credentials for password authentication (the default)
               ftp.UserName = "myuser";
               ftp.Password = "mypassword";
             
               // connect to the server
               ftp.Connect();                        
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </para>
             <para>
             This example uses password authentication and does not attempt to verify
             the server (which should always be done in production systems).
             </para>
             <para>  
             <b>Server Validation:</b>
             The examples above used no server validation.  This is only normally 
             acceptable only when testing.  To be secure applications should always 
             validate the server that they're communicating with.  If the 
             <see cref="!:ServerValidation"/> property is set to <c>SecureFTPServerValidationType.Automatic</c>
             or <c>SecureFTPServerValidationType.AutomaticIgnoreHostName</c> then 
             <c>SSHFTPClient</c> will attempt to validate the server's public key upon connection.  
             </para>
             <para>
             Public keys are managed by the <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/>, available in the 
             <see cref="!:KnownHosts"/> property. There are two ways that the client can load 
             server public keys - via the known_hosts file or by explicitly loading a public 
             key from a file.
             <list type="number">
             <item>
             <term>Known_hosts</term>
             <description>Many SSH implementations use a file called known_hosts which is 
             loaded by clients to validate servers. Typically, this file is generated when the 
             client first connects to a server - a prompt asks if the server should be added to 
             the list of known hosts. The known_hosts file contains a list of approved servers and 
             their public keys. The <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/> has a property called 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile"/>. 
             The path of the known_hosts file should be assigned to this property to load the known 
             hosts in that file.
             </description>
             </item>
             <item>
             <term>Public key files</term>
             <description>Server public keys can also be maintained in their own key file and be 
             used for server validation without adding them to the known_hosts file. The 
             <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/> supports explicitly adding server public keys via
             the <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)"/> method. This requires the hostname and the public key file.
             SSH public key files have two standard formats - OpenSSH and SECSH.  Both these public key 
             formats are supported. 
             </description>
             </item>
             </list>
             </para>
             <para>  
             <b>Client Validation:</b>
             Client authentication can be either by password, by public/private keys, or by 
             keyboard- interactive authentication. The default is password authentication.
             The current authentication method can be found (and set) from the 
             <see cref="!:AuthenticationMethod"/> property. 
             <list type="number">
             <item>
             <term>Password authentication</term>
             <description>
             In password authentication, the <see cref="!:UserName"/> and <see cref="!:Password"/> 
             properties must be set, along with the ServerAddress. The user name and password should be that of the SSH 
             user that the client is logging in as. Note that some SFTP servers are set up to 
             disallow password authentication, in which case the connection attempt will fail 
             unless password authentication is enabled in the server configuration file.
             </description>
             </item>
             <item>
             <term>Public key authentication</term>
             <description>In public key authentication, SSH clients and servers authenticate 
             each other via public/private key pairs. Each must have access to their own private 
             key, and they must have access to each other's public key. The client's public key 
             must be registered with the SSH server, typically by copying it into the server's 
             <i>authorized_keys</i> file. The client's private key is loaded via the 
             <see cref="!:ClientPrivateKeyFile"/> property. Both DSA and RSA keypairs can be used. 
             The <see cref="!:UserName"/> and <see cref="!:Password"/> properties must be set, along 
             with the <see cref="!:RemoteHost"/>. Here the password is the passphrase of the private 
             key file. The <see cref="!:AuthenticationMethod"/> property must also be set to 
             <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/>. There are no formal standards for SSH 
             private key files, however two main formats are in common use - ssh.com and OpenSSH. 
             Both are supported.
             </description>
             </item>
             <item>
             <term>Keyboard-interactive authentication</term>
             <description>Keyboard-interactive (KBI) authentication is the most recently introduced 
             form of authentication for SSH. It involves the server sending prompts to the client, 
             which the client must respond to correctly to be authenticated. Its purpose is permit 
             the client to support a variety of authentication mechanisms without knowing anything 
             about them. This implementation of KBI authentication relies on the programmer knowing 
             the prompts in advance. The prompts are easily determined by connecting to the server
             via a command-line ssh client, using KBI. when the server sends its list of prompts that 
             require responses, the client searches the list of loaded <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/>s for each prompt. 
             It then sends the set responses back to the server. If the expected responses are supplied, 
             the authentication succeeds. If the prompt is for a user's password, it will typically 
             be something like "Password:". The <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> class is supplied to make 
             it easier to set up a password prompt. To set up the prompts, an array of SSHAuthPrompts
             is assigned to the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.KBIPrompts"/> property. Note that to use KBI, the 
             <see cref="!:AuthenticationMethod"/> property must also be set to 
             <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>. 
             </description>
             </item>
             </list>    
             </para>
             <para><b>Server Compatibility:</b>
             Generally, this class should work with most SFTP servers. Some servers return 
             an error saying the file does not exist after creating it. By
             default, the client does a permission change after creating the file, which 
             is done to ensure the file permissions are correct. If this error is encountered, try setting
             the <see cref="!:ServerCompatibility"/> property to <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut"/> 
             to try to eliminate the problem.
             </para>
             <para>
             <b>Public key algorithms:</b> 
             Either DSA or RSA or both can be set for the preferred public key algorithms for 
             server authentication. If, for example, RSA is set, the server will present 
             an RSA public key to the client (if the server supports RSA keys of 
             course - some servers do not). The <see cref="!:PreferredHostKeyAlgorithms"/> property is a 
             bitwise flag and can be set to combinations of the <see cref="T:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm"/> 
             enum values by OR'ing them together. The default is all algorithms enabled.
             </para>
             <para>
             <b>Cipher algorithms:</b> 
             The cipher algorithms are the symmetric algorithms used to perform the encryption 
             of the SFTP data and commands. The <see cref="!:PreferredCipherAlgorithms"/> property is a 
             bitwise flag and can be set to combinations of the <see cref="T:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm"/> enum 
             values by OR'ing them together. The default is all algorithms enabled.
             </para>
             <para>
             <b>SOCKS:</b> SOCKS may be used for FTPing through firewalls.  For this to be possible
             a SOCKS proxy must be available, and a user account must be set up on that proxy.
             <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
             </para>
             <para>
             The SOCKS features are controlled entirely through the <see cref="T:EnterpriseDT.Util.Socks.SocksContext"/>
             property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
             the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
             For example, for SOCKS4:
             </para>
             <code>
            		myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
             </code>
             and for SOCKS5:
             <code>
            		Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            		socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            		socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            		myFTPClient.SocksContext = socksContext;
             </code>
             </remarks>
             <author>Bruce Blackshaw</author>
             <version>$Revision$</version>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient">
             <summary>
             Provides low-level access to SCP functionality.
             </summary>
             <remarks>
             <para>
             <c>SSHSCPClient</c> supports SOCKS (4, 4A, and 5) and SFTP.
             </para>
             <para>
             SSHSCPClient supports SFTP, which stands for SSH File Transfer Protocol. 
             Essentially, it is file transfer over an SSH connection, hence it has the
             security of SSH. SFTP is only superficially related to FTP and FTPS. It 
             achieves the same goals of file transfer and related operations, but the
             underlying protocol is entirely different.
             </para>
             <para>
             <example>This example shows a simple SFTP session.
             <code>
               // create an SCP client
               SSHSCPClient ftp = new SSHSCPClient();
               ftp.RemoteHost = "192.168.10.123";
               
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               
               // set up the credentials for password authentication (the default)
               ftp.UserName = "myuser";
               ftp.Password = "mypassword";
             
               // connect to the server
               ftp.Connect();                        
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </para>
             <para>
             This example uses password authentication and does not attempt to verify
             the server (which should always be done in production systems).
             </para>
             <para>  
             <b>Server Validation:</b>
             The examples above used no server validation.  This is only normally 
             acceptable only when testing.  To be secure applications should always 
             validate the server that they're communicating with.  If the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerValidation"/> property is set to <c>SecureFTPServerValidationType.Automatic</c>
             or <c>SecureFTPServerValidationType.AutomaticIgnoreHostName</c> then 
             <c>SSHSCPClient</c> will attempt to validate the server's public key upon connection.  
             </para>
             <para>
             Public keys are managed by the <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/>, available in the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KnownHosts"/> property. There are two ways that the client can load 
             server public keys - via the known_hosts file or by explicitly loading a public 
             key from a file.
             <list type="number">
             <item>
             <term>Known_hosts</term>
             <description>Many SSH implementations use a file called known_hosts which is 
             loaded by clients to validate servers. Typically, this file is generated when the 
             client first connects to a server - a prompt asks if the server should be added to 
             the list of known hosts. The known_hosts file contains a list of approved servers and 
             their public keys. The <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/> has a property called 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile"/>. 
             The path of the known_hosts file should be assigned to this property to load the known 
             hosts in that file.
             </description>
             </item>
             <item>
             <term>Public key files</term>
             <description>Server public keys can also be maintained in their own key file and be 
             used for server validation without adding them to the known_hosts file. The 
             <see cref="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager"/> supports explicitly adding server public keys via
             the <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)"/> method. This requires the hostname and the public key file.
             SSH public key files have two standard formats - OpenSSH and SECSH.  Both these public key 
             formats are supported. 
             </description>
             </item>
             </list>
             </para>
             <para>  
             <b>Client Validation:</b>
             Client authentication can be either by password, by public/private keys, or by 
             keyboard- interactive authentication. The default is password authentication.
             The current authentication method can be found (and set) from the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> property. 
             <list type="number">
             <item>
             <term>Password authentication</term>
             <description>
             In password authentication, the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Password"/> 
             properties must be set, along with the ServerAddress. The user name and password should be that of the SSH 
             user that the client is logging in as. Note that some SFTP servers are set up to 
             disallow password authentication, in which case the connection attempt will fail 
             unless password authentication is enabled in the server configuration file.
             </description>
             </item>
             <item>
             <term>Public key authentication</term>
             <description>In public key authentication, SSH clients and servers authenticate 
             each other via public/private key pairs. Each must have access to their own private 
             key, and they must have access to each other's public key. The client's public key 
             must be registered with the SSH server, typically by copying it into the server's 
             <i>authorized_keys</i> file. The client's private key is loaded via the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyFile"/> property. Both DSA and RSA keypairs can be used. 
             The <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.UserName"/> and <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Password"/> properties must be set, along 
             with the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.RemoteHost"/>. Here the password is the passphrase of the private 
             key file. The <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> property must also be set to 
             <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey"/>. There are no formal standards for SSH 
             private key files, however two main formats are in common use - ssh.com and OpenSSH. 
             Both are supported.
             </description>
             </item>
             <item>
             <term>Keyboard-interactive authentication</term>
             <description>Keyboard-interactive (KBI) authentication is the most recently introduced 
             form of authentication for SSH. It involves the server sending prompts to the client, 
             which the client must respond to correctly to be authenticated. Its purpose is permit 
             the client to support a variety of authentication mechanisms without knowing anything 
             about them. This implementation of KBI authentication relies on the programmer knowing 
             the prompts in advance. The prompts are easily determined by connecting to the server
             via a command-line ssh client, using KBI. when the server sends its list of prompts that 
             require responses, the client searches the list of loaded <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/>s for each prompt. 
             It then sends the set responses back to the server. If the expected responses are supplied, 
             the authentication succeeds. If the prompt is for a user's password, it will typically 
             be something like "Password:". The <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> class is supplied to make 
             it easier to set up a password prompt. To set up the prompts, an array of SSHAuthPrompts
             is assigned to the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KBIPrompts"/> property. Note that to use KBI, the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> property must also be set to 
             <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>. 
             </description>
             </item>
             </list>    
             </para>
             <para><b>Server Compatibility:</b>
             Generally, this class should work with most SCP servers. Some servers return 
             an error saying the file does not exist after creating it. By
             default, the client does a permission change after creating the file, which 
             is done to ensure the file permissions are correct. If this error is encountered, try setting
             the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerCompatibility"/> property to <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPCompatibilityFlags.SSHDisableChmodAfterPut"/> 
             to try to eliminate the problem.
             </para>
             <para>
             <b>Public key algorithms:</b> 
             Either DSA or RSA or both can be set for the preferred public key algorithms for 
             server authentication. If, for example, RSA is set, the server will present 
             an RSA public key to the client (if the server supports RSA keys of 
             course - some servers do not). The <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredHostKeyAlgorithms"/> property is a 
             bitwise flag and can be set to combinations of the <see cref="T:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm"/> 
             enum values by OR'ing them together. The default is all algorithms enabled.
             </para>
             <para>
             <b>Cipher algorithms:</b> 
             The cipher algorithms are the symmetric algorithms used to perform the encryption 
             of the SFTP data and commands. The <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredCipherAlgorithms"/> property is a 
             bitwise flag and can be set to combinations of the <see cref="T:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm"/> enum 
             values by OR'ing them together. The default is all algorithms enabled.
             </para>
             <para>
             <b>SOCKS:</b> SOCKS may be used for FTPing through firewalls.  For this to be possible
             a SOCKS proxy must be available, and a user account must be set up on that proxy.
             <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
             </para>
             <para>
             The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SocksContext"/>
             property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
             the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
             For example, for SOCKS4:
             </para>
             <code>
            		mySCPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
             </code>
             and for SOCKS5:
             <code>
            		Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            		socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            		socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            		mySCPClient.SocksContext = socksContext;
             </code>
             </remarks>
             <author>Bruce Blackshaw</author>
             <version>$Revision: 1.22 $</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DEFAULT_MONITOR_INTERVAL">
            <summary> Default byte interval for transfer monitor</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DEFAULT_TIMEOUT">
            <summary>
            Default timeout for waiting for a server reply
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DEFAULT_BUFFER_SIZE">
            <summary>
            Transfer buffer size
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.logTag">
            <summary> Logging tag</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.compatFlags">
            <summary>
            Configuration flags for non-compliant servers
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.conn">
            <summary>
            The SSH connection
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.conParams">
            <summary>
            The connection parameters
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.receiver">
            <summary>
            Event receiver
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.prompts">
            <summary>
            List of authorization prompts
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.timeout">
            <summary>Timeout in milliseconds
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.tcpBufferSize">
            <summary>
            The TCP read and write buffer sizes
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DEFAULT_PORT">
            <summary>
            Default SSH port
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.controlPort" -->
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.remoteHost">
            <summary>
            Remote host we are connecting to
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.remoteIPAddress">
            <summary>
            IP address of remote host in string form
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.cwd">
            <summary>
            Current remote working directory
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.cancelTransfer">
            <summary>  Can be used to cancel a transfer</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.resume">
            <summary> If true, a file transfer is being resumed</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.deleteOnFailure">
            <summary>If a download to a file fails, delete the partial file</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.monitorInterval">
            <summary> Bytes transferred in between monitor callbacks</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.transferNotifyListings">
            <summary>  Should BytesTransferred event be triggered in directory listings?</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.transferType">
            <summary>  Record of the transfer type - make the default BINARY</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.compressionAlg">
            <summary>
            Compression algorithms
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.transferBufferSize">
            <summary> Size of transfer buffers</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.serverValidation">
            <summary>Determines how the remote host is validated</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.knownHostsManager">
            <summary>Manages the list of known hosts</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.closeStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>
            The default is <c>true</c>.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.socks">
            <summary>
            SOCKS settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient._proxySettings">
            <summary>
            Proxy settings
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.detectTransferMode">
            <summary>  
            Do we detect transfer mode when transferring files?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.throttler">
            <summary>
            Threshold for throttling
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.lastBytesTransferred">
            <summary>
            Holds the number of bytes transferred in that most recent transfer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.lastFileTransferred">
            <summary>
            Name of the last file transferred.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.licenseProps">
            <summary>
            License module
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.key">
            <summary>
            License key
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.owner">
            <summary>
            License owner
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TestConnection">
            <summary>
            Tests the connection
            </summary>
            <returns>true if connection ok</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Init">
            <summary>
            Initialise client
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Connect">
            <summary>
            Establish a connection to the SFTP server
            </summary>
            <remarks>
            At a minimum, the RemoteHost, User and Password properties must be set
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerError(System.Object,EnterpriseDT.Net.Ftp.FTPMessageEventArgs)">
            <summary>
            Send server errors on as replies received
            </summary>
            <param name="client"></param>
            <param name="message"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CheckParams(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnectionParameter)">
            <summary>
            Check the supplied params for any missing fields
            </summary>
            <param name="sshParams">params reference</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ConnectSocket(EnterpriseDT.Net.StandardSocket,System.String,System.Int32,EnterpriseDT.Net.Proxy.ProxyConnector)">
            <summary>   
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Quit">
            <summary>
            Quit the session
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.QuitImmediately">
            <summary>
            Quit the session immediately. Just close the socket. Don't send
            any messages to the server.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Get(System.String,System.String)">
            <summary>
            Get data from the SFTP server using the currently
            set transfer mode.
            </summary>
            <param name="local">Local file to put data in.</param>
            <param name="remote">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Get(System.IO.Stream,System.String)">
            <summary>
            Get data from the server
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="local">Data stream to write data to.</param>
            <param name="remote">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Get(System.String)">
            <summary>Get data from the SFTP server.</summary>
            <remarks>
            Transfers in whatever mode we are in. Retrieve as a byte array. Note
            that we may experience memory limitations as the
            entire file must be held in memory at one time.
            </remarks>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Get(System.IO.Stream,System.String,System.String)">
            <summary>
            The master Get() method that all other Gets() delegate to
            </summary>
            <param name="local"></param>
            <param name="localFile"></param>
            <param name="remote"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.String,System.String)">
            <summary>
            Put a local file onto the SFTP server in the current directory.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.String,System.String,System.Boolean)">
            <summary>
            Upload a local file to the server
            </summary>
            <param name="local">name or path of local file</param>
            <param name="remote">name of remote file</param>
            <param name="append">true if appending to existing remote file</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.IO.Stream,System.String)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="input">Input stream of data to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.  Allows appending
            if current file exists
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="input">Input stream of data to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.Byte[],System.String)">
            <summary>
            Put data onto the server
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remote">Name of remote file or path.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary>
            Put data onto the SFTP server in the current directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Put(System.IO.Stream,System.String,System.Int64,System.String)">
            <summary>
            The master Put() method that all other Puts() delegate to
            </summary>
            <param name="input"></param>
            <param name="local"></param>
            <param name="remote"></param>
            <param name="append"></param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CdUp">
            <summary>
            Change the remote working directory to parent
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ChDir(System.String)">
            <summary>
            Change the remote working directory
            </summary>
            <param name="dir">directory to change to</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Dir">
            <summary>
            List current directory's contents as an array of strings of
            filenames.
            </summary>
            <returns>An array of current directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Dir(System.String,System.Boolean)">
            <summary>
            List a directory's contents as an array of strings.
            </summary>
            <remarks>
            If <c>full</c> is <c>true</c> then a detailed
            listing if returned (if available), otherwise just filenames are provided.
            The detailed listing varies in details depending on OS and
            SFTP server. Note that a full listing can be used on a file
            name to obtain information about a file
            </remarks> 
            <param name="dirname">Name of directory</param>
            <param name="full"><c>true</c> if detailed listing required, <c>false</c> otherwise.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Dir(System.String)">
            <summary>
            List a directory's contents as an array of strings of filenames.
            </summary>
            <param name="dirname">Name of directory OR filemask.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DirDetails(System.String)">
            <summary>
            List a directory's contents as an array of FTPFile objects.
            </summary>
            <param name="dirname">Name of directory </param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DirDetails">
            <summary>
            List the current directory's contents as an array of FTPFile objects.
            </summary>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MkDir(System.String)">
            <summary>Create the specified remote working directory.</summary>
            <param name="dir">Name or path of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Pwd">
            <summary>
            Get the current remote working directory
            </summary>
            <returns>current remote working directory</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.RmDir(System.String)">
            <summary>
            Remove a directory
            </summary>
            <param name="path">directory to remove</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.GetLocalCRC(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC-32 checksum for the named local file
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.GetRemoteCRC(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC-32 checksum for the named remote file. Not supported in SFTP.
            </summary>
            <param name="path"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Delete(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="path">Name or path of remote file to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ModTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="path">Name or path of remote file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SetModTime(System.String,System.DateTime)">
            <summary>Set modification time for a remote file.</summary>
            <param name="path">Name or path of remote file.</param>
            <param name="modTime">Modification-time to set in local time.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Rename(System.String,System.String)">
            <summary>
            Rename a remote file
            </summary>
            <param name="from">old name</param>
            <param name="to">new name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <param name="remoteFile"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Size(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <param name="path">Name or path of remote file in current directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CancelResume">
            <summary> 
            Cancel the resume. Use this method if something goes wrong
            and the server is left in an inconsistent state. Not used in
            SCP as resume is not supported
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CancelTransfer">
            <summary>Cancels the current transfer.</summary>
            <remarks>This method is generally called from a separate
            thread. Note that this may leave partially written files on the
            server or on local disk, and should not be used unless absolutely
            necessary. The server is not notified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Resume">
            <summary>Make the next file transfer (put or get) resume.</summary>
            <remarks>
            <para>
            For puts, the
            bytes already transferred are skipped over, while for gets, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ResumeDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are '?' and '*'</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CheckConnection(System.Boolean)">
            <summary> 
            Checks if the client has connected to the server and throws an exception if it hasn't.
            This is only intended to be used by subclasses
            </summary>
            <throws>SFTPException Thrown if the client has not connected to the server. </throws>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CheckTimeout(System.DateTime,System.String)">
            <summary>
            Check to see if the timeout has expired
            </summary>
            <param name="start">start time</param>
            <param name="msg">error message if expired</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.HostKeyChecker(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnectionInfo)">
            <summary>
            Callback that is called to validate the remote host's public key
            against our known hosts
            </summary>
            <param name="connectionInfo">holds details about the connection including the hostkey</param>
            <returns>true if check is ok, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Unlock(System.String,System.String)">
            <summary>
            Unlock the software for use. This method should be used when
            a configuration file isn't available
            </summary>
            <param name="owner">owner string</param>
            <param name="key">license key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ValidatingServer">
            <summary>
            Notifies that the server must be validated
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferStartedEx">
            <summary>
            Notifies of the start of a transfer
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferCompleteEx">
            <summary>
            Notifies of the completion of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferCancelled">
            <summary>
            Notifies of the cancellation of a transfer
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.BytesTransferred">
            <summary>
            Event triggered every time <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferNotifyInterval"/> bytes transferred.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CommandSent">
            <summary>
            Triggered every time a command is sent to the server.
            </summary> 
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ReplyReceived">
            <summary>
            Triggered every time a logical reply is received from the server. In SFTP this will NOT
            be triggered for every packet that arrives.
            </summary> 
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DeleteOnFailure">
            <summary>
            Controls whether or not a file is deleted when a failure occurs.
            </summary>
            <remarks>
            <para>
            If <c>true</c>, a partially downloaded file is deleted if there
            is a failure during the download.  For example, the connection
            to the SFTP server might have failed. If <c>false</c>, the partially
            downloaded file remains on the SFTP client machine - and the download
            may be resumed, if it is a binary transfer.
            </para>
            <para>
            By default this flag is set to <c>true</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.CloseStreamsAfterTransfer">
            <summary>
            If <c>true</c> then streams are closed after a transfer has completed.
            </summary>
            <remarks>This only applies to streams passed in to Get or Put methods - local files
            are always closed</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Timeout">
            <summary> 
            Overall timeout in milliseconds for waiting for messages and underlying
            timeouts on sockets.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TCPBufferSize">
            <summary> 
            The size of the TCP read and write buffers. The default value means
            the Microsoft defaults are used.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.RetryAuth">
            <summary> 
            By default, authentication is retried automatically using a different method if it fails.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ShowHiddenFiles">
            <summary>
            Include hidden files in operations that involve listing of directories,
            and if supported by the server. Not supported in SFTP.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.WelcomeMessage">
            <summary>
            Server's banner.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LastBytesTransferred">
            <summary>
            The number of bytes transferred in the last transfer operation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LastFileTransferred">
            <summary>
            The remote name/path of the last file transferred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.IsConnected">
            <summary>
            Indicates whether the client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <value>Transfer-type to be used for uploads and downloads.</value>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>ASCII</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferBufferSize">
            <summary>
            The size of the buffers (in bytes) used in writing to and reading from the data-sockets.
            </summary>
            <remarks>Think very carefully before changing this property - it is unlikely you will ever need to</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferNotifyInterval">
            <summary>
            The number of bytes transferred between each notification of the
            <see cref="E:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.BytesTransferred"/> event.
            </summary>
            <remarks>
            Reduce this value to receive more frequent notifications of transfer progress.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.TransferNotifyListings">
            <summary>
            By default the BytesTransferred event is not triggered during directory 
            listings - this property can be used to enable this behaviour.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MaxTransferRate">
            <summary>
            The maximum transfer rate in bytes per sec
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SocksContext">
            <summary>
            Controls SOCKS integration.
            </summary>
            <remarks>
            <para>
            SOCKS may be used for FTPing through firewalls.  For this to be possible
            a SOCKS proxy must be available, and a user account must be set up on that proxy.
            <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
            </para>
            <para>
            The SOCKS features are controlled entirely through the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SocksContext"/>
            property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
            the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
            For example, for SOCKS4:
            </para>
            <code>
            	mySCPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
            </code>
            and for SOCKS5:
            <code>
            	Socks5Context socks = new Socks5Context("192.168.0.2", 1080);
            	socks.AuthMethods.Add(new Socks5NoAuthMethod());
            	socks.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            	mySCPClient.SocksContext = socks;
            </code>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ProxySettings">
            <summary>
            Settings for using proxies.
            </summary>
            <remarks>
            <para>
            Proxies may be used for FTPing through firewalls.  HTTP and SOCKS (4,4A and 4) are
            supported.  
            </para>
            <para>
             SOCKS supports both passive (PASV) and active (PORT) mode transfers. 
             Note that only passive mode transfers are possible via an HTTP proxy. There
             is no facility for HTTP proxies to listen for incoming connections, and hence active
             mode transfers cannot be done via an HTTP proxy. An exception will be thrown
             if they are attempted.
            </para>
            <para>
             Often a username and password will be required to authenticate with the proxy.
             These can be set in <c>ProxySettings</c>. 
            </para>
            <para><c>ProxySettings</c> is easiest to edit via the Property View.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerCompatibility">
            <summary>
            Controls various server compatibility features.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod">
            <summary>
            Get or set the current authentication method being used. 
            </summary>
            <remarks>Note that the different authentication types also have 
            various required properties associated with them that are required
            to be set.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KBIPrompts">
            <summary>
            Array of prompts used for keyboard interactive (KBI) authentication. 
            </summary>
            <remarks>Setting this property sets up keyboard interactive authentication. 
            The prompts that the server will send to the client must be known. For each prompt, an
            <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/> must be created with the matching prompt string and the
            response to be sent back to the server. Often, a single password prompt is all that is 
            required, and a <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> is supplied for this purpose. 
            For this property to be used, <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredHostKeyAlgorithms">
            <summary>Preferred algorithm(s) to use for server authentication via public key</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredCompressionAlgorithms">
            <summary>Preferred algorithm(s) to use for data compression</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredMACAlgorithms">
            <summary>Preferred MAC algorithm(s)</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredCipherAlgorithms">
            <summary>Preferred algorithm(s) to use for encryption.</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.PreferredKeyExchangeMethods">
            <summary>Preferred methods to use for key exchange.</summary>
            <remarks>The default is generally appropriate in most situations.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyFile">
            <summary>Path of the private key file used to authenticate the client</summary>
            <value>Path of the private key file used to authenticate the client.</value>
            <remarks>This property must be set before a connection with the server is made. 
            The SFTP server must have been set up with the corresponding public key before this 
            authentication method is used. For this property to be used, 
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyBytes" -->
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ServerValidation">
            <summary>
            Controls the way in which remote servers are validated.
            </summary>
            <remarks>
            It is unwise to have host validation disabled except in testing. For
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> or 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/> to succeed,
            the known hosts file must be loaded or at least one host key must have been 
            added via the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KnownHosts"/> manager. 
            The default is <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/>, which checks
            both the hostname and public key. <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/>
            only checks that the public key supplied by the server has a matching public key 
            in the client host key store irrespective of hostname.
            For 
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.KnownHosts">
            <summary>Manager of the list of known hosts used to authenticate the server.</summary>
            <value>Manager of the list of known hosts used to authenticate the server.</value>
            <remarks>This manager is used to set the known_hosts file containing a list of
            known hosts and their public keys. It is also used to add public keys explicitly</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.UserName">
            <summary>User-name of account on the server.</summary>
            <value>The user-name of the account the SFTP server that will be logged into upon connection.</value>
            <remarks>This property must be set before a connection with the server is made.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Password">
            <summary>Password of account on the server or the passphrase of the private key file.</summary>
            <value>The password of the account on the server.</value>
            <remarks>This property must be set before a connection with the server is made. For
            backwards compatability, if the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyFile"/>
            property is set and <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyPassphrase"/> is not set, then this password is also set to
            the passphrase of the private key to be supplied.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ClientPrivateKeyPassphrase">
            <summary>Passphrase of the private key file.</summary>
            <value>The passphrase of the private key file.</value>
            <remarks>This property must be set before a connection with the server is made. </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.RemoteHost">
            <summary>
            The domain-name or IP address of the SFTP server.
            </summary>
            <remarks>
            <para>This property may only be set if not currently connected.</para>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.ControlPort">
            <summary>
            The port on the server to which to connect the control-channel. 
            </summary>
            <remarks>
            <para>Most SSH servers use port 22 (the default)</para>
            <para>This property may only be set if not currently connected.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.WindowSize">
            <summary>
            The SSH window size. 
            </summary>
            <remarks>
            <para>This should normally be left alone unless familiar with SSH.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.MaxPacketSize">
            <summary>
            The SSH maximum packet size. 
            </summary>
            <remarks>
            <para>This should normally be left alone unless familiar with SSH.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.SendInitialWindowAdjust">
            <summary>
            Determines whether a SSH_MSG_CHANNEL_WINDOW_ADJUST message should be
            sent initially (true by default). 
            </summary>
            <remarks>
            <para>Occasionally some servers don't seem to like getting this initial message, and in this
            case set this property to false. This should normally be left alone unless familiar with SSH.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.IsResuming">
            <summary>
            Returns <c>true</c> if the next transfer is to be resumed (i.e. <see cref="M:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.Resume"/> has been called).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LicenseOwner">
            <summary>
            The license owner string.
            </summary>
            <remarks>
            The license owner must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LicenseKey">
            <summary>
            The license key string.
            </summary>
            <remarks>
            The license key must be set for the software to function correctly past the trial period.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.LogTag">
            <summary>Log tag</summary>
            <remarks>Must be set immediately after construction</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHSCPClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CARRIAGE_RETURN">
            <summary>
            Used for ASCII translation
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.LINE_FEED">
            <summary>
            Used for ASCII translation
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DEFAULT_UMASK">
            <summary>
            Default value of umask.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DEFAULT_PERMISSIONS">
            <summary>
            Default value of umask.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.LINE_SEPARATOR">
            <summary>
            Assume we are on Windows
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.remoteEOL">
            <summary>
            The type of remote EOL that has been deduced
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.umask">
            <summary>
            Default permissions are determined by defaultPermissions ^ umask
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.defaultPermissions">
            <summary>
            Default permissions for new files
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.sftpReceiver">
            <summary>
            Event receiver
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.sftp">
            <summary>
            Reference to the SFTP SSH subsystem
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.messages">
            <summary>
            Message store for SFTP messages
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.resumeMarker">
            <summary> Resume byte marker point</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.rops">
            <summary>  
            Helper class for performing recursive ops
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.filenameEncoding">
            <summary>
            Encoding for filenames for version 3 and below
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.parallelMode">
            <summary>
            Parallel writes
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.pipelinedDownloads">
            <summary>
            Are pipelined downloads ok?
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.readRequestLimit">
            <summary>
            Maximum number of read requests to queue up (1=no queuing, default=32)
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Init">
            <summary>
            Initialise client
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Connect">
            <summary>
            Establish a connection to the SFTP server
            </summary>
            <remarks>
            At a minimum, the RemoteHost, User and Password properties must be set
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Quit">
            <summary>
            Quit the session
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.QuitImmediately">
            <summary>
            Quit the session immediately. Just close the socket. Don't send
            any messages to the server.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Get(System.String,System.String)">
            <summary>
            Get data from the SFTP server using the currently
            set transfer mode.
            </summary>
            <param name="local">Local file to put data in.</param>
            <param name="remote">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Get(System.IO.Stream,System.String,System.String)">
            <summary>
            The master Get() method that all other Gets() delegate to
            </summary>
            <param name="local"></param>
            <param name="localFile"></param>
            <param name="remote"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.String,System.String)">
            <summary>
            Put a local file onto the SFTP server in the current directory.
            </summary>
            <param name="localPath">Path of the local file.</param>
            <param name="remoteFile">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.String,System.String,System.Boolean)">
            <summary>
            Upload a local file to the server
            </summary>
            <param name="local">name or path of local file</param>
            <param name="remote">name of remote file</param>
            <param name="append">true if appending to existing remote file</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.IO.Stream,System.String)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="!:CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="input">Input stream of data to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.IO.Stream,System.String,System.Boolean)">
            <summary>
            Put a stream of data onto the FTP server in the current directory.  Allows appending
            if current file exists
            </summary>
            <remarks>
            The stream is closed after the transfer is complete if
            <see cref="!:CloseStreamsAfterTransfer"/> is <c>true</c> (the default) and are left
            open otherwise.
            </remarks>
            <param name="input">Input stream of data to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.Byte[],System.String)">
            <summary>
            Put data onto the SFTP server in the current directory.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.Byte[],System.String,System.Boolean)">
            <summary>
            Put data onto the SFTP server in the current directory. Allows
            appending if current file exists.
            </summary>
            <param name="bytes">Array of bytes to put.</param>
            <param name="remote">Name of remote file in current directory.</param>
            <param name="append"><c>true</c> if appending, <c>false</c> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Put(System.IO.Stream,System.String,System.String,System.Boolean)">
            <summary>
            The master Put() method that all other Puts() delegate to
            </summary>
            <param name="input"></param>
            <param name="local"></param>
            <param name="remote"></param>
            <param name="append"></param>
            <returns>Number of bytes transferred.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CdUp">
            <summary>
            Change the remote working directory to parent
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ChDir(System.String)">
            <summary>
            Change the remote working directory
            </summary>
            <param name="dir">directory to change to</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Dir">
            <summary>
            List current directory's contents as an array of strings of
            filenames.
            </summary>
            <returns>An array of current directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Dir(System.String,System.Boolean)">
            <summary>
            List a directory's contents as an array of strings.
            </summary>
            <remarks>
            If <c>full</c> is <c>true</c> then a detailed
            listing if returned (if available), otherwise just filenames are provided.
            The detailed listing varies in details depending on OS and
            SFTP server. Note that a full listing can be used on a file
            name to obtain information about a file
            </remarks> 
            <param name="dirname">Name of directory</param>
            <param name="full"><c>true</c> if detailed listing required, <c>false</c> otherwise.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Dir(System.String)">
            <summary>
            List a directory's contents as an array of strings of filenames.
            </summary>
            <param name="dirname">Name of directory OR filemask.</param>
            <returns>An array of directory listing strings.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DirDetails(System.String)">
            <summary>
            List a directory's contents as an array of FTPFile objects.
            </summary>
            <param name="dirname">Name of directory </param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DirDetails">
            <summary>
            List the current directory's contents as an array of FTPFile objects.
            </summary>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.GetFileListing(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            Get a list of SftpFile objects for the specified directory or filename
            </summary>
            <param name="dirname">can be a directory name or filename or wildcard</param>
            <returns>list of file objects</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.HasWildcards(System.String)">
            <summary>
            Does this name contain wildcard characters?
            </summary>
            <param name="name">name to test for wildcards</param>
            <returns>true if name contains wildcard characters, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.GetSFTPFile(System.String)">
            <summary>
            Get an SFTP object for the supplied path
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ListChildren(System.String,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            Lists all the children of a directory
            </summary>
            <param name="dir">directory to list</param>
            <returns>ArrayList of its children</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ListChildren(EnterpriseDT.Net.Ftp.Ssh.SFTPFile,EnterpriseDT.Net.Ftp.FTPFileCallback)">
            <summary>
            Lists all the children of a directory
            </summary>
            <param name="dir">directory to list</param>
            <returns>ArrayList of its children</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MkDir(System.String)">
            <summary>Create the specified remote working directory.</summary>
            <param name="dir">Name or path of remote directory to create.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Pwd">
            <summary>
            Get the current remote working directory
            </summary>
            <returns>current remote working directory</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.RmDir(System.String)">
            <summary>
            Remove a directory
            </summary>
            <param name="path">directory to remove</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ChMod(System.Int32,System.String)">
            <summary>
            Changes the access permissions or modes of the specified 
            file or directory.
            </summary>
            <param name="permissions">the absolute mode of the file/directory. This 
            must be the base 10 representation of the octal permissions</param>
            <param name="path">the path to the file/directory on the remote server</param>
            <remarks>
            <para>
            Modes determine who can read, change or execute a file.
            </para>
            <blockquote><pre>Absolute modes are octal numbers specifying the complete list of
            attributes for the files; you specify attributes by OR'ing together
            these bits.
            
            0400       Individual read
            0200       Individual write
            0100       Individual execute (or list directory)
            0040       Group read
            0020       Group write
            0010       Group execute
            0004       Other read
            0002       Other write </pre></blockquote>
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ChangeOwner(System.Int32,System.String)" -->
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ChangeGroup(System.Int32,System.String)" -->
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CreateSymbolicLink(System.String,System.String)">
            <summary>
            Create a symbolic link on the server
            </summary>
            <param name="path">path to create link to</param>
            <param name="link">name of link</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.GetRemoteCRC(System.String,System.Int64,System.Int32)">
            <summary>
            Get the CRC-32 checksum for the named remote file.  Only supported with CompleteFTP.
            </summary>
            <param name="path"></param>
            <param name="offset"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.GetServerIdentity(EnterpriseDT.Net.Ftp.Ssh.SoftwareIdentity)">
            <summary>
            Passes the software identity of the client to the server and returns the software identity of the server
            </summary>
            <param name="clientIdentity">SoftwareIdentity of server of client</param>
            <returns>SoftwareIdentity of server</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Delete(System.String)">
            <summary>Delete the specified remote file.</summary>
            <param name="path">Name or path of remote file to delete.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Site(System.String)">
            <summary>INTERNAL USE ONLY</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ModTime(System.String)">
            <summary>Get modification time for a remote file.</summary>
            <param name="path">Name or path of remote file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.SetModTime(System.String,System.DateTime)">
            <summary>Set modification time for a remote file.</summary>
            <param name="path">Name or path of remote file.</param>
            <param name="modTime">Modification-time to set in local time.</param>
            <returns>Modification time of file as a <c>DateTime</c>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Rename(System.String,System.String)">
            <summary>
            Rename a remote file
            </summary>
            <param name="from">old name</param>
            <param name="to">new name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Exists(System.String)">
            <summary>
            Checks for the existence of a file on the server.
            </summary>
            <param name="remoteFile"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Size(System.String)">
            <summary>
            Get the size of a remote file. 
            </summary>
            <param name="path">Name or path of remote file in current directory.</param>
            <returns>Size of file in bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Resume">
            <summary>Make the next file transfer (put or get) resume.</summary>
            <remarks>
            <para>
            For puts, the
            bytes already transferred are skipped over, while for gets, if 
            writing to a file, it is opened in append mode, and only the bytes
            required are transferred.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ResumeDownload(System.Int64)">
            <summary>Make the next download resume at a specific point.</summary>
            <remarks>
            <para>
            This resume method allows the resume offset to be set explicitly for downloads. 
            Offset bytes are skipped before downloading the file.
            </para>
            <para>
            Currently resume is only supported for BINARY transfers (which is
            generally what it is most useful for). 
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DirDetails(System.String,System.Boolean)">
            <summary>
            Returns the given directory's contents and optionally that of its subdirectories 
            as an array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.
            </summary>
            <remarks>
            <para>If <c>includeSubdirectories</c> is set to <c>true</c> then the <see cref="P:EnterpriseDT.Net.Ftp.FTPFile.Children"/> property 
            of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects corresponding to subdirectories will contain the content of
            that subdirectory.</para>
            <para>This method works for Windows and most Unix FTP servers.  Please inform EDT
            about unusual formats (<a href="support@enterprisedt.com">support@enterprisedt.com</a>).</para>
            </remarks>
            <param name="directory">Name of directory AND/OR filemask.</param>
            <param name="includeSubdirectories">Use <c>true</c> if subdirectories are required.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Net.Ftp.FTPFile"/> objects.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDelete(System.String)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <remarks>Wildcard characters supported are '?' and '*'</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDelete(EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Delete multiple files in the current remote directory
            </summary>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDelete(System.String,System.String,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, recurse down into subdirectories</param>
            <remarks>Wildcard characters supported are '?' and '*'. Subdirectories are not deleted</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDelete(System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Delete multiple files in the current remote directory and its subdirectories.
            </summary>
            <param name="remoteDir">remote directory to delete</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, recurse down into subdirectories</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleDeleteDirectories(System.String)">
            <summary>
            Remove a remote directory, and all its files and its subdirectories
            </summary>
            <param name="remoteDir">the remote directory's name</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultiplePut(System.String,System.String)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultiplePut(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Put multiple files from the specified local directory into the current remote directory
            </summary>
            <param name="localDir">local directory to get files from</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultiplePut(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultiplePut(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Put multiple files from the specified local directory into the specified remote directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleGet(System.String,System.String)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleGet(System.String,EnterpriseDT.Net.Ftp.FileFilter)">
            <summary>
            Get multiple files into the specified local directory from the current remote directory
            </summary>
            <param name="localDir">local directory to get files into</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleGet(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="wildcard">wildcard for specifying files (<c>?</c> for single characters and <c>*</c> for multiple characters)</param>
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MultipleGet(System.String,System.String,EnterpriseDT.Net.Ftp.FileFilter,System.Boolean)">
            <summary>
            Get multiple files from the specified remote directory into the specified local directory
            </summary>
            <remarks>Optionally, all subdirectories can be transferred as well. Note that the wildcard
            is only applicable to files, not to subdirectories
            </remarks>
            <param name="localDir">local directory name</param>
            <param name="remoteDir">remote directory name</param>
            <param name="filter"><see cref="T:EnterpriseDT.Net.Ftp.FileFilter"/> to use for determining which files should be included.</param> 
            <param name="recurse">if true, subdirectories are put</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.TestConnection">
            <summary>
            Tests the connection
            </summary>
            <returns>true if connection ok</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.TransferBinaryFile(System.IO.Stream,System.IO.Stream,EnterpriseDT.Net.Ftp.TransferDirection,System.String,System.Int64)">
            <summary>
            Binary transfer code, for both Put and Get
            </summary>
            <param name="input">source stream</param>
            <param name="output">destination stream</param>
            <param name="direction">direction of transfer</param>
            <param name="remoteFile">remote file name</param>
            <param name="resumePoint">position at which to resume</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DownloadBinaryFile(EnterpriseDT.Net.Ftp.Ssh.SFTPFile,System.IO.Stream,System.String,System.Int64,System.Int64)">
            <summary>
            Binary transfer code, for both Put and Get
            </summary>
            <param name="sftpFile">source stream</param>
            <param name="output">destination stream</param>
            <param name="remoteFile">remote file name</param>
            <param name="size">size of remote file</param>
            <param name="position">position at which to resume</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.TransferASCIIFile(System.IO.Stream,System.IO.Stream,System.Byte[],System.Byte[],EnterpriseDT.Net.Ftp.TransferDirection,System.String)">
            <summary>
            Get a file in ASCII format, i.e. translate \n to platform equivalent
            </summary>
            <param name="input">input stream</param>
            <param name="output">output stream</param>
            <param name="inputSep">input NL separator</param>
            <param name="outputSep">output NL separator</param>
            <param name="direction">direction of transfer</param>
            <param name="remoteFile"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Stat(System.String)">
            <summary>
            Returns the attributes of the file from the remote computer
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ResolveRemotePath(System.String)">
            <summary>
            Resolve the supplied path into a full path
            </summary>
            <param name="path">path to resolve</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.OctalPermissionsToString(System.Int32)">
            <summary>
            Convert octal permissions such as umask to a standard string
            representation
            </summary>
            <param name="perm">octal permissions</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.FilenameEncoding">
            <summary>
            The character-encoding to use for file and directory names.
            </summary>
            <remarks>
            <para>
            The default is <c>UTF-8</c>, but may need to be changed for SFTP servers
            that do not support UTF-8 (typically SFTP version 3 or below).
            </para>
            <para>
            Note that this value is NOT used for SFTP servers with a version number
            greater than 3 - UTF-8 is always used in these cases as per the standard.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.Timeout">
            <summary> 
            Overall timeout in milliseconds for waiting for messages and underlying
            timeouts on sockets.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.MaxQueuedReadRequests">
            <summary>
            Maximum number of read requests to queue up (1=no queuing).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.IsConnected">
            <summary>
            Indicates whether the client is currently connected with the server.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.TransferType">
            <summary>The current file transfer type (BINARY or ASCII).</summary>
            <value>Transfer-type to be used for uploads and downloads.</value>
            <remarks>When the transfer-type is set to <c>BINARY</c> then files
            are transferred byte-for-byte such that the transferred file will
            be identical to the original.
            When the transfer-type is set to <c>ASCII</c> then end-of-line
            characters will be translated where necessary between Windows and
            UNIX formats.</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.ParallelTransferMode">
            <summary>
            Uploads are by default in parallel mode, which is faster than
            serial mode. This mode can be switched off if servers are unable
            to deal with parallel mode.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.UMask">
            <summary>
            Set and get the umask, the file creation mode mask that
            is applied to the default permissions to create the final permission
            set.
            </summary>
            <remarks>
            <para>The umask and the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DefaultPermissions"/> are specified in
            octal. The permission set of a new file is specified by taking the default
            permissions in octal, and subtracting the umask.
            </para>
            <para>
            For example, if the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DefaultPermissions"/> are 777 and the umask is
            set to 022, the final create permissions will be 755 (777-022).
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DefaultPermissions">
            <summary>
            Set and get the default file creation mode permissions (in octal).
            </summary>
            <remarks>
            <para>
            Permission strings consist of three fields - permissions for owner, group and
            other users. A typical executable file might have permissions of read,write and
            executable permissions set for the owner, and read and execute permissions for 
            everyone else. This is typically displayed as rwxr-xr-x, in the order of 
            owner|group|other.
            </para>
            <para>
            Permission strings can also be presented in octal, which has certain advantages.
            An octal number corresponds to each type of permission: 4=read, 2=write and
            1=execute. These are combined to form a group of permissions, i.e. a permissions
            field. For example, to specify that a file has read, write and execute permissions,
            it is assigned 4+2+1 = 7. So for the previous example of rwxr-wr-w, this can be 
            represented in octal as 755, where the 5 comes from 4(read)+1(execute).
            </para>
            <para>
            The default permissions are combined with the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.UMask"/> to form the
            final permission set for a new file.
            </para>
            <para>
            For more details on permissions and umasks, see a Unix text or look up umask and chmod's 
            man pages.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.KBIPrompts">
            <summary>
            Array of prompts used for keyboard interactive (KBI) authentication. 
            </summary>
            <remarks>Setting this property sets up keyboard interactive authentication. 
            The prompts that the server will send to the client must be known. For each prompt, an
            <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHAuthPrompt"/> must be created with the matching prompt string and the
            response to be sent back to the server. Often, a single password prompt is all that is 
            required, and a <see cref="T:EnterpriseDT.Net.Ftp.Ssh.SSHPasswordPrompt"/> is supplied for this purpose. 
            For this property to be used, <see cref="!:AuthenticationMethod"/> must be set to
            <see cref="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive"/>.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.CountBeforeSleep">
            <summary>
            Number of transfers before going to sleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.SleepEnabled">
            <summary>
            Enabling or not of sleeping after a certain number of transfers
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.SleepTime">
            <summary>
            Number of seconds spent asleep
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHFTPClient.DetectTransferMode">
            <summary>
            If set to true, the transfer mode in operations involving multiple files is 
            automatically changed between ASCII and binary as appropriate.
            </summary>
            <remarks>
            <see cref="M:EnterpriseDT.Net.Ftp.FileTypes.RegisterExtension(System.String)"/> for how to register a file extension as ASCII, and
            <see cref="T:EnterpriseDT.Net.Ftp.FileTypes"/> for how to obtain the current registered extensions
            </remarks> 
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod">
            <summary>
            Available key exchange methods
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.DiffieHellmanGroup1Sha1">
            <summary>Diffie-Hellman group 1 sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.DiffieHellmanGroup14Sha1">
            <summary>Diffie-Hellman group 14 sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.DiffieHellmanGroupExchangeSha1">
            <summary>Diffie-Hellman group exchange sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.DiffieHellmanGroupExchangeSha256">
            <summary>Diffie-Hellman group exchange sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.DiffieHellmanGroup14Sha256">
            <summary>Diffie-Hellman group exchange sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.ECDHsha2Nistp256">
            <summary>Elliptic Curve Diffie-Hellman with nistp256 curve</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.ECDHsha2Nistp384">
            <summary>Elliptic Curve Diffie-Hellman with nistp384 curve</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.ECDHsha2Nistp521">
            <summary>Elliptic Curve Diffie-Hellman with nistp521 curve</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHKeyExchangeMethod.All">
            <summary>All key exchange methods enabled</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm">
            <summary>
            Available public key algorithms for authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm.DSA">
            <summary>DSA public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm.RSA">
            <summary>RSA public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm.ECDSAsha2Nistp256">
            <summary>Elliptic Curve Diffie-Hellman with nistp256 public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm.ECDSAsha2Nistp384">
            <summary>Elliptic Curve Diffie-Hellman with nistp384 public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm.ECDSAsha2Nistp521">
            <summary>Elliptic Curve Diffie-Hellman with nistp521 public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHPublicKeyAlgorithm.ALL">
            <summary>All public key algorithms enabled</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm">
            <summary>
            Available cipher algorithms for packet encryption
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.TripleDES">
            <summary>Triple DES encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.Blowfish">
            <summary>Blowfish encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES128">
            <summary>AES 128 bit CBC mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES192">
            <summary>AES 192 bit CBC mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES256">
            <summary>AES 256 bit CBC mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES_CTR_128">
            <summary>AES 128 bit CTR mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES_CTR_192">
            <summary>AES 192 bit CTR mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.AES_CTR_256">
            <summary>AES 256 bit CTR mode encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCipherAlgorithm.All">
            <summary>All cipher algorithms enabled</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHCompressionAlgorithm">
            <summary>
            Available compression algorithms
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCompressionAlgorithm.None">
            <summary>No compression</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCompressionAlgorithm.Zlib">
            <summary>Zlib compression</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHCompressionAlgorithm.All">
            <summary>All compression algorithms enabled (but prefer no compression)</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHMACAlgorithm">
            <summary>
            Available MAC algorithms
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMACSHA1">
            <summary>hmac-sha1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMACMD5">
            <summary>hmac-md5</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMAC_SHA1_96">
            <summary>hmac-sha1-96</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMAC_MD5_96">
            <summary>hmac-md5-96</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMAC_SHA2_256">
            <summary>hmac-sha2-256</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.HMAC_SHA2_512">
            <summary>hmac-sha2-512</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.SSHMACAlgorithm.All">
            <summary>All HMAC algorithms enabled</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.SSHAuthenticationType">
            <summary>
            Available authentication types for the server
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.AuthenticationType">
            <summary>
            Available types of client authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKey">
            <summary>Public key authentication</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.AuthenticationType.Password">
            <summary>Password authentication</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.AuthenticationType.KeyboardInteractive">
            <summary>Keyboard-interactive authentication</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.AuthenticationType.PublicKeyAndPassword">
            <summary>Public key followed by password</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.KeyExchangeMethodConverter">
            <summary>
            Convert between the internal and public key exchange methods
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.PublicKeyAlgorithmConverter">
            <summary>
            Convert between the internal and public public key enums
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.CompressionAlgorithmConverter">
            <summary>
            Convert between the internal and public compression enums
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.MACAlgorithmConverter">
            <summary>
            Convert between the internal and public MAC enums
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.CipherAlgorithmConverter">
            <summary>
            Convert between the internal and public cipher enums
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPActiveDataSocket">
            <summary>
            Active data socket handling class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate">
            <summary>
            Contains information regarding an X.509v3 certificate.
            </summary>
            <remarks>
            <para>
            Certificates are used here in two basic ways: (1) to validate the
            server to the client, and (2) to validate the client to the server.  In the former
            case, the certificate is obtained from the server.  In the latter case, the 
            certificate must be loaded from a file.
            </para>
            <para>
            Certificates may be loaded from files using one of the following three methods:
            <list type="number">
            <item><term>CreateFromCER(...)</term>
            <description>Loads the certificate from a <i>CER</i> file</description></item>
            <item><term>CreateFromPEM(...)</term>
            <description>Loads the certificate from a <i>PEM</i> file</description></item>
            <item><term>CreateFromPFX(...)</term>
            <description>Loads the certificate from a <i>PFX</i> file</description></item>
            </list>
            </para>
            <para>
            Private keys may be loaded from a PVK file and associated with a certificate using the 
            <c>AssociatePrivateKey(string,string)</c> method.
            </para>
            <para>
            Instances of this class should be managed via using or Dispose.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromCER_PVK(System.String,System.String,System.String)">
            <summary>
            Loads the certificate from a <i>CER</i> file, and the private
            key from a <i>PVK</i> file.
            </summary>
            <param name="cerFileName">Name of CER file.</param>
            <param name="pvkFileName">Name of PVK file</param>
            <param name="pvkPassword">Password used to access PVK file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPEM_PVK(System.String,System.String,System.String)">
            <summary>
            Loads the certificate from a <i>PEM</i> file, and the private
            key from a <i>PVK</i> file.
            </summary>
            <param name="pemFileName">Name of CER file.</param>
            <param name="pvkFileName">Name of PVK file</param>
            <param name="pvkPassword">Password used to access PVK file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPFX_PVK(System.String,System.String,System.String,System.String)">
            <summary>
            Loads the certificate from a <i>PFX</i> file, and the private
            key from a <i>PVK</i> file.
            </summary>
            <param name="pfxFileName">Name of PFX file.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <param name="pvkFileName">Name of PVK file</param>
            <param name="pvkPassword">Password used to access PVK file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromFile(System.String)">
            <summary>
            Loads the certificate from a file.
            </summary>
            <remarks>
            This method first attempts to load the certificate as a PEM file,
            then CER, and finally PFX.  If all fail then an exception is thrown.
            </remarks>
            <param name="fileName">Path of file to load.</param>
            <returns>The certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromFile(System.String,System.String)">
            <summary>
            Loads the certificate from a file.
            </summary>
            <remarks>
            This method first attempts to load the certificate as a PEM file,
            then CER, and finally PFX.  If all fail then an exception is thrown.
            </remarks>
            <param name="fileName">Path of file to load.</param>
            <param name="password">Password (only used if file is in PFX format).</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromCER(System.String)">
            <summary>
            Loads the certificate from a <i>CER</i> file.
            </summary>
            <param name="cerFileName">Name of CER file.</param>
            <returns>The certificate object (not including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPEM(System.String)">
            <summary>
            Loads the certificate from a <i>PEM</i> file.
            </summary>
            <param name="pemFileName">Name of CER file.</param>
            <returns>The certificate object (not including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPFX(System.String,System.String)">
            <summary>
            Loads the certificate and private key from a <i>PFX</i> file.
            </summary>
            <remarks>
            This PFX file must contain the private key.
            </remarks>
            <param name="pfxFileName">Name of PFX file.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPFX(System.String,System.String,System.Boolean)">
            <summary>
            Loads the certificate and private key from a <i>PFX</i> file.
            </summary>
            <remarks>
            This PFX file must contain the private key.
            </remarks>
            <param name="pfxFileName">Name of PFX file.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPFX(System.Byte[],System.String)">
            <summary>
            Loads the certificate and private key from a <i>PFX</i> buffer.
            </summary>
            <remarks>
            This PFX buffer must contain the private key.
            </remarks>
            <param name="pfxBuffer">Buffer containing the certificate in PFX format.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CreateFromPKCS12(System.Byte[],System.String)">
            <summary>
            Loads the certificate and private key from a <i>PKCS12</i> buffer.
            </summary>
            <remarks>
            This PKCS12 buffer must contain the private key.
            </remarks>
            <param name="pfxBuffer">Buffer containing the certificate in PFX format.</param>
            <param name="pfxPassword">Password used to access PFX file.</param>
            <returns>The certificate object (including the private key).</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.AssociatePrivateKey(System.String,System.String)">
            <summary>
            Loads the private key from the given PVK file.
            </summary>
            <param name="pvkFileName">Name of PVK file.</param>
            <param name="password">Password used to access PVK file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.AssociatePrivateKey(System.String,System.String,System.Boolean)">
            <summary>
            Loads the private key from the given PVK file.
            </summary>
            <param name="pvkFileName">Name of PVK file.</param>
            <param name="password">Password used to access PVK file.</param>
            <param name="exportable"><b>true</b> if the private key should be marked exportable, <b>false</b> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.WriteToCER(System.String)">
            <summary>
            Writes the certificate to a file in CER format.
            </summary>
            <param name="cerFilePath">Path of file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.WriteToPEM(System.String)">
            <summary>
            Writes the certificate to a file in PEM format.
            </summary>
            <param name="pemFilePath">Path of file.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.WriteToPFX(System.String,System.String,System.Boolean)">
            <summary>
            Writes the certificate and (optionally) the private key to a file in PFX format.
            </summary>
            <param name="pfxFilePath">Path of file.</param>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetBase64String">
            <summary>
            Returns a base-64 representation of the certificate.
            </summary>
            <returns>The base-64 representation of the certificate</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetX509">
            <summary>
            Returns an X509Certificate object that corresponds to this certificate.
            </summary>
            <returns>An X509Certificate instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetPFXBuffer(System.String,System.Boolean)">
            <summary>
            Returns the certificate in buffer in the PFX format.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <returns>A byte-array containing the certificate in PFX format</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetPKCS12Buffer(System.String)">
            <summary>
            Returns the certificate in buffer in the PKCS12 format.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <returns>A byte-array containing the certificate in PKCS12 format</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window,bool)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String)">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <param name="title">The title of the form (may be null).</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window,bool)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String,System.Windows.Forms.IWin32Window)">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <param name="title">The title of the form (may be null).</param>
            <param name="parent">Reference to parent window (may be null)</param>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window,bool)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String,System.Windows.Forms.IWin32Window,System.Boolean)">
            <summary>
            Displays the certificate manager either as a modal dialog or as a window.
            </summary>
            <remarks>
            The certificate manager allows the user to view, import and remove 
            certificates on the local machine.  It is useful for managing server-
            and Certificate Authority- certificates.
            </remarks>
            <param name="title">The title of the form (may be null).</param>
            <param name="parent">Reference to parent window (may be null)</param>
            <param name="modal">Controls whether or not the form is shown as a modal dialog.</param>
            <returns>A reference to the form (useful only when invoking as non-modal window).</returns>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager"/>
            <seealso cref="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ShowCertificateManager(System.String)"/>
            <seealso cref="!:ShowCertificateManager(string,IWin32Window)"/>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PromptForCertificate(System.Boolean)">
            <summary>
            Prompts the user for a certificate file and a matching private key.
            </summary>
            <remarks>
            This method will first prompt for a certificate file of format CER, PEM or PFX.
            If the file is a PFX file it will then prompt for a password to access this file.
            If <c>promptForPrivateKey</c> is <c>true</c> then the user will be prompted
            for a private key file of the PVK format and a matching password.
            </remarks>
            <param name="promptForPrivateKey">Should the user also be prompted for a private key</param>
            <returns>An instance of SSLFTPCertificate with the associated private key.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PromptForCertificate(System.Windows.Forms.Form,System.Boolean)">
            <summary>
            Prompts the user for a certificate file and a matching private key.
            </summary>
            <remarks>
            This method will first prompt for a certificate file of format CER, PEM or PFX.
            If the file is a PFX file it will then prompt for a password to access this file.
            If <c>promptForPrivateKey</c> is <c>true</c> then the user will be prompted
            for a private key file of the PVK format and a matching password.
            </remarks>
            <param name="parent">Parent form (may be null)</param>
            <param name="promptForPrivateKey">Should the user also be prompted for a private key</param>
            <returns>An instance of SSLFTPCertificate with the associated private key.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PromptForCertificate(System.Windows.Forms.Form,System.String,System.Boolean)">
            <summary>
            Prompts the user for a certificate file and a matching private key.
            </summary>
            <remarks>
            This method will first prompt for a certificate file of format CER, PEM or PFX.
            If the file is a PFX file it will then prompt for a password to access this file.
            If <c>promptForPrivateKey</c> is <c>true</c> then the user will be prompted
            for a private key file of the PVK format and a matching password.
            </remarks>
            <param name="parent">Parent form (may be null)</param>
            <param name="dialogTitle">Title of dialog box</param>
            <param name="promptForPrivateKey">Should the user also be prompted for a private key</param>
            <returns>An instance of SSLFTPCertificate with the associated private key.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.Generate(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.DateTime,System.DateTime,System.Int32)">
            <summary>
            Generates a new certificate using the given parameters.
            </summary>
            <param name="commonName">Common Name</param>
            <param name="organizationName">Organization Name</param>
            <param name="organizationUnitName">Organization Unit Name</param>
            <param name="street">Street</param>
            <param name="locality">Locality</param>
            <param name="state">State</param>
            <param name="country">Country</param>
            <param name="startTime">Valid from</param>
            <param name="endTime">Valid to</param>
            <param name="keySize">Key-size</param>
            <returns>Certificate</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ImportIntoStore(EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName)">
            <summary>
            Imports a certificate into a particular certificate store.
            </summary>
            <param name="certificate">Certificate to install.</param>
            <param name="location">Location of store.</param>
            <param name="name">Name of store.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ImportCACertificate(EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate)">
            <summary>
            Imports a certificate into the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>.
            </summary>
            <param name="certificate">Certificate to import.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetCertificates(EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName)">
            <summary>
            Returns an array of all the certificates in a particular store.
            </summary>
            <param name="location">Location of store.</param>
            <param name="name">Name of store.</param>
            <returns>An array of all the certificates in a particular store.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.GetCACertificates">
            <summary>
            Returns an array of all the certificates in the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>.
            </summary>
            <returns>An array of all the certificates in the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.RemoveFromStore(EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation,EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName)">
            <summary>
            Removes a certificate from a specific certificate store.
            </summary>
            <param name="certificate">Certificate to remove.</param>
            <param name="location">Location of store.</param>
            <param name="name">Name of store.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.RemoveCACertificate(EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate)">
            <summary>
            Removes the given CA certificate from the <i>TrustedRootCAs</i> store on the <i>LocalMachine</i>. 
            </summary>
            <param name="certificate"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ToString">
            <summary>
            Returns a string representation of the certificate.
            </summary>
            <returns>A string representation of the certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ToLongString(System.String)">
            <summary>
            Returns a long string representation of the certificate.
            </summary>
            <param name="separator">Separator to use</param>
            <returns>A string representation of the certificate.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.Name">
            <summary>
            Name of the entity to which the certificate was issued.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.IssuerName">
            <summary>
            Name of the entity which issued the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.SubjectName">
            <summary>
            Distinguished Name (DN) of the entity to which the certificate was issued.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.SerialNumber">
            <summary>
            Serial number of certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.SerialNumberString">
            <summary>
            String representation of the serial number of the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.EffectiveDate">
            <summary>
            Date from which the certificate became effective.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.ExpirationDate">
            <summary>
            Date on which the certificate expires.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PublicKey">
            <summary>
            Public key associated with the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.PrivateKey">
            <summary>
            Private key associated with the certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyAlgorithm">
            <summary>
            Algorithm that was used to generate the public/private key pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyAlgorithmParameters">
            <summary>
            Parameters that were used to generate the public/private key pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyAlgorithmParametersString">
            <summary>
            String representation of the parameters that were used to generate 
            the public/private key pair.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.Extensions">
            <summary>
            Certificate extensions.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.Chain">
            <summary>
            Chain of certificates.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CertFile">
            <summary>
            Name of the certificate file from which this certificate was read.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.CertFilePassword">
            <summary>
            Password for the certificate file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyFile">
            <summary>
            Name of the private key file associated with this certificate.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate.KeyFilePassword">
            <summary>
            Password for the private key file.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName">
            <summary>
            Distinguished Name (DN) of a certificate.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.ToString">
            <summary>
            Returns the Common Name.
            </summary>
            <returns>Returns the Common Name.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.CommonName">
            <summary>
            CommonName (CN) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.OrganizationName">
            <summary>
            Organization (O) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.OrganizationalUnitName">
            <summary>
            OrganizationalUnit (OU) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.StreetAddress">
            <summary>
            StreetAddress (STREET) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.LocalityName">
            <summary>
            LocalityName (L) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.StateOrProvinceName">
            <summary>
            StateOrProvinceName (ST) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.CountryName">
            <summary>
            CountryName (C) component of the DN.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDistinguishedName.Item(System.String)">
            <summary>
            Generic accessor for DN components.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPExtension">
            <summary>
            SSLFTPExtension to the name.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPExtension.OID">
            <summary>
            Object ID of the extension.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPExtension.IsCritical">
            <summary>
            Indicates if the extension is critical.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPExtension.Value">
            <summary>
            The value of the extension as a byte-array.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation">
            <summary>
            Enumeration of certificate store locations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.LocalMachine">
            <summary>The certificate store for the local computer.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.LocalMachineEnterprise">
            <summary>The certificate store for the local machine enterprise.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.LocalMachineGroupPolicy">
            <summary>The certificate store for the local machine group policy.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.Services">
            <summary>The certificate store for the service account.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.Users">
            <summary>The certificate store for the users group of this computer.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.CurrentUser">
            <summary>The certificate store for the currently logged-on user.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreLocation.CurrentUserGroupPolicy">
            <summary>The certificate store for the currently logged-on group.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName">
            <summary>
            Enumeration of certificate store names.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName.TrustedRootCAs">
            <summary>Trusted root Certificate Autority</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName.IntermediateCAs">
            <summary>Intermediate Certificate Autority</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName.CurrentUser">
            <summary>Current User</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPStoreName.SoftwarePublishers">
            <summary>Software Publishers</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite">
            <summary>
            Enumeration of cipher-suites available.
            </summary>
            <remarks>
            The value <c>SECURE_CIPHERS</c> combines all ciphers currently regarded as secure, which is currently all 128+ bit 
            RSA-based ciphers.  Other combinations may be created by ORing values together as follows:
            <code>
            	SSLFTPCipherSuite.DHE_RSA_DES_SHA | SSLFTPCipherSuite.RSA_3DES_168_SHA
            </code>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.NONE">
            <summary>No encryption or compression.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_RC4_40_MD5">
            <summary>RC4 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_RC4_128_MD5">
            <summary>RC4 encryption with a 128 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_RC4_128_SHA">
            <summary>RC4 encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_RC2_40_MD5">
            <summary>RC2 encryption with a 40 bit key and an MD5 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_DES_56_SHA">
            <summary>DES encryption with a 56 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_3DES_168_SHA">
            <summary>Triple DES encryption with a 168 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_AES_128_SHA">
            <summary>AES encryption with a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_AES_256_SHA">
            <summary>AES encryption with a 256 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_AES_128_SHA256">
            <summary>AES encryption with a 128 bit key and a SHA256 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_AES_256_SHA256">
            <summary>AES encryption with a 256 bit key and a SHA256 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.DHE_RSA_DES_SHA">
            <summary>DES encryption with DHE key exchange, a 56 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.DHE_RSA_3DES_SHA">
            <summary>3DES encryption with DHE key exchange, a 56 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.ECDHE_RSA_3DES_SHA">
            <summary>3DES encryption with ECDHE key exchange, a 168 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.DHE_RSA_AES_128_SHA">
            <summary>3DES encryption with DHE key exchange, a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.DHE_RSA_AES_256_SHA">
            <summary>AES encryption with DHE key exchange, a 256 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.DHE_RSA_AES_128_SHA256">
            <summary>AES encryption with DHE key exchange, a 128 bit key and a SHA256 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.DHE_RSA_AES_256_SHA256">
            <summary>AES encryption with DHE key exchange, a 256 bit key and a SHA256 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.ECDHE_RSA_AES_128_SHA">
            <summary>AES encryption with ECDHE key exchange, a 128 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.ECDHE_RSA_AES_256_SHA">
            <summary>3DES encryption with ECDHE key exchange, a 256 bit key and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_AES_128_GCM_SHA256">
            <summary>AES encryption with a 128 bit key, GCM mode and a SHA256 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.RSA_AES_256_GCM_SHA384">
            <summary>AES encryption with a 256 bit key, GCM mode and a SHA384 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.DHE_RSA_AES_128_GCM_SHA256">
            <summary>AES encryption with DHE key exchange, a 128 bit key, GCM mode and a SHA256 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.DHE_RSA_AES_256_GCM_SHA384">
            <summary>AES encryption with DHE key exchange, a 256 bit key, GCM mode and a SHA1 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.ECDHE_RSA_AES_128_GCM_SHA256">
            <summary>AES encryption with ECDHE key exchange, a 128 bit key, GCM mode and a SHA256 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.ECDHE_RSA_AES_256_GCM_SHA384">
            <summary>AES encryption with ECDHE key exchange, a 256 bit key, GCM mode and a SHA384 hash.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.SECURE_CIPHERS">
            <summary>
            Cipher Suites that are currently considered secure (i.e. all 128+ bit RSA suites). 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite.ALL">
            <summary>All encryption and compression algorithms.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient">
             <summary>
             Provides low-level access to FTP/FTPS functionality.
             </summary>
             <remarks>
             <para>
             <c>SSLFTPClient</c> supports SOCKS (4, 4A, and 5) and FTPS (implicit and explicit).
             </para>
             <para>
             <b>FTPS</b>: SSLFTPClient supports standard FTP and the two types of FTPS, explicit and implicit.  The
             default is explicit FTPS.  The type may be selected using the <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.IsImplicitFTPS"/> flag.
             </para>
             <para>
             <b>Explicit FTPS:</b> The FTP client connects
             in plain (non-SSL) mode and operates in this mode until the <c>AUTH</c> command is
             issued by means of the <c>&gt;Auth(string)</c> method.  This will cause
             the client and server to negotiate an SSL connection.  Once complete, all
             commands sent from the client to the server, and their corresponding replies
             will be secure.  
             <example>This example shows a simple explicit FTPS session.
             <code>
               // create an explicit FTPS client
               SSLFTPClient ftp = new SSLFTPClient();
               ftp.RemoteHost = "192.168.10.123";
            
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = SecureFTPServerValidationType.None;
             
               // connect to the server
               ftp.Connect();                        
            
               // switch to secure command channel
               ftp.Auth(SSLFTPClient.AUTH_TLS);
            
               // log in
               ftp.Login("test", "test");
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </para>
             <para>
             This example uses no client authentication and does not attempt to verify
             server certificates (which should always be done in production systems).
             </para>
             <para>
             <b>Implicit FTPS</b> is an older form of FTPS which uses pure SSL connection,
             i.e. SSL sessions are established immediately upon socket connection for all
             FTP channels.
             <example>This example shows a simple implicit FTPS session:
             <code>
               // create an implicit FTPS client
               SSLFTPClient ftp = new SSLFTPClient();
               ftp.RemoteHost = "192.168.10.123";
            
               // Turn off server validation (ONLY do this when testing)
               ftp.ServerValidation = SecureFTPServerValidationType.None;
               
               // Select implicit FTPS
               ftp.IsImplicitFTPS = true;
             
               // connect to the server
               ftp.Connect();                        
            
               // log in
               ftp.Login("test", "test");
            
               // get a file
               ftp.Get("file.txt", "file.txt");
            
               // close the connection
               ftp.Quit();
             </code>
             </example>
             </para>
             <para>
             Like the previous example, this example uses no client authentication 
             and does not attempt to verify server certificates (which should 
             be done in production systems).
             </para>
             <para>  
             <b>SSL Certificates - Server Validation:</b>
             The examples above used no server validation.  This is only normally 
             acceptable only when testing.  To be secure applications should always 
             validate the server that they're communicating with.  If the 
             <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerValidation"/> property is set to <c>SecureFTPServerValidationType.Automatic</c>
             or <c>SecureFTPServerValidationType.AutomaticIgnoreHostName</c> then 
             <c>SSLFTPClient</c> will attempt to validate the server's certificate.  In 
             explicit FTPS this occurs when the <c>Auth(SecurityMechanism)</c> method is invoked, whereas
             in implicit FTPS, it occurs upon connection.  Windows Internet security services
             are used to validate the certificate.  This means that one of the following must
             be true
             <list type="number">
             <item>
             <term>CA certificate</term>
             <description>The server's certificate must have been issued by a CA 
             (Certificate Authority) whose certificate is in the Windows certificate store.</description>
             </item>
             <item>
             <term>Non-CA certificate</term>
             <description>The server's certificate must be in the Windows certificate store.
             A certificate may be installed on the system using the <i>Internet Properties</i>
             settings, which may be accessed from the Windows <i>Control Panel</i>.
             </description>
             </item>
             </list>
             </para>
             <para>  
             <b>SSL Certificates - Client Validation:</b>
             Some FTPS servers require a client certificate to be presented at the time security
             information is exchanged.  To enable this feature you must set the
             <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ClientCertificate"/> property.  Certificates may be loaded using a range of
             static methods in <see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate"/>.
             </para>
             <para><b>Server Compatibility:</b>
             The most severe barrier to server compatilibilty is the lack of FTPS support on the
             server.  Most FTP servers can be configured to support FTPS, but some only support
             SFTP (SSH File Transfer Protocol), which in fact is not FTP in the conventional sense.
             SFTP is not supported by <c>SSLFTPClient</c>.
             </para>
             <para>
             The second most common server incompatibility problem is caused by differing level
             of adherence to the standard for how SSL/TLS sockets should be closed.  By default
             SSLFTPClient will attempt to close sockets in the standards-compliant way.  While 
             this is the most secure, it occasionally will cause hanging as it waits for a
             response from the client which never arrives.  The <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCompatibility"/>
             property is provided for controlling this behaviour.  If you experience hanging
             when a data-transfer is complete then you should first try 
             <c>SecureFTPCompatibilityFlags.SSLDisableDataWaitOnClose</c> and, if the problem
             still occurs, <c>SecureFTPCompatibilityFlags.SSLDisableDataClosure</c>.
             If you experience hanging
             as you close your secure FTP session then you should first try 
             <c>SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose</c> and, if the problem
             still occurs, <c>SecureFTPCompatibilityFlags.SSLDisableControlClosure</c>.
             </para>
             <para>
             <b>Cipher-Suites:</b> A cipher-suite is a set of algorithms that is used for
             various aspects of SSL security.  For a client and a server to be able to communicate,
             they must be able to agree on a particular cipher-suite.  Different types of 
             servers recognize different cipher-suites, so it is usually up to the client make 
             sure that it shares at least one cipher-suite with the server that it is trying
             to communicate securely with.  By itself, this fact would imply that the client should 
             simply enable all possible suites in order to increase the chances of overlap.  
             However, this is not necessarily wise since some cipher-suites, esp. those which 
             adhered to the (now defunct) US export restriction,s are relatively easy to break, 
             whereas some others are trusted as currently being virtually unbreakable.
             </para>
             <para>
             This library supports many cipher-suites (<see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCipherSuite"/>)
             so it should be possible to find a suitable cipher-suite in most cases.  Cipher-suites
             are configured on the client using the <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.CipherSuites"/> property.
             </para>
             <para>
             <b>SOCKS:</b> SOCKS may be used for FTPing through firewalls.  For this to be possible
             a SOCKS proxy must be available, and a user account must be set up on that proxy.
             <c>SSLFTPClient</c> supports all the popular versions of SOCKS - 4, 4A, and 5.
             </para>
             <para>
             The SOCKS features are controlled entirely through the <see cref="T:EnterpriseDT.Util.Socks.SocksContext"/>
             property.  If it is <c>null</c> (the default) then SOCKS is not used.  To use SOCKS,
             the property must be set to an instance of <c>Socks4Context</c> or <c>Socks5Context</c>.
             For example, for SOCKS4:
             </para>
             <code>
            		myFTPClient.SocksContext = new Socks4Context("192.168.0.2", 1080, "marvin23");
             </code>
             and for SOCKS5:
             <code>
            		Socks5Context socksContext = new Socks5Context("192.168.0.2", 1080);
            		socksContext.AuthMethods.Add(new Socks5NoAuthMethod());
            		socksContext.AuthMethods.Add(new Socks5UserNamePasswordAuthMethod("marvin23", "m31erk"));
            		myFTPClient.SocksContext = socksContext;
             </code>
             </remarks>
             <author>Hans Andersen</author>
             <version>$Revision$</version>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.PROT_CLEAR">
            <summary>
            May be passed to the <code>prot(char)</code> method to specify that data-transfers 
            should be done WITHOUT security.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.PROT_PRIVATE">
            <summary>
            May be passed to the <code>prot(char)</code> method to specify that 
            data-transfers should be done WITH security.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.#ctor">
            <summary>  
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Connect">
            <summary>
            Connects to the FTP server.
            </summary>
            <remarks>
            <para>
            The <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.RemoteHost"/> property must be set before this method is called.
            </para>
            <para>Note that for explicit FTP <b>communications will not be secure</b> until the 
            <c>Auth()</c> method is called.
            </para>
            <para>
            Implicit FTPS communications are secure from the outset, usually requiring no 
            extra action by the client.  Some servers, however may require <c>Auth()</c>
            (no arguments) to be called.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Quit">
            <summary>Quit the FTP session by sending a <c>QUIT</c> command before closing the socket.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Auth">
            <summary>
            (Implicit FTPS only) Instructs the server that data-channels should be secure.
            </summary>
            <remarks>
            Although most implicit FTPS servers secure data-channels by default, thus 
            removing the need for this method, some do not.  These server require that 
            this method be called to ensure that data-channels are secure.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Auth(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion)">
            <summary>
            Switches the control-channel (the connection which carries commands)
            to secure mode.
            </summary>
            <remarks>
            If this command succeeds, then all subsequent
            commands and their corresponding replies will be secure.  The client will also
            switch to private (i.e. secure) data channels immediately after a connection 
            is made.  It does this by invoking <c>Pbsz(0)</c> and <c>Prot(DataProtectionType.Private)</c>.
            </remarks>
            <param name="sslVersion">Version of SSL to use</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Auth(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion,System.Boolean)">
            <summary>
            Switches the control-channel (the connection which carries commands)
            to secure mode.
            </summary>
            <remarks>
            If this command succeeds, then all subsequent
            commands and their corresponding replies will be secure.  
            If <c>secureDataChannels</c> is <c>true</c> thenthe client will also
            switch to private (i.e. secure) data channels immediately after a connection 
            is made.  It does this by invoking <code>Pbsz(0)</code> and 
            <code>Prot(SSLFTPClient.DataProtectionType.Private)</code>.
            </remarks>
            <param name="sslVersion">Minimum version of SSL to use</param>
            <param name="secureDataChannels">Flag instructing whether or not to
            secure the data-channels.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Auth(EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion,EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion,System.Boolean)">
            <summary>
            Switches the control-channel (the connection which carries commands)
            to secure mode.
            </summary>
            <remarks>
            If this command succeeds, then all subsequent
            commands and their corresponding replies will be secure.  
            If <c>secureDataChannels</c> is <c>true</c> thenthe client will also
            switch to private (i.e. secure) data channels immediately after a connection 
            is made.  It does this by invoking <code>Pbsz(0)</code> and 
            <code>Prot(SSLFTPClient.DataProtectionType.Private)</code>.
            </remarks>
            <param name="minSsl">Minimum version of SSL to use</param>
            <param name="maxSsl">Maximum version of SSL to use</param>
            <param name="secureDataChannels">Flag instructing whether or not to
            secure the data-channels.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ClearControlChannel">
            <summary>
            Clears the control channel, setting it back to plain text.
            </summary>
            <remarks>
            <para>
            After this command is issued, the server will continue the control connection in plaintext, 
            expecting the next command from the client to be in plaintext. This command is often used in
            conjunction with firewalls, which need to be able to inspect the control channel to open data
            channel ports in the firewall. This can only be done if the control channel is not encrypted.
            </para>
            <para>
            The server will not accept any more PBSZ or PROT commands.  All subsequent
            data transfers must be protected with the current PROT settings.
            </para>
            <para>
            If things appear to hang here, set the <c>ServerCompatibility</c> property to 
            <c>SecureFTPCompatibilityFlags.SSLDisableControlWaitOnShutdownSSL</c>
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Prot(EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType)">
            <summary>
            Defines the security-level of subsequent data-transfers.
            </summary>
            <remarks>
            One of the <c>Auth()</c> methods must be called prior to calling
            this method.  In most cases, calling <c>Auth()</c> will also implicitly
            cause this method to be called, so it's usually unnecessary to call this
            method explicitly.
            </remarks>
            <param name="protectionType">Protection type - either <see cref="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType.Clear"/> 
            or <see cref="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType.Private"/>.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.Pbsz(System.Int32)">
            <summary>
            Defines the buffer-size to be used on data-connections.
            </summary>
            <remarks>
            <para>
            In conformity with the standard, this method must be <code>0</code> (zero).  
            Note that this method is required only to conform with the standard.
            </para>
            <para>
            One of the <c>Auth()</c> methods must be called prior to calling
            this method.  In most cases, calling <c>Auth()</c> will also implicitly
            cause this method to be called, so it's usually unnecessary to call this
            method explicitly.
            </para>
            </remarks>
            <param name="bufferSize">Buffer-size to use (must be zero).</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.verifyCertificate(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket,EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Certificates.CertificateChain,EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs,EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus)">
            <summary>
            Called when a server needs to be verified.
            </summary>
            <param name="socket"></param>
            <param name="remote"></param>
            <param name="chain"></param>
            <param name="e"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.CheckLicense">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ValidatingServer">
            <summary>
            Notifies that the server must be validated.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.RemoteHost">
            <summary>  
            Get/set the name of the remote host.
            </summary>
            <remarks>
            Can only be set if not currently connected.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCompatibility">
            <summary>
            Controls various server security compatibility features.
            </summary>
            <remarks>
            <para>
            The most severe barrier to server compatilibilty is the lack of FTPS support on the
            server.  Most FTP servers can be configured to support FTPS, but some only support
            SFTP (SSH File Transfer Protocol), which in fact is not FTP in the conventional sense.
            SFTP is not supported by <c>SSLFTPClient</c>.
            </para>
            <para>
            The second most common server incompatibility problem is caused by differing level
            of adherence to the standard for how SSL/TLS sockets should be closed.  By default
            SSLFTPClient will attempt to close sockets in the standard-compliant way.  While 
            this is the most secure, it occasionally will cause hanging as it waits for a
            response from the client which never arrives.  The <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCompatibility"/>
            property is provided for controlling this behaviour.  If you experience hanging
            when a data-transfer is complete then you should first try 
            <c>SecureFTPCompatibilityFlags.DisableDataSSLWaitOnClose</c> and, if the problem
            still occurs, <c>SecureFTPCompatibilityFlags.SSLDisableDataClosure</c>.
            If you experience hanging
            as you close your secure FTP session then you should first try 
            <c>SecureFTPCompatibilityFlags.SSLDisableControlWaitOnClose</c> and, if the problem
            still occurs, <c>SecureFTPCompatibilityFlags.SSLDisableControlClosure</c>.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ClientCertificate">
            <summary>
            The certificate to be presented to the server.
            </summary>
            <remarks>
            If a server requires client validation then this property must be set.
            <see cref="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPCertificate"/>s are created using one of the static
            <c>SSLFTPCertificate.CreateFrom...</c> methods, which read a private key
            and a certificate from files.
            </remarks>
        </member>
        <!-- Badly formed XML comment ignored for member "P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerValidationCertificate" -->
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCertificate">
            <summary>
            The certificate presented by the server.
            </summary>
            <remarks>
            During the negotiation of a secure connection, the server presents a 
            certificate which may be accessed using this property.  The property
            may not be accessed until a secure connection has been made.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.IsControlChannelSecure">
            <summary>
            Indicates whether the control channel is currently secure.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.IsImplicitFTPS">
            <summary>
            Controls/indicates whether this client is performing explicit or implicit FTPS.
            </summary>
            <value><c>true</c> if the client is performing implicit FTPS.  
            <c>false</c> is the default.</value>
            <remarks>
            <para>
            Implicit FTPS is an older form of FTPS which uses pure SSL connection,
            i.e. SSL sessions are established immediately upon socket connection for all
            FTP channels.
            </para>
            <para>
            This property may be read any time, but may be set only prior to connection.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.UseSessionResumption">
            <summary>
            Controls/indicates whether this client is using SSL session resumption
            </summary>
            <value><c>true</c> if the client using session resumption  
            <c>true</c> is the default.</value>
            <remarks>
            <para>
            Session resumption is primarily a performance enhancement - it avoids some
            of the stages of the SSL handshake, using previously cached session data.
            </para>
            <para>
            This property may be read any time, but may be set only prior to connection.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.SessionResumptionRequiresExtendedMasterSecret">
            <summary>
            Controls/indicates whether this client requires using the extended
            master secret for TLS session resumption.
            </summary>
            <value><c>true</c> if the client requires the extended master secret for TLS session resumption  
            <c>true</c> is the default.</value>
            <remarks>
            <para>
            Session resumption is primarily a performance enhancement - it avoids some
            of the stages of the SSL handshake, using previously cached session data. For security, the specification
            requires the extended master secret to be used for session resumption, but some servers don't
            support it (and yet require session resumption). So it can be disabled using this property.
            </para>
            <para>
            This property may be read any time, but may be set only prior to connection.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.UseClientHelloExtension">
            <summary>
            Controls/indicates whether this client is using the SSL client hello signature extension for
            when TLS 1.2 is one of the protocol version options
            </summary>
            <value><c>true</c> if the client is using the SSL client hello signature extension for
            when TLS 1.2 is one of the protocol version options. <c>true</c> is the default.</value>
            <remarks>
            <para>
            Some servers require that the TLS 1.2 signature extension is sent if 
            TLS 1.2 is one of the version options listed in the client Hello, even though
            the TLS 1.2 RFC states that "A server MUST accept ClientHello
            messages both with and without the extensions field". 
            </para>
            <para>
            So the default is to send the extension if, say, TLS 1.1 and TLS 1.2 are in the negotiation
            list. If this flag is false, the extension is only sent if TLS 1.2 is the minimum version possible.
            </para>
            <para>
            This property may be read any time, but may be set only prior to connection.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerValidation">
            <summary>
            Controls the way in which server certificates are validated.
            </summary>
            <remarks>
            When an SSL/TLS connection is being negotiated, the FTP server will present an
            SSL certificate to the client.  <see cref="T:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType"/>s are used to
            control what the client does with this certificate.  
            The default is <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/>.
            If <c>ServerValidation</c> is <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Callback"/> then
            <see cref="E:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ValidatingServer"/> must be handled.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.CipherSuites">
            <summary>
            Get/sets the cipher-suites permissible during establishment of a secure
            connection.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.SSLVersion">
            <summary>
            Get/sets the minimum SSL/TLS version to use. TLS is the successor to SSL and 
            should be used unless the server does not support it - SSL 3.0 has various vulnerabilities such
            as the POODLE exploit. SSLFTPSSLVersion.DETECT no longer will interoperate with SSL 3.0.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.MinSSLVersion">
            <summary>
            Get/sets the minimum SSL/TLS version to use. TLS is the successor to SSL and 
            should be used unless the server does not support it - SSL 3.0 has various vulnerabilities such
            as the POODLE exploit. SSLFTPSSLVersion.DETECT no longer will interoperate with SSL 3.0.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.MaxSSLVersion">
            <summary>
            Get/sets the maximum SSL/TLS version to use. TLS is the successor to SSL and 
            should be used unless the server does not support it - SSL 3.0 has various vulnerabilities such
            as the POODLE exploit. SSLFTPSSLVersion.DETECT no longer will interoperate with SSL 3.0.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerCommonName">
            <summary>
            The name to be used when performing a name-check during 
            the validation of the server certificate.
            </summary>
            <remarks>
            An important part of validating the certificate is to perform
            a <i>name-check</i>.  In a name-check the <i>Common Name</i> on the certificate is
            compared with the host-name of the FTP server that we believe we are connected
            to.  Unless this property is set explicitly, the Common Name is assumed to be
            the same as the host-name that is used to connect to the server.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.RootCertificates">
            <summary>
            Returns an array containing all root certificates.
            </summary>
            <remarks>
            <para>
            If <see cref="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPClient.ServerValidation"/> is set to <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> or 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/> then the system will attempt to validate the server's
            certificate.  For a certificate to be validated it must either (1) be installed as a
            root certificate, or (2) the base of the chain of certificates that it contains must
            be a root certificate.
            </para>
            <para>
            <b>Root Certificates</b> work through "Chains of Trust".  In other
            words, if X trusts Y, and Y trusts Z, then X can trust Z.  In this case, X is
            the user of the FTP-client, Y is a Certification Authority (CA), and Z is the
            FTP server.  So, in order for the FTP-client to be able to trust the
            FTP-server, the server should have a certificate issued by a CA, and the client
            should have the CA's certificate loaded as a root certificate.  
            When a client connects to a server,
            the server will provide the client with its certificate.  This certificate will
            contain a copy of the CA's certificate and contain data which certifies
            that the server's certificate could only have been issued by this CA.  The 
            client can now match the CA's certificate with the root certificates that it holds 
            and then deduce whether or not the server is trustworthy.  Client certificates
            work similarly, but in reverse to the above description.
            </para>
            <para>
            <b>Installing certificates:</b> 
            A certificate may be installed on the system using the <i>Internet Properties</i>
            settings, which may be accessed from the Windows <i>Control Panel</i>.
            </para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket">
            <summary>
            Supports client-side FTP operations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.IMPLICIT_FTPS_CONTROL_PORT">
            <summary>   The default and standard control port number for implicit FTPS.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.isChannelSecure">
            <summary>
            Flag indicating whether or not the control channel has been switched
            to secure mode.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.isPrivateDataChannel">
            <summary>
            Flag indicating whether or not data channels are to be secure.
            This flag is affected by the PBSZ/PROT command pair; if PROT
            is set to P (Private) then it should be on otherwise it should
            be off.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.waitOnShutdownSSL">
            <summary>
            USed for the CCC command - do we wait for the Shutdown
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.ConnectSocket(EnterpriseDT.Net.BaseSocket,System.String,System.Int32)">
            <summary>   
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPControlSocket.ShuttingDownSSL">
            <summary>
            Used for CCC
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPException">
            <summary>
            Indicates that an SSL-related error occurred.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPException.CertificateChain">
            <summary>
            Returns the certificate-chain presented by the server, if the exception occurred during
            a failed SSL/TLS handshake.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSocket">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSocket.Connected">
            <summary>
            True if the control socket was connected at the last operation
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs">
            <summary>
            Provides data for the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuringConnection"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuredConnection"/> events.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs.isSecure">
            <summary>Indicates if the control channel is secure.</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventArgs.#ctor(System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="isSecure">Indicates if the control channel is secure.</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSecureEventHandler">
            <summary>
            Represents the method that will handle the <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuringConnection"/>
            and <see cref="E:EnterpriseDT.Net.Ftp.SecureFTPConnection.SecuredConnection"/> events.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType">
            <summary>
            Enumeration of available data-channel protections.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType.Clear">
            <summary>No security.</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPDataProtectionType.Private">
            <summary>Full security.</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion">
            <summary>
            Specifies type and version of SSL/TLS to use. 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion.SSL3">
            <summary>
            Version 3 of the SSL protocol.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion.TLS1">
            <summary>
            Version 1 of the TLS protocol (successor to the SSL protocol).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion.DETECT">
            <summary>
            Detect if the server requests TLS1.0, TLS 1.1 or TLS 1.2. SSL3 is no longer supported for this setting
            and must be set explicitly
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion.TLS11">
            <summary>
            Version 1.1 of the TLS protocol (successor to the SSL protocol).
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPSSLVersion.TLS12">
            <summary>
            Version 1.2 of the TLS protocol (successor to the SSL protocol).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus">
            <summary>
            Validation status of an SSL/TLS certificate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.ValidCertificate">
            <summary>
            The certificate is valid.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.Expired">
            <summary>
            A required certificate is not within its validity period.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidBasicConstraints">
            <summary>
            The certificate's basic constraints are invalid or missing.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidChain">
            <summary>
            A chain of certificates was not correctly created.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidNesting">
            <summary>
            The validity periods of the certification chain do not nest correctly.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidPurpose">
            <summary>
            A certificate is being used for a non permitted purpose.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidRole">
            <summary>
            A certificate that can only be used as an end-entity is being used as a CA or visa versa.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.InvalidSignature">
            <summary>
            The signature of the certificate cannot be verified.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.NoCNMatch">
            <summary>
            The certificate's CN name does not match the passed value.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.ParentRevoked">
            <summary>
            A certificate in the chain has been explicitly revoked by its issuer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.RevocationFailure">
            <summary>
            The revocation process could not continue. The certificates could not be checked.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.RevocationServerOffline">
            <summary>
            Since the revocation server was offline, the called function was not able to complete the revocation check.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.Revoked">
            <summary>
            The certificate or signature has been revoked.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.UntrustedRoot">
            <summary>
            A certification chain processed correctly but terminated in a root certificate not trusted by the trust provider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.UntrustedTestRoot">
            <summary>
            The root certificate is a testing certificate and policy settings disallow test certificates.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.WrongUsage">
            <summary>
            The certificate is not valid for the requested usage.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssl.SSLFTPValidationStatus.OtherError">
            <summary>
            The certificate is invalid.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.ProxyConnectorFactory">
            <summary>
            Base class for all proxy connectors
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.ProxyConnector">
            <summary>
            Base class for all proxy connectors
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.ProxyType">
            <summary>
            The type of proxy to be used, or if a proxy is to be used at all.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.NoProxy">
            <summary>   
            No proxy set
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.Http">
            <summary>   
            HTTP proxy type. Note that for FTP, only passive mode is supported.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.Socks4">
            <summary>   
            SOCKS 4 proxy
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.Socks4A">
            <summary>   
            SOCKS 4A proxy
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.ProxyType.Socks5">
            <summary>   
            SOCKS 5 proxy
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.ProxySettings">
            <summary>
            Holds all the settings required for connecting via a proxy. 
            </summary>
            <remarks>
            Settings for HTTP, SOCKS4, SOCKS4A and SOCKS5 are held in this
            class. 
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.ProxySettings.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.ProxySettings.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a <c>ProxySettings</c> setting the proxy-address and the proxy-port.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.ProxySettings.#ctor(System.String,System.Int32,System.String,System.String)">
            <summary>
            Constructs a <c>ProxySettings</c> setting the proxy-address and the proxy-port.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.ProxySettings.OnPropertyChanged(System.String)">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.ProxyAddress">
            <summary>
            Address to be used to connect to the proxy.
            </summary>
            <remarks>
            Proxies often have more than one address.  This address should be the one
            that the client must use to connect to it.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.PublicProxyAddress">
            <summary>
            Address that the proxy server presents to the "outside" network.
            </summary>
            <remarks>
            <para>
            This is the address that systems that are being connected to through the proxy
            will see.
            </para>
            <para>
            SOCKS servers usually provide this address to the client as SOCKS connections
            to be made, so it's usually unnecessary to set this property.  In some instances 
            however, when the server does not provide this address it may be necessary to 
            set this property. Not required for HTTP proxies.
            </para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.ProxyPort">
            <summary>
            Port to be used to connect to the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.UserName">
            <summary>
            User name used to authenticate to the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.Password">
            <summary>
            Password used to authenticate to the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.ProxyType">
            <summary>
            Type of proxy being used.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.NullAuthenticationEnabled">
            <summary>
            True if null authentication enabled for SOCKS5.
            </summary>
            <remarks>Irrelevant to protocols other than SOCKS5</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.PasswordAuthenticationEnabled">
            <summary>
            True if password authentication enabled for SOCKS5.
            </summary>
            <remarks>Irrelevant to protocols other than SOCKS5</remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.ProxySettings.PropertyChangeHandler">
            <summary>
            Called when a property is changed.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Proxy.Http.HttpHeader">
            
            
             @author $author$
             @version $Revision: 1.6 $
        </member>
        <member name="F:EnterpriseDT.Net.Proxy.Http.HttpHeader.begin">
             
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.#ctor">
            Creates a new HttpHeader object.
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.ReadLine(System.IO.Stream)">
            
            
             @param in
            
             @return
            
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.GetStartLine">
            
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.GetHeaderFields">
            
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.GetHeaderFieldNames">
            
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.GetHeaderField(System.String)">
            
            
             @param headerName
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.SetHeaderField(System.String,System.String)">
            
            
             @param headerName
             @param value
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.ToString">
            
            
             @return
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpHeader.ProcessHeaderFields(System.IO.Stream)">
            
            
             @param in
            
             @throws IOException
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpProxyConnector.Connect(EnterpriseDT.Net.BaseSocket,System.Net.IPAddress,System.Int32)">
            <summary>
            Connect to the remote host using HTTP proxy
            </summary>
            <param name="socket"></param>
            <param name="address"></param>
            <param name="port"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpProxyConnector.Connect(EnterpriseDT.Net.BaseSocket,System.String,System.Int32)">
            <summary>
            Connect to the remote host using HTTP proxy
            </summary>
            <param name="socket"></param>
            <param name="address"></param>
            <param name="port"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Proxy.Http.HttpResponse.#ctor(System.IO.Stream)">
             Creates a new HttpResponse object.
            
             @param input
            
             @throws IOException
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.Http.HttpResponse.Version">
            
            
             @return
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.Http.HttpResponse.Status">
            
            
             @return
        </member>
        <member name="P:EnterpriseDT.Net.Proxy.Http.HttpResponse.Reason">
            
            
             @return
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SecurityConstants">
            <summary>
            Defines the external methods of the CryptoAPI and SCHANNEL API.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityConstants.#ctor">
            <summary>
            Defeat instantiation of this class.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SecurityException">
            <summary>
            The exception that is thrown when a security error is detected.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityException.#ctor">
            <summary>
            Initializes a new instance of the SecurityException class with default properties.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SecurityException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SecurityException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the <paramref name="inner"/> parameter is not a null reference (<b>Nothing</b> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SecurityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the SecurityException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SSLCryptographicException">
            <summary>
            Extends CryptographicException so that the last win32 error is optionally included.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.SSLCryptographicException.#ctor(System.String,System.Boolean)">
            <summary>
            Create a SSLCryptographicException and optionally include the last win32 error
            </summary>
            <remarks>The last win32 error is that returned by <c>Marshal.GetLastWin32Error()</c>.</remarks>
            <param name="message">Message to show</param>
            <param name="includeWin32Error"></param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.DataBlob">
            <summary>
            The DataBlob structure contains an array of bytes. 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateInfo">
            <summary>
            The CertificateInfo structure contains a certificate's information.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CERT_PUBLIC_KEY_INFO">
            <summary>
            The CERT_PUBLIC_KEY_INFO structure contains a public key and its algorithm.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateContext">
            <summary>
            The CertificateContext structure contains both the encoded and decoded representations of a certificate.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.TrustListUsage">
            <summary>
            The TrustListUsage structure contains an array of Object Identifiers (OIDs) for Certificate Trust List (CTL) extensions. CTL_USAGE structures are used in functions that search for CTLs for specific uses.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateExtension">
            <summary>
            The CertificateExtension structure contains the extension information for a certificate, Certificate Revocation List (CRL) or Certificate Trust List (CTL).
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateNameValue">
            <summary>
            The CertificateNameValue structure contains a relative distinguished name (RDN) attribute value. It is like the CERT_RDN_ATTR structure, except that it does not include the object identifier member that is a member of CERT_RDN_ATTR. As in CERT_RDN_ATTR, the interpretation of the Value member depends on dwValueType.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CertificateNameInfo">
            <summary>
            The CertificateNameInfo structure contains subject or issuer names. The information is represented as an array of CERT_RDN structures.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.RelativeDistinguishedName">
            <summary>
            The RelativeDistinguishedName structure contains a relative distinguished name (RDN) consisting of an array of CERT_RDN_ATTR structures.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.RdnAttribute">
            <summary>
            The RdnAttribute structure contains a single attribute of a relative distinguished name (RDN). A whole RDN is expressed in a CERT_RDN structure that contains an array of CERT_RDN_ATTR structures.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.ChainParameters">
            <summary>
            The ChainParameters structure establishing the searching and matching criteria to be used in building a certificate chain.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.ChainPolicyStatus">
            <summary>
            The ChainPolicyStatus structure holds certificate chain status information returned by CertVerifyCertificateChainPolicy from the verification of certificate chains.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.ChainPolicyParameters">
            <summary>
            The ChainPolicyParameters structure contains information used in CertVerifyCertificateChainPolicy to establish policy criteria for the verification of certificate chains.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SslPolicyParameters">
            <summary>
            The SslPolicyParameters structure contains extra policy options.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.CRYPT_KEY_PROV_INFO">
            <summary>
            The CRYPT_KEY_PROV_INFO structure contains fields that are passed as the arguments to CryptAcquireContext to acquire a handle to a particular key container within a particular cryptographic service provider (CSP), or to create or destroy a key container.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.PUBLIC_KEY_BLOB">
            <summary>
            Union of the PUBLICKEYSTRUC [=BLOBHEADER] and RSAPUBKEY structures 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.SspiProvider">
            <summary>
            Defines the external methods of the CryptoAPI.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate">
            <summary>
            Defines a X509 v3 encoded certificate.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.String,System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.String,System.String,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.Byte[],System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified bytes.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified bytes.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPfxFile(System.Byte[],System.String,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a PFX file and retrieving the first certificate from it.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>One of the certificates in the PFX file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified bytes.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <remarks>
            Warning: this method returns the first Certificate it can find in the specified PFX file.
            Care should be taken to verify whether the correct Certificate instance is returned
            when using PFX files that contain more than one certificate.
            For more fine-grained control over which certificate is returned, use
            the CertificateStore.CreateFromPfxFile method to instantiate a CertificateStore object
            and then use the CertificateStore.FindCertificateBy*** methods.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromCerFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by opening a certificate file and retrieving the first certificate from it.
            </summary>
            <param name="file">The full path to the certificate file to open.</param>
            <returns>One of the certificates in the certificate file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading certificates from the specified file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromCerFile(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by reading a certificate from a certificate blob.
            </summary>
            <param name="file">The contents of the certificate file.</param>
            <returns>A Certificate instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the specified certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromCerFile(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by reading a certificate from a certificate blob.
            </summary>
            <param name="file">The contents of the certificate file.</param>
            <param name="offset">The offset from which to start reading.</param>
            <param name="size">The length of the certificate.</param>
            <returns>A Certificate instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the specified certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromX509Certificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by duplicating an existing <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.
            </summary>
            <param name="certificate">The X509Certificate instance to duplicate.</param>
            <returns>A Certificate instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificate"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPemFile(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by reading a certificate from a PEM encoded file.
            </summary>
            <param name="filename">The path to the PEM file.</param>
            <returns>A Certificate instance.</returns>
            <remarks>This implementation only reads certificates from PEM files. It does not read the private key from the certificate file, if one is present.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while reading the certificate from the PEM blob.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromPemFile(System.Byte[])">
            <summary>
            Creates a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class by reading a certificate from a PEM encoded file.
            </summary>
            <param name="file">The contents of the PEM file.</param>
            <returns>A Certificate instance.</returns>
            <remarks>This implementation only reads certificates from PEM files. It does not read the private key from the certificate file, if one is present.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while reading the certificate from the PEM blob.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertString(System.String,System.String)">
            <summary>
            Extracts an encoded certificate from a PEM file.
            </summary>
            <param name="cert">The PEM encoded certificate file.</param>
            <param name="delimiter">The delimiter to search for.</param>
            <returns>The Base64 encoded certificate if successfull or a null reference otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Duplicates a given certificate.
            </summary>
            <param name="certificate">The certificate to duplicate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificate"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.#ctor(System.IntPtr)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.InitCertificate(System.IntPtr,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Initializes this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <param name="store">The store that owns the certificate.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertificateInfo">
            <summary>
            Returns the <see cref="T:EnterpriseDT.Mentalis.Security.CertificateInfo"/> structure associated with the certificate.
            </summary>
            <returns>A CertificateInfo instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertificateInfoPtr">
            <summary>
            Returns reference to raw CERT_INFO structure
            </summary>
            <returns>pCertInfo</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.#ctor(System.IntPtr,EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Initializes this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instance from a handle.
            </summary>
            <param name="handle">The handle from which to initialize the state of the new instance.</param>
            <param name="store">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> that contains the certificate.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Clone">
            <summary>
            Creates a copy of this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.
            </summary>
            <returns>The Certificate this method creates, cast as an object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Finalize">
            <summary>
            Disposes of the certificate and frees unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToString">
            <summary>
            Returns a string representation of the current <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> object.
            </summary>
            <returns>A string representation of the current Certificate object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToString(System.Boolean)">
            <summary>
            Returns a string representation of the current X509Certificate object, with extra information, if specified.
            </summary>
            <param name="verbose"><b>true</b> to produce the verbose form of the string representation; otherwise, <b>false</b>.</param>
            <returns>A string representation of the current X509Certificate object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertHash">
            <summary>
            Returns the hash value for the X.509v3 certificate as an array of bytes.
            </summary>
            <returns>The hash value for the X.509 certificate.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertHash(EnterpriseDT.Mentalis.Security.Certificates.HashType)">
            <summary>
            Returns the hash value for the X.509v3 certificate as an array of bytes.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.HashType"/> values.</param>
            <returns>The hash value for the X.509 certificate.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertHashString">
            <summary>
            Returns the hash value for the X.509v3 certificate as a hexadecimal string.
            </summary>
            <returns>The hexadecimal string representation of the X.509 certificate hash value.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertHashString(EnterpriseDT.Mentalis.Security.Certificates.HashType)">
            <summary>
            Returns the hash value for the X.509v3 certificate as a hexadecimal string.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.HashType"/> values.</param>
            <returns>The hexadecimal string representation of the X.509 certificate hash value.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the hash of the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.BytesToString(System.Byte[])">
            <summary>
            Converts an array of bytes to its hexadecimal string representation.
            </summary>
            <param name="buffer">The bytes to convert.</param>
            <returns>The hexadecimal representation of the byte array.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetEffectiveDate">
            <summary>
            Returns the effective date of this X.509v3 certificate.
            </summary>
            <returns>The effective date for this X.509 certificate.</returns>
            <remarks>The effective date is the date after which the X.509 certificate is considered valid.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetExpirationDate">
            <summary>
            Returns the expiration date of this X.509v3 certificate.
            </summary>
            <returns>The expiration date for this X.509 certificate.</returns>
            <remarks>The expiration date is the date after which the X.509 certificate is no longer considered valid.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetIssuerName">
            <summary>
            Returns the name of the certification authority that issued the X.509v3 certificate.
            </summary>
            <returns>The name of the certification authority that issued the X.509 certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetKeyAlgorithm">
            <summary>
            Returns the key algorithm information for this X.509v3 certificate.
            </summary>
            <returns>The key algorithm information for this X.509 certificate as a string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetKeyAlgorithmParameters">
            <summary>
            Returns the key algorithm parameters for the X.509v3 certificate.
            </summary>
            <returns>The key algorithm parameters for the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetKeyAlgorithmParametersString">
            <summary>
            Returns the key algorithm parameters for the X.509v3 certificate.
            </summary>
            <returns>The key algorithm parameters for the X.509 certificate as a hexadecimal string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetPublicKey">
            <summary>
            Returns the public key for the X.509v3 certificate.
            </summary>
            <returns>The public key for the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetPublicKeyString">
            <summary>
            Returns the public key for the X.509v3 certificate.
            </summary>
            <returns>The public key for the X.509 certificate as a hexadecimal string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetRawCertData">
            <summary>
            Returns the raw data for the entire X.509v3 certificate.
            </summary>
            <returns>A byte array containing the X.509 certificate data.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetRawCertDataString">
            <summary>
            Returns the raw data for the entire X.509v3 certificate.
            </summary>
            <returns>The X.509 certificate data as a hexadecimal string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetSerialNumber">
            <summary>
            Returns the serial number of the X.509v3 certificate.
            </summary>
            <returns>The serial number of the X.509 certificate as an array of bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetSerialNumberString">
            <summary>
            Returns the serial number of the X.509v3 certificate.
            </summary>
            <returns>The serial number of the X.509 certificate as a hexadecimal string.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetPublicKeyLength">
            <summary>
            Returns the length of the public key of the X.509v3 certificate.
            </summary>
            <returns>Returns the length of the public key in bits. If unable to determine the key's length, returns zero.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetDistinguishedName">
            <summary>
            Returns a list of attributes of the X.509v3 certificate.
            </summary>
            <returns>A StringDictionary that contains the attributes.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the attributes.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetExtensions">
            <summary>
            Returns a list of extensions of the X.509v3 certificate.
            </summary>
            <returns>An array of Extension instances.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.FindExtension(System.String)">
            <summary>
            Searches for a certificate extension.
            </summary>
            <param name="oid">The extension to search for.</param>
            <returns>An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Extension"/> class -or- a null reference (<b>Nothing</b> in Visual Basic) if the specified extension could not be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="oid"/> is a null  reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.DecodeExtension(EnterpriseDT.Mentalis.Security.Certificates.Extension,System.Int32,System.Type)">
            <summary>
            Decodes the specified extension and returns an object of the specified type that is instantiated with the decoded bytes.
            </summary>
            <param name="extension">The certificate extension to decode.</param>
            <param name="oid">One of the predefined constants specified in the Win32 CryptoAPI. Refer to the documentation of the <a href="http://msdn.microsoft.com/library/en-us/security/security/cryptdecodeobject.asp">CryptDecodeObject</a> function for more information.</param>
            <param name="returnType">A <see cref="T:System.Type"/> instance. See remarks.</param>
            <returns>An object of the type <paramref name="returnType"/>.</returns>
            <remarks>
            The specified type should have a public constructor that takes an IntPtr and an int as parameters [in that order].
            The IntPtr is a pointer to the decoded buffer and the int contains the number of decoded bytes.
            The type should not keep the IntPtr reference after construction of an instance, because the memory is freed when the DecodeExtension method returns.
            </remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while decoding the certificate extension.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.DecodeExtension(EnterpriseDT.Mentalis.Security.Certificates.Extension,System.String,System.Type)">
            <summary>
            Decodes the specified extension and returns an object of the specified type that is instantiated with the decoded bytes.
            </summary>
            <param name="extension">The certificate extension to decode.</param>
            <param name="oid">The Object Identifier of the structure. Refer to the documentation of the <a href="http://msdn.microsoft.com/library/en-us/security/security/cryptdecodeobject.asp">CryptDecodeObject</a> function for more information.</param>
            <param name="returnType">A <see cref="T:System.Type"/> instance. See remarks.</param>
            <returns>An object of the type <paramref name="returnType"/>.</returns>
            <remarks>
            The specified type should have a public constructor that takes an IntPtr and an int as parameters [in that order].
            The IntPtr is a pointer to the decoded buffer and the int contains the number of decoded bytes.
            The type should not keep the IntPtr reference after construction of an instance, because the memory is freed when the DecodeExtension method returns.
            </remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while decoding the certificate extension.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.DecodeExtension(EnterpriseDT.Mentalis.Security.Certificates.Extension,System.IntPtr,System.Type)">
            <summary>
            Decodes the specified extension and returns an object of the specified type that is instantiated with the decoded bytes.
            </summary>
            <param name="extension">The certificate extension to decode.</param>
            <param name="oid">The Object Identifier of the structure.</param>
            <param name="returnType">A <see cref="T:System.Type"/> instance. See remarks.</param>
            <returns>An object of the type <paramref name="returnType"/>.</returns>
            <remarks>
            The specified type should have a public constructor that takes an IntPtr and an int as parameters [in that order].
            The IntPtr is a pointer to the decoded buffer and the int contains the number of decoded bytes.
            The type should not keep the IntPtr reference after construction of an instance, because the memory is freed when the DecodeExtension method returns.
            </remarks>
            <exception cref="T:System.ArgumentNullException">One of the parameters is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while decoding the certificate extension.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetName">
            <summary>
            Returns the name of the current principal.
            </summary>
            <returns>The name of the current principal.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">The certificate does not have a name attribute.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetIntendedKeyUsage">
            <summary>
            Returns a list of intended key usages of the X.509v3 certificate.
            </summary>
            <returns>An integer that contains a list of intended key usages.</returns>
            <remarks>Use the bitwise And operator to check whether a specific key usage is set.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetEnhancedKeyUsage">
            <summary>
            Returns a list of enhanced key usages of the X.509v3 certificate.
            </summary>
            <returns>A StringCollection that contains a list of the enhanced key usages.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the enhanced key usages.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertificateChain">
            <summary>
            Returns a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> where the leaf certificate corresponds to this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.
            </summary>
            <returns>The CertificateChain corresponding to this Certificate.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.HasPrivateKey">
            <summary>
            Checks whether the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> has a private key associated with it.
            </summary>
            <returns><b>true</b> if the certificate has a private key associated with it, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetFormat">
            <summary>
            Returns the name of the format of this X.509v3 certificate.
            </summary>
            <returns>The format of this X.509 certificate.</returns>
            <remarks>The format X.509 is always returned in this implementation.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetHashCode">
            <summary>
            Returns the hash code for the X.509v3 certificate as an integer.
            </summary>
            <returns>The hash code for the X.509 certificate as an integer.</returns>
            <remarks>If the X.509 certificate hash is an array of more than 4 bytes, any byte after the fourth byte is not seen in this integer representation.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Equals(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Compares two <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> objects for equality.
            </summary>
            <param name="other">A Certificate object to compare to the current object.</param>
            <returns><b>true</b> if the current Certificate object is equal to the object specified by <paramref name="other"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Equals(System.Security.Cryptography.X509Certificates.X509Certificate)">
            <summary>
            Compares a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> object and an <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> object for equality.
            </summary>
            <param name="other">An X509Certificate object to compare to the current object.</param>
            <returns><b>true</b> if the current Certificate object is equal to the object specified by <paramref name="other"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Equals(System.Object)">
            <summary>
            Compares two <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> objects for equality.
            </summary>
            <param name="other">A Certificate object to compare to the current object.</param>
            <returns><b>true</b> if the current Certificate object is equal to the object specified by <paramref name="other"/>; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetValidUsages(EnterpriseDT.Mentalis.Security.Certificates.Certificate[])">
            <summary>
            Returns an array of usages consisting of the intersection of the valid usages for all certificates in an array of certificates.
            </summary>
            <param name="certificates">Array of certificates to be checked for valid usage.</param>
            <returns>An array of valid usages -or- a null reference (<b>Nothing</b> in Visual Basic) if all certificates support all usages.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="certificates"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The array of certificates contains at least one invalid entry.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while determining the intersection of valid usages.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToPfxFile(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> as a PFX encoded file.
            </summary>
            <param name="filename">The filename of the new PFX file.</param>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <param name="withParents"><b>true</b> if the parent certificates should be exported too [if possible], <b>false</b> otherwise.</param>
            <remarks>If the specified file already exists, the method will throw an exception.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data to the file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the certificate store<br>-or-</br><br>an error occurs while building the certificate chain</br><br>-or-</br><br>an error occurs while creating the store</br><br>-or-</br><br>an error occurs while adding the certificate to the store.</br></exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToPfxBuffer(System.String,System.Boolean,System.Boolean)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> as a PFX encoded buffer.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="withPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <param name="withParents"><b>true</b> if the parent certificates should be exported too [if possible], <b>false</b> otherwise.</param>
            <returns>An array of bytes that represents the PFX encoded certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the certificate store<br>-or-</br><br>an error occurs while building the certificate chain</br><br>-or-</br><br>an error occurs while creating the store</br><br>-or-</br><br>an error occurs while adding the certificate to the store.</br></exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateCertStore(System.Boolean)">
            <summary>
            Creates an in memory <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> with this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> in it.
            </summary>
            <param name="withParents"><b>true</b> if the parent certificates should be included [if possible], <b>false</b> otherwise.</param>
            <returns>A CertificateStore instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToCerFile(System.String)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> as an encoded file.
            </summary>
            <param name="filename">The file where to store the certificate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
            <remarks>If the specified file already exists, this method will throw an exception.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToCerBuffer">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> as an encoded buffer.
            </summary>
            <returns>An array of bytes that represents the encoded certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetCertificateBuffer">
            <summary>
            Returns a buffer with the encoded certificate.
            </summary>
            <returns>An array of bytes.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.SaveToFile(System.Byte[],System.String)">
            <summary>
            Writes a buffer with data to a file.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="filename">The filename to write the data to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToX509">
            <summary>
            Returns an X509Certificate object that corresponds to this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.
            </summary>
            <returns>An X509Certificate instance.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.DuplicateHandle">
            <summary>
            Duplicates the handle of the Certificate.
            </summary>
            <returns>A duplicate handle of the Certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.CreateFromBase64String(System.String)">
            <summary>
            Creates a new Certificate from a string representation.
            </summary>
            <param name="rawString">A Base64-encoded representation of the certificate.</param>
            <returns>A new Certificate.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="rawString"/> if a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the specified certificate.</exception>
            <exception cref="T:System.FormatException">The length of <paramref name="rawString"/> is less than 4 -or- the length of <paramref name="rawString"/> is not an even multiple of 4.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToBase64String">
            <summary>
            Returns a Base64-encoded representation of the certificate.
            </summary>
            <returns>A Base64-encoded representation of the certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ToPemBuffer">
            <summary>
            Converts the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> to a PEM encoded buffer.
            </summary>
            <returns>An array of bytes that represents the PEM encoded certificate.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.GetKeyIdentifier">
            <summary>
            Gets the unique identifier associated with the key.
            </summary>
            <returns>A byte array containing the unique identifier associated with the key.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ConvertIntToByteArray(System.Int32)">
            <summary>
            Converts an integer to a series of bytes.
            </summary>
            <param name="dwInput">The integer to convert.</param>
            <returns>An array of bytes that represents the integer.</returns>
            <remarks>This method returns the minimum required number of bytes to represent a specific integer number.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.AssociateWithPrivateKey(System.String,System.String)">
            <summary>
            Associates the certificate with a private key from a PVK file.
            </summary>
            <param name="pvkFile">The path to the PVK file to open.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <remarks>
            <para>The <paramref name="password"/> can be a null reference (<b>Nothing</b> in Visual Basic) if the private key is not encrypted.</para>
            <para>The private key will not be exportable.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">The PVK file is encrypted and <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file could not be found.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while importing the private key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.AssociateWithPrivateKey(System.String,System.String,System.Boolean)">
            <summary>
            Associates the certificate with a private key from a PVK file.
            </summary>
            <param name="pvkFile">The path to the PVK file to open.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private key should be marked exportable, <b>false</b> otherwise.</param>
            <remarks>The <paramref name="password"/> can be a null reference (<b>Nothing</b> in Visual Basic) if the private key is not encrypted.</remarks>
            <exception cref="T:System.ArgumentNullException">The PVK file is encrypted and <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.FileNotFoundException">The specified file could not be found.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while importing the private key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.ExportPrivateKey(System.String,System.String)">
            <summary>
            Exports the private key of this certificate to a PVK file.
            </summary>
            <param name="pvkFile">The path to the PVK file to create.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the private key.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the PVK file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.TryDecrypt(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Tries decrypting the PRIVATEKEYBLOB blob.
            </summary>
            <param name="buffer">The buffer to decrypt.</param>
            <param name="offset">The starting offset.</param>
            <param name="length">The number of bytes to decrypt.</param>
            <param name="password">The password used to encrypt the PVK file (the salt should be prepended to the password).</param>
            <param name="keyLen">The effective key length in bytes (16 for 128 bit encryption, 5 for 40 bit encryption).</param>
            <returns>The decrypted buffer if successfull, or a null reference otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Certificate.VerifyRevocation(System.Byte[])">
            <summary>
            Verifies whether this certificate has been revoked or not.
            </summary>
            <param name="crl">The encoded CRL to check against.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="crl"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <returns><b>true</b> if the certificate is not on the CRL and therefore valid, or <b>false</b> if the certificate is on the CRL and therefore revoked.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_Handle">
            <summary>
            The handle of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> object.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_Store">
            <summary>
            The handle of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> object.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_CertInfo">
            <summary>
            A <see cref="T:EnterpriseDT.Mentalis.Security.CertificateInfo"/> instance associated with this certificate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_Context">
            <summary>
            A <see cref="T:EnterpriseDT.Mentalis.Security.CertificateContext"/> instance associated with this certificate.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Certificate.m_Chain">
            <summary>
            A reference to the associated <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/>.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Handle">
            <summary>
            Gets the handle of the Certificate.
            </summary>
            <value>An IntPtr that represents the handle of the certificate.</value>
            <remarks>The handle returned by this property should not be closed. If the handle is closed by an external actor, the methods of the Certificate object may fail in undocumented ways [for instance, an Access Violation may occur].</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.Store">
            <summary>
            Gets the handle of the associated <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>, if any.
            </summary>
            <value>A CertificateStore instance -or- a null reference (<b>Nothing</b> in Visual Basic) is no store is associated with this certificate.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.IsCurrent">
            <summary>
            Gets a value indicating whether the certificate is current, that is, has not expired.
            </summary>
            <value><b>true</b> if the certificate is current; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.SupportsDataEncryption">
            <summary>
            Gets a value indicating whether the certificate can be used for encrypting and decrypting messages.
            </summary>
            <value><b>true</b> if the certificate can be used for data encryption; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.SupportsDigitalSignature">
            <summary>
            Gets a value indicating whether the certificate can be used for digital signatures.
            </summary>
            <value><b>true</b> if the certificate can be used for digital signature; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.PrivateKey">
            <summary>
            Gets the private key for the certificate.
            </summary>
            <value>A System.Security.Cryptography.RSA containing the private key for the certificate.</value>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the RSA instance associated with the certificate.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.Certificate.PublicKey">
            <summary>
            Gets the public key derived from the certificate's data. This key cannot be used to sign or decrypt data.
            </summary>
            <value>A System.Security.Cryptography.RSA that contains the public key derived from the certificate's data.</value>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while retrieving the RSA instance associated with the certificate.</exception>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain">
            <summary>
            Defines a chain of certificates.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> instance from a <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/>.
            </summary>
            <param name="cert">The certificate for which a chain is being built.</param>
            <remarks><paramref name="cert"/> will always be the end certificate.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> instance from a <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/>.
            </summary>
            <param name="cert">The certificate for which a chain is being built.</param>
            <param name="additional">Any additional store to be searched for supporting certificates and CTLs.</param>
            <remarks><paramref name="cert"/> will always be the end certificate.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Certificates.CertificateStore,EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> instance from a <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/>.
            </summary>
            <param name="cert">The certificate for which a chain is being built.</param>
            <param name="additional">Any additional store to be searched for supporting certificates and CTLs.</param>
            <param name="options">Additional certificate chain options.</param>
            <remarks><paramref name="cert"/> will always be the end certificate.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while building the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Finalize">
            <summary>
            Disposes of the certificate chain.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.GetCertificates">
            <summary>
            Returns the list of certificates in this <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/>.
            </summary>
            <returns>An array of <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> instances.</returns>
            <remarks>
            The certificate with index 0 is the end certificate in the chain, the certificate with the highest index is the root certificate [if it can be found].
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.VerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType)">
            <summary>
            Verifies the end <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <returns>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.VerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags)">
            <summary>
            Verifies the end <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One or more of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values. VerificationFlags values can be combined with the OR operator.</param>
            <returns>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.VerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags,System.Byte[])">
            <summary>
            Verifies the end <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One or more of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values. VerificationFlags values can be combined with the OR operator.</param>
            <param name="crl">An optional CRL to check. This parameter can be null (<b>Nothing</b> in Visual Basic).</param>
            <returns>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate.</exception>
            <remarks>Only the leaf certificate is checked against the CRL.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.BeginVerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins verification of the end <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate"/> according to the SSL policy rules.
            </summary>
            <param name="server">The server that returned the certificate -or- a null reference if the certificate is a client certificate.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One or more of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values. VerificationFlags values can be combined with the OR operator.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="asyncState">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while queuing the verification request.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.EndVerifyChain(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous certificate verification request.
            </summary>
            <param name="ar">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <returns>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="ar"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="ar"/> parameter was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.BeginVerifyChain(System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><b>EndVerifyChain</b> was previously called for the asynchronous chain verification.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while verifying the certificate chain.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.StartVerification(System.Object)">
            <summary>
            Verifies a certificate chain and calls a delegate when finished.
            </summary>
            <param name="state">Stores state information for this asynchronous operation as well as any user-defined data.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.m_Handle">
            <summary>
            The handle of the certificate chain.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.m_Certificate">
            <summary>
            The end certificate that was used to build the chain.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain.Certificate">
            <summary>
            Returns the certificate for which this chain was built.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">
            <summary>
            The exception that is thrown when a certificate error is detected.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateException.#ctor">
            <summary>
            Initializes a new instance of the CertificateException class with default properties.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the CertificateException class with a specified error message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the CertificateException class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="inner">The exception that is the cause of the current exception. If the inner parameter is not a null reference (<b>Nothing</b> in Visual Basic), the current exception is raised in a catch block that handles the inner exception.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the CertificateException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore">
            <summary>
            Defines a certificate store.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CAStore">
            <summary>Represents the predefined system certificate store "CA". This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.MyStore">
            <summary>Represents the predefined system certificate store "My". This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.RootStore">
            <summary>Represents the predefined system certificate store "Root". This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.TrustStore">
            <summary>Represents the predefined system certificate store "Trust". This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.UnTrustedStore">
            <summary>Represents the untrusted certificate store. This field is constant.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.SoftwarePublisherStore">
            <summary>Represents the software publisher certificate store. This field is constant.</summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.String,System.String)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs whil reading from the specified file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs whil reading from the specified file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.String,System.String,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The full path to the PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs whil reading from the specified file.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.Byte[],System.String)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.Byte[],System.String,System.Boolean)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromPfxFile(System.Byte[],System.String,System.Boolean,EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation)">
            <summary>
            Creates a new certificate store from a PFX/P12 encoded file.
            </summary>
            <param name="file">The contents of a PFX file.</param>
            <param name="password">The password used to encrypt the private key.</param>
            <param name="exportable"><b>true</b> if the private keys associated with the certificates should be marked as exportable, <b>false</b> otherwise.</param>
            <param name="location">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation"/> values.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="password"/> is invalid.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the PFX file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.GetFileContents(System.String)">
            <summary>
            Returns the contents of a file.
            </summary>
            <param name="file">The file to read from.</param>
            <returns>A byte array with the contents of the specified file.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while reading from the specified file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.CreateFromCerFile(System.String)">
            <summary>
            Creates a new certificate store from a certificate file.
            </summary>
            <param name="file">The certificate file.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> instance.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="file"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while loading the certificate.</exception>
            <remarks>The provider opens the file and first attempts to read the file as a serialized store, then as a PKCS #7 signed message, and finally as a single encoded certificate.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Duplicates an exisiting <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <param name="store">The store to duplicate.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.IntPtr)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given handle.
            </summary>
            <param name="handle">The handle from which to initialize the CertificateStore from.</param>
            <remarks>The handle will not be duplicated; when this CertificateStore instance is garbage collected, the handle will be freed.</remarks>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given handle.
            </summary>
            <param name="handle">The handle from which to initialize the CertificateStore from.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given store name.
            </summary>
            <param name="store">The name of the system store to open.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while opening the specified store.</exception>
            <remarks>
            <para>If the system store name provided in this parameter is not the name of an existing system store, a new system store will be created and used.</para>
            <para>Some example system stores are listed in the following table. 
            <list type="table">
            	<listheader>
            		<term>Predefined system store name</term>
            		<description>Meaning</description>
            	</listheader>
            	<item>
            		<term>"CA"</term>
            		<description>Certification authority certificates.</description>
            	</item>
            	<item>
            		<term>"MY"</term>
            		<description>A certificate store holding "My" certificates with their associated private keys.</description>
            	</item>
            	<item>
            		<term>"ROOT"</term>
            		<description>Root certificates.</description>
            	</item>
            	<item>
            		<term>"SPC"</term>
            		<description>Software publisher certificates.</description>
            	</item>
            </list></para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(EnterpriseDT.Mentalis.Security.Certificates.StoreLocation,System.String)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given store name and a given store location.
            </summary>
            <param name="location">The location of the store.</param>
            <param name="store">The name of the store to open.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while opening the specified store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor">
            <summary>
            Initializes a new temporary <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> in memory.
            </summary>
            <remarks>If the store is closed, all the data in the store is lost.</remarks>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while creating the store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new temporary <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> in memory and adds the specified certificates to it.
            </summary>
            <param name="certs">A set of certificates.</param>
            <remarks>If the store is closed, all the data in the store is lost.</remarks>
            <exception cref="T:System.InvalidCastException"><i>certs</i> contains at least one object that is not of type <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.#ctor(System.Byte[],EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType)">
            <summary>
            Opens a serialized certificate store or a certificate store with signed PKCS7 messages.
            </summary>
            <param name="buffer">The bytes of the store to open.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType"/> values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while opening the store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.InitStore(System.IntPtr,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> from a given handle.
            </summary>
            <param name="handle">The handle from which to initialize the CertificateStore from.</param>
            <param name="duplicate"><b>true</b> if the handle should be duplicated, <b>false</b> otherwise.</param>
            <exception cref="T:System.ArgumentException"><paramref name="handle"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificate">
            <summary>
            Returns the first certificate from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> from the store.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificate(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Returns a certificate from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <param name="previous">The previous certificate.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> that comes after <paramref name="previous"/> -or- a null reference (<b>Nothing in Visual Basic</b>) if there is no certificate after <paremref name="previous"/>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByUsage(System.String[])">
            <summary>
            Finds a certificate having an enhanced key extension that matches one of the <paramref name="keyUsage"/> members.
            </summary>
            <param name="keyUsage">The list of enhanced key usages to search for.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> that has at least one of the specified key usages -or- a null reference (<b>Nothing in Visual Basic</b>) if no valid certificate could be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyUsage"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyUsage"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByUsage(System.String[],EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Finds a certificate having an enhanced key extension that matches one of the <paramref name="keyUsage"/> members.
            </summary>
            <param name="keyUsage">The list of enhanced key usages to search for.</param>
            <param name="previous">The previous certificate.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> that comes after <paramref name="previous"/> and that has at least one of the specified key usages -or- a null reference (<b>Nothing in Visual Basic</b>) if no other valid certificate could be found.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyUsage"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyUsage"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByHash(System.Byte[])">
            <summary>
            Finds a certificate with a matching hash.
            </summary>
            <param name="hash">The hash to search for.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with the matching default hash -or- a null reference (<b>Nothing</b> in Visual Basic) if no certificate with that hash could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByHash(System.Byte[],EnterpriseDT.Mentalis.Security.Certificates.HashType)">
            <summary>
            Finds a certificate with a matching hash.
            </summary>
            <param name="hash">The hash to search for.</param>
            <param name="hashType">One of the HashType values.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with the matching hash -or- a null reference (<b>Nothing</b> in Visual Basic) if no certificate with that hash could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateByKeyIdentifier(System.Byte[])">
            <summary>
            Finds a certificate with a matching key identifier.
            </summary>
            <param name="keyID">The key identifier to search for.</param>
            <returns>The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with the matching key identifier -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyID"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyID"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateBySubjectName(System.String)">
            <summary>
            Finds a certificate with a matching subject name.
            </summary>
            <param name="name">The X500 string to search for.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with a matching subject name -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateBySubjectName(System.String,EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Finds a certificate with a matching subject name.
            </summary>
            <param name="name">The X500 string to search for.</param>
            <param name="previous">The previous certificate.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with a matching subject name -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="name"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="name"/> is invalid.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while encoding the specified string.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateBySubjectString(System.String)">
            <summary>
            Finds a certificate with a subject that contains a specified string.
            </summary>
            <param name="subject">The string to search for.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with a matching subject string -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="subject"/> is invalid.</exception>
            <remarks>The string matching algorithm used is case-insensitive.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.FindCertificateBySubjectString(System.String,EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Finds a certificate with a subject that contains a specified string.
            </summary>
            <param name="subject">The string to search for.</param>
            <param name="previous">The previous certificate.</param>
            <returns>A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> with a matching subject string -or- a null reference (<b>Nothing</b> in Visual Basic) if no matching certificate could be found in the store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="subject"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="subject"/> is invalid.</exception>
            <remarks>The string matching algorithm used is case-insensitive.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.EnumCertificates">
            <summary>
            Enumerates all the certificates in the store.
            </summary>
            <returns>An array of <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instances.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.EnumCertificates(System.String[])">
            <summary>
            Enumerates all the certificates in the store.
            </summary>
            <param name="keyUsage">The list of enhanced key usages to search for.</param>
            <returns>An array of <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> instances.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="keyUsage"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="keyUsage"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.ToPfxFile(System.String,System.String,System.Boolean)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> as a PFX encoded file.
            </summary>
            <param name="filename">The filename of the new PFX file.</param>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="exportPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <remarks>If the specified file already exists, the method will throw an exception.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> or <paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the certificate store.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data to the file.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.ToPfxBuffer(System.String,System.Boolean)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> as a PFX encoded file.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="exportPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <returns>An array of bytes that represents the PFX encoded store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while exporting the certificate store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.GetPfxBuffer(System.String,System.Boolean)">
            <summary>
            Returns the byte representation of the PFX encoded store.
            </summary>
            <param name="password">The password to use when encrypting the private keys.</param>
            <param name="exportPrivateKeys"><b>true</b> if the private keys should be exported [if possible], <b>false</b> otherwise.</param>
            <returns>An array of bytes that represents the PFX encoded store.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="password"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.ToCerFile(System.String,EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> in a file.
            </summary>
            <param name="filename">The filename of the serialized store.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType"/> values.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while saving the store to the memory buffer.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.ToCerBuffer(EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType)">
            <summary>
            Saves the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> in a buffer.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType"/> values.</param>
            <returns>An array of bytes that represents the encoded store.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while saving the store to the memory buffer.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.GetCerBuffer(EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType)">
            <summary>
            Returns the byte representation of the serialized store.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType"/> values.</param>
            <returns>An array of bytes that represents the encoded store.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while saving the store to the memory buffer.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.SaveToFile(System.Byte[],System.String)">
            <summary>
            Writes a buffer with data to a file.
            </summary>
            <param name="buffer">The buffer to write.</param>
            <param name="filename">The filename to write the data to.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> or <paramref name="filename"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.AddCertificate(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Adds a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> to the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <param name="cert">The certificate to add to the store.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while adding the certificate to the store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.DeleteCertificate(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Deletes a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
            <exception cref="T:System.ArgumentNullException"><paramref name="cert"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while removing the certificate from the store.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.Finalize">
            <summary>
            Disposes of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.Dispose">
            <summary>
            Disposes of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.GetCachedStore(System.String)">
            <summary>
            Returns a CertificateStore from a list of cached stores. If the store is not yet cached, it will be created first.
            </summary>
            <param name="name">The name of the store.</param>
            <returns>The cached store.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.m_Handle">
            <summary>
            Holds the handle of the certificate store.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.m_CachedStores">
            <summary>
            Holds the cached stores
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore.Handle">
            <summary>
            Gets the handle of the CertificateStore.
            </summary>
            <value>An IntPtr that represents the handle of the certificate.</value>
            <remarks>The handle returned by this property should not be closed. If the handle is closed by an external actor, the methods of the CertificateStore object may fail in undocumented ways [for instance, an Access Violation may occur].</remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection">
            <summary>
            Defines a collection of certificate stores.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.#ctor(EnterpriseDT.Mentalis.Security.Certificates.CertificateStore[])">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection"/> class.
            </summary>
            <param name="stores">An array of stores that should be added to the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="stores"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> objects in the array is a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection"/> instance. This is not allowed to avoid circular dependencies.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while adding a certificate to the collection.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.#ctor(EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection"/> class.
            </summary>
            <param name="collection">The CertificateStoreCollection whose elements are copied to the new certificate store collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="collection"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while adding a certificate to the collection.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.AddStore(EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Adds a certificate store to the collection.
            </summary>
            <param name="store">An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> class.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified certificate store is a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection"/> instance. This is not allowed to avoid circular dependencies.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while adding the certificate to the collection.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.RemoveStore(EnterpriseDT.Mentalis.Security.Certificates.CertificateStore)">
            <summary>
            Removes a certificate store from the collection.
            </summary>
            <param name="store">An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStore"/> class.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="store"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreCollection.m_Stores">
            <summary>
            Holds the references to the CertificateStore instances in the collection. This is to avoid CertificateStores finalizing and destroying their handles.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.HashType">
            <summary>
            Defines the different hash type values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.HashType.SHA1">
            <summary>The certificate will be hashed using the SHA1 algorithm.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.HashType.MD5">
            <summary>The certificate will be hashed using the MD5 algorithm.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.HashType.Default">
            <summary>The certificate will be hashed using the default hashing algorithm.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage">
            <summary>
            Defines the different key usage values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.DataEncipherment">
            <summary>The key can be used for data encipherment.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.DigitalSignature">
            <summary>The key can be used to sign data.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.KeyAgreement">
            <summary>The key can be used in key agreement algorithms.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.KeyCertSign">
            <summary>The key can be used to sign certificates.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.KeyEncipherment">
            <summary>The key can be used for key encipherment.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.NonRepudiation">
            <summary>The key can be used for electronic non-repudiation.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeyUsage.CrlSign">
            <summary>The key can be used to sign certificate revocation lists.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType">
            <summary>
            Defines the different authentication type values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.AuthType.Client">
            <summary>The certificate is a client certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.AuthType.Server">
            <summary>The certificate is a server certificate.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus">
            <summary>
            Defines the different certificate status values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.ValidCertificate">
            <summary>The certificate is valid.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.Expired">
            <summary>A required certificate is not within its validity period.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidBasicConstraints">
            <summary>The certificate's basic constraints are invalid or missing.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidChain">
            <summary>A chain of certificates was not correctly created.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidNesting">
            <summary>The validity periods of the certification chain do not nest correctly.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidPurpose">
            <summary>A certificate is being used for a non permitted purpose.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidRole">
            <summary>A certificate that can only be used as an end-entity is being used as a CA or visa versa.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidSignature">
            <summary>The signature of the certificate cannot be verified.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.NoCNMatch">
            <summary>The certificate's CN name does not match the passed value.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.ParentRevoked">
            <summary>A certificate in the chain has been explicitly revoked by its issuer.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.RevocationFailure">
            <summary>The revocation process could not continue. The certificates could not be checked.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.RevocationServerOffline">
            <summary>Since the revocation server was offline, the called function was not able to complete the revocation check.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.Revoked">
            <summary>The certificate or signature has been revoked.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.UntrustedRoot">
            <summary>A certification chain processed correctly but terminated in a root certificate not trusted by the trust provider.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.UntrustedTestRoot">
            <summary>The root certificate is a testing certificate and policy settings disallow test certificates.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.WrongUsage">
            <summary>The certificate is not valid for the requested usage.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidName">
            <summary>The certificate has an invalid name. Either the name is not included in the permitted list, or it is explicitly excluded.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.InvalidPolicy">
            <summary>The certificate has an invalid policy.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.Critical">
            <summary>The certificate is being used for a purpose other than the purpose specified by its CA.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.NoRevocationCheck">
            <summary>The revocation function was unable to check revocation for the certificate</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus.OtherError">
            <summary>The certificate is invalid.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType">
            <summary>
            Defines the different certificate store values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType.SerializedStore">
            <summary>The certificate store should be saved as a serializes store.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateStoreType.Pkcs7Message">
            <summary>The certificate store should be saved as a signed PKCS7 message.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions">
            <summary>
            Defines additional options for building a certificate chain.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.Default">
            <summary>The default chain options</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCheckEndCert">
            <summary>Revocation checking is done on the end certificate and only the end certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCheckChain">
            <summary>Revocation checking is done on all of the certificates in every chain.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCheckChainExcludeRoot">
            <summary>Revocation checking in done on all certificates in all of the chains except the root certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCacheEndCert">
            <summary>When this flag is set, the end certificate is cached, which might speed up the chain-building process. By default, the end certificate is not cached and it would need to be verified each time a chain is built for it.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.RevocationCheckCacheOnly">
            <summary>Revocation checking only accesses cached URLs and does not hit the wire to do any revocation URL retrieval. Supported on Windows Me, Windows 2000 and later.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.CacheOnlyUrlRetrieval">
            <summary>Uses only cached URLs in building a certificate chain. The Internet and Intranet are not searched for URL-based objects. Note, not applicable to revocation checking. Set CERT_CHAIN_REVOCATION_CHECK_CACHE_ONLY to use only cached URLs for revocation checking.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.DisablePass1QualityFiltering">
            <summary>For performance reasons, the second pass of chain building only considers potential chain paths that have quality greater than or equal to the highest quality determined during the first pass. The first pass only considers valid signature, complete chain and trusted roots to calculate chain quality. This flag can be set to disable this optimization and consider all potential chain paths during the second pass.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.ReturnLowerQualityContexts">
            <summary>The default is to return only the highest quality chain path. Setting this flag will return the lower quality chains. These are returned in the chain context's cLowerQualityChainContext and rgpLowerQualityChainContext fields.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateChainOptions.DisableAuthRootAutoUpdate">
            <summary>Setting this flag inhibits the auto update of third party roots from the Windows Update Web Server.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags">
            <summary>
            Defines the different verificateion flags values.
            </summary>
            <remarks>
            You can specify more VerificationFlags at once by combining them with the OR operator.
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.None">
            <summary>No flags.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreTimeNotValid">
            <summary>Ignore an invalid time.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreCtlTimeNotValid">
            <summary>Ignore an invalid time of the certificate trust list.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreTimeNotNested">
            <summary>Ignore an invalid time nesting.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreInvalidBasicContraints">
            <summary>Ignore invalid basic contraints.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreAllTimeChecks">
            <summary>Ignore all time checks.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.AllowUnknownCA">
            <summary>Allow an unknown certificate authority.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreWrongUsage">
            <summary>Ignore the wrong usage of a certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreInvalidName">
            <summary>Ignore an invalid name.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreInvalidPolicy">
            <summary>Ignore an invalid policy.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreEndRevUnknown">
            <summary>Ignore an unknown revocation status of the end certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreSignerRevUnknown">
            <summary>Ignore an unknown revocation status of the signer certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreCARevUnknown">
            <summary>Ignore an unknown revocation status of the certificate authority.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreRootRevUnknown">
            <summary>Ignore an unknown revocation status of the root certificate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.IgnoreAllRevUnknown">
            <summary>Ignore an unknown revocation status of any of the certificates.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.AllowTestroot">
            <summary>Allow a test root.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags.TrustTestroot">
            <summary>Trust a test root.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation">
            <summary>
            Specifies the location of the X.509 certificate store.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.CurrentService">
            <summary>The certificate store for the current service.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.CurrentUser">
            <summary>The certificate store for the currently logged-on user.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.CurrentUserGroupPolicy">
            <summary>The certificate store for the currently logged-on group.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.LocalMachine">
            <summary>The certificate store for the local computer.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.LocalMachineEnterprise">
            <summary>The certificate store for the local machine enterprise downloaded from a network setting.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.LocalMachineGroupPolicy">
            <summary>The certificate store for the local machine group policy downloaded from a network setting.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.Services">
            <summary>The certificate store for a specified service account; for example, an Alerter or the Event Log.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.Unknown">
            <summary>The location is unknown.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.StoreLocation.Users">
            <summary>The certificate store for the users group of this computer.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute">
            <summary>
            Defines a structure that represents one attribute of a relative distinguished name.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> instance.
            </summary>
            <param name="oid">The object identifier of the attribute.</param>
            <param name="val">The decoded value of the attribute.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/>.
            </summary>
            <param name="obj">The Object to compare with the current Object. </param>
            <returns><b>true</b> if the specified Object is equal to the current NameAttribute; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.GetHashCode">
            <summary>
            Serves as a hash function for a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> type, suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/>.
            </summary>
            <returns>A String that represents the current NameAttribute.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.ObjectID">
            <summary>
            The object identifier of the attribute.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute.Value">
            <summary>
            The value of the attribute.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.Extension">
            <summary>
            Represents an encoded certificate extension. 
            </summary>
            <remarks>These extensions can be decoded with the Certificate.DecodeExtension() method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.Extension.#ctor(System.String,System.Boolean,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Extension"/> class.
            </summary>
            <param name="oid">The object identifier of the extension.</param>
            <param name="critical"><b>true</b> if it is a critical extension, <b>false</b> otherwise.</param>
            <param name="val">A byte array that contains the encoded extension.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Extension.ObjectID">
            <summary>
            The object identifier of the extension.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Extension.Critical">
            <summary>
            <b>true</b> if it is a critical extension, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.Extension.EncodedValue">
            <summary>
            A byte array that contains the encoded extension.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation">
            <summary>
            Defines the different keyset locations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation.Default">
            <summary>The private keys are stored in the default location.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation.LocalMachine">
            <summary>The private keys are stored under local machine and not the current user.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.KeysetLocation.CurrentUser">
            <summary>The private keys are stored under the current user and not the local machine even if the PFX BLOB specifies they should go into local machine.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult">
            <summary>
            Represents the status of an asynchronous certificate chain verification operation.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.#ctor(EnterpriseDT.Mentalis.Security.Certificates.CertificateChain,System.String,EnterpriseDT.Mentalis.Security.Certificates.AuthType,EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags,System.AsyncCallback,System.Object)">
            <summary>
            Initializes a new CertificateVerificationResult instance.
            </summary>
            <param name="chain">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> that has to be verified.</param>
            <param name="server">The server to which the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> has been issued.</param>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.</param>
            <param name="flags">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values.</param>
            <param name="callback">The delegate to call when the verification finishes.</param>
            <param name="asyncState">User-defined state data.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.VerificationCompleted(System.Exception,EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus)">
            <summary>
            Sets the WaitHandle to signalled and calls the appropriate delegate.
            </summary>
            <param name="error">An exception that may have occurred.</param>
            <param name="status">The status of the certificate chain.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_IsCompleted">
            <summary>Holds the value of the IsCompleted property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_AsyncState">
            <summary>Holds the value of the AsyncState property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Chain">
            <summary>Holds the value of the Chain property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Server">
            <summary>Holds the value of the Server property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Type">
            <summary>Holds the value of the Type property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Flags">
            <summary>Holds the value of the Flags property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_WaitHandle">
            <summary>Holds the value of the WaitHandle property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Callback">
            <summary>Holds the value of the Callback property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_HasEnded">
            <summary>Holds the value of the HasEnded property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_ThrowException">
            <summary>Holds the value of the ThrowException property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.m_Status">
            <summary>Holds the value of the Status property.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.CompletedSynchronously">
            <summary>
            Gets an indication of whether the asynchronous operation completed synchronously.
            </summary>
            <value>Always <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.IsCompleted">
            <summary>
            Gets a boolean value that indicates whether the operation has finished.
            </summary>
            <value>
            <b>true</b> if the verification of the chain has been completed, <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.AsyncWaitHandle">
            <summary>
            Gets a <see cref="T:System.Threading.WaitHandle"/> that is used to wait for an asynchronous operation to complete.
            </summary>
            <value>
            A WaitHandle that is used to wait for an asynchronous operation to complete.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.AsyncState">
            <summary>
            Gets a user-defined object that qualifies or contains information about an asynchronous operation.
            </summary>
            <value>
            A user-defined object that qualifies or contains information about an asynchronous operation.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Chain">
            <summary>
            Gets the associated certificate chain.
            </summary>
            <value>
            A <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> instance.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Server">
            <summary>
            Gets the associated server name.
            </summary>
            <value>
            A string that holds the server name.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Type">
            <summary>
            Gets the associated authentication type.
            </summary>
            <value>
            One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.AuthType"/> values.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Flags">
            <summary>
            Gets the associated verification flags.
            </summary>
            <value>
            One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.VerificationFlags"/> values.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.HasEnded">
            <summary>
            Gets or sets a value that indicates whether the user has called EndVerifyChain for this object.
            </summary>
            <value>
            <b>true</b> if the user has called EndVerifyChain, <b>false</b> otherwise.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.ThrowException">
            <summary>
            Gets an exception that has occurred while verifying the certificate chain or a null reference (<b>Nothing</b> in Visual Basic) if the verification succeeded.
            </summary>
            <value>
            A <see cref="T:System.Exception"/> instance.
            </value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.CertificateVerificationResult.Status">
            <summary>
            Gets the status of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/>.
            </summary>
            <value>
            One of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateStatus"/> values.
            </value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName">
            <summary>
            Represents a Relative Distinguished Name (RDN) of a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.#ctor(EnterpriseDT.Mentalis.Security.CertificateNameInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> class.
            </summary>
            <param name="cni">A <see cref="T:EnterpriseDT.Mentalis.Security.CertificateNameInfo"/> instance that's used to initialize the object.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> class.
            </summary>
            <param name="input">A pointer to a buffer that's used to initialize the object.</param>
            <param name="length">The length of the buffer.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">Could not decode the buffer.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Initialize(EnterpriseDT.Mentalis.Security.CertificateNameInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> class with a given <see cref="T:EnterpriseDT.Mentalis.Security.CertificateNameInfo"/> instance.
            </summary>
            <param name="cni">The CertificateNameInfo instance to initialize from.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateException">An error occurs while initializeing the DistinguishedName object.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Add(EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Adds a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to the end of the list.
            </summary>
            <param name="attribute">The NameAttribute to be added to the end of the list. </param>
            <returns>The index at which the value has been added.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Clear">
            <summary>
            Removes all elements from the list.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Contains(EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Determines whether an element is in the list.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to locate in the list.</param>
            <returns><b>true</b> if item is found in the list; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.IndexOf(EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Searches for the specified Object and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to locate in the list.</param>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, -1.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.IndexOf(System.String)">
            <summary>
            Searches for an Object with the specified Object identifier and returns the zero-based index of the first occurrence within the entire list.
            </summary>
            <param name="oid">The object identifier to search for.</param>
            <returns>The zero-based index of the first occurrence of value within the entire list, if found; otherwise, -1.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Insert(System.Int32,EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Inserts an element into the list at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to insert.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Remove(EnterpriseDT.Mentalis.Security.Certificates.NameAttribute)">
            <summary>
            Removes the first occurrence of a specific element from the list.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.NameAttribute"/> to remove from the list.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the list.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.m_List">
            <summary>
            The internal list instance.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set. </param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is equal to or greater than <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Count"/>.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName.Count">
            <summary>
            Gets the number of elements actually contained in the list.
            </summary>
            <value>The number of elements actually contained in the list.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList">
            <summary>
            Implements a collection of <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> instances.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.#ctor">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.#ctor(System.Collections.ArrayList)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> instance.
            </summary>
            <param name="state">The initial state of the collection.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="state"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Add(EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Adds a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> to the end of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> to be added to the end of the DistinguishedNameList.</param>
            <returns>The list index at which the value has been added.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">The list is read-only -or- the list has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Clear">
            <summary>
            Removes all elements from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <exception cref="T:System.NotSupportedException">The list is read-only -or- the list has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Contains(EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Determines whether an element is in the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The Object to locate in the DistinguishedNameList. The element to locate cannot be a null reference (<b>Nothing</b> in Visual Basic).</param>
            <returns><b>true</b> if item is found in the DistinguishedNameList; otherwise, <b>false</b>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.IndexOf(EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Searches for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> and returns the zero-based index of the first occurrence within the entire <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The DistinguishedName to locate in the DistinguishedNameList.</param>
            <returns>The zero-based index of the first occurrence of value within the entire DistinguishedNameList, if found; otherwise, -1.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Insert(System.Int32,EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Inserts an element into the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> at the specified index.
            </summary>
            <param name="index">The zero-based index at which <paramref name="value"/> should be inserted.</param>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> to insert. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is greater than <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">The DistinguishedNameList is read-only -or- the DistinguishedNameList has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Remove(EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="value">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedName"/> to remove from the DistinguishedNameList.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.NotSupportedException">The DistinguishedNameList is read-only -or- the DistinguishedNameList has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is greater than <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Count"/>.</exception>
            <exception cref="T:System.NotSupportedException">The DistinguishedNameList is read-only -or- the DistinguishedNameList has a fixed size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the entire <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> to a compatible one-dimensional <see cref="T:System.Array"/>, starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from DistinguishedNameList. The Array must have zero-based indexing.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="array"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="arrayIndex"/> is less than zero.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="array"/> is multidimensional -or- <paramref name="arrayIndex"/> is equal to or greater than the length of <paramref name="array"/> -or- the number of elements in the source DistinguishedNameList is greater than the available space from <paramref name="arrayIndex"/> to the end of the destination array.</exception>
            <exception cref="T:System.InvalidCastException">The type of the source DistinguishedNameList cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.GetEnumerator">
            <summary>
            Returns an enumerator for the entire <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <returns>An IEnumerator for the entire ArrayList.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Clone">
            <summary>
            Creates a shallow copy of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <returns>A shallow copy of the DistinguishedNameList.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.m_List">
            <summary>
            Holds the internal list.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> has a fixed size.
            </summary>
            <value><b>true</b> if the ArrayList has a fixed size; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> is read-only.
            </summary>
            <value><b>true</b> if the ArrayList is read-only; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <value>The element at the specified index.</value>
            <exception cref="T:System.ArgumentNullException"><paramref name="value"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index"/> is less than zero -or- <paramref name="index"/> is equal to or greater than <see cref="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Count"/>.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.Count">
            <summary>
            Gets the number of elements actually contained in the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <value>The number of elements actually contained in the DistinguishedNameList.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> is synchronized (thread-safe).
            </summary>
            <value><b>true</b> if access to the DistinguishedNameList is synchronized (thread-safe); otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/>.
            </summary>
            <value>An object that can be used to synchronize access to the DistinguishedNameList.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged">
            <summary>
            Accesses the managed version of the ARCFour algorithm. This class cannot be inherited.
            ARCFour is fully compatible with the RC4<sup>TM</sup> algorithm.
            </summary>
            <remarks>
            RC4 is a trademark of RSA Data Security Inc.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4">
            <summary>
            Represents the base class from which all implementations of the RC4 symmetric stream cipher must inherit.
            </summary>
            <remarks>
            RC4 is a trademark of RSA Data Security Inc.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.#ctor">
            <summary>
            Initializes a new instance of the RC4 class.
            </summary>
            <remarks>
            The default keysize is 128 bits.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.GenerateIV">
            <summary>
            This is a stub method.
            </summary>
            <remarks>Since the RC4 cipher doesn't use an Initialization Vector, this method will not do anything.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.GenerateKey">
            <summary>
            Generates a random Key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.Create">
            <summary>
            Creates an instance of the default cryptographic object used to perform the RC4 transformation.
            </summary>
            <returns>The instance of a cryptographic object used to perform the RC4 transformation.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.Create(System.String)">
            <summary>
            Creates an instance of the specified cryptographic object used to perform the RC4 transformation.
            </summary>
            <param name="AlgName">The name of the specific implementation of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4"/> to create.</param>
            <returns>A cryptographic object.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4.GetRNGCSP">
            <summary>
            Returns an <see cref="T:System.Security.Cryptography.RNGCryptoServiceProvider"/> instance.
            </summary>
            <returns>An RNGCryptoServiceProvider instance.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4.m_RNG">
            <summary>
            Holds the RNGCryptoServiceProvider object.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size of RC4 is always 8 bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.FeedbackSize">
            <summary>
            Gets or sets the feedback size of the cryptographic operation in bits.
            </summary>
            <value>This property always throws a <see cref="T:System.Security.Cryptography.CryptographicException"/>.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">This exception is always thrown.</exception>
            <remarks>RC4 doesn't use the FeedbackSize property.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>This property always returns a byte array of length one. The value of the byte in the array is always set to zero.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid instance.</exception>
            <remarks>RC4 doesn't use the IV property, however the property accepts IV's of up to one byte (RC4's <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.BlockSize"/>) in order to interoperate with software that has been written with the use of block ciphers in mind.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.LegalBlockSizes">
            <summary>
            Gets the block sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the block sizes supported by the algorithm.</value>
            <remarks>Only a block size of one byte is supported by the RC4 algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the key sizes supported by the algorithm.</value>
            <remarks>Only key sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
            <remarks>RC4 only supports the OFB cipher mode. See <see cref="T:System.Security.Cryptography.CipherMode"/> for a description of this mode.</remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cipher mode is not OFB.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm. This property always returns PaddingMode.None.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The padding mode is set to a padding mode other than PaddingMode.None.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.#ctor">
            <summary>
            Initializes a new instance of the ARCFourManaged class.
            </summary>
            <remarks>
            The default keysize is 128 bits.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4"/> decryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">This parameter is not used an should be set to a null reference, or to an array with zero or one bytes.</param>
            <returns>A symmetric ARCFour decryptor object.</returns>
            <remarks>This method decrypts an encrypted message created using the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.CreateEncryptor(System.Byte[],System.Byte[])"/> overload with the same signature.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4"/> encryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">This parameter is not used an should be set to a null reference, or to an array with zero or one bytes.</param>
            <returns>A symmetric ARCFour encryptor object.</returns>
            <remarks>Use the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.CreateDecryptor(System.Byte[],System.Byte[])"/> overload with the same signature to decrypt the result of this method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManaged"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform">
            <summary>
            Represents an ARCFour managed ICryptoTransform.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the ARCFourManagedTransform class.
            </summary>
            <param name="key">The key used to initialize the ARCFour state.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/>, <paramref name="inputCount"/> or <paramref name="outputOffset"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> or <paramref name="inputCount"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.Init">
            <summary>
            This method (re)initializes the cipher.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.Dispose">
            <summary>
            Disposes of the cryptographic parameters.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.Finalize">
            <summary>
            Finalizes the object.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Key">
            <summary>
            Holds the key that is used to initialize the ARCFour state.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_KeyLen">
            <summary>
            Holds the length of the key, in bytes.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Permutation">
            <summary>
            Holds state information.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Index1">
            <summary>
            Holds state information.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Index2">
            <summary>
            Holds state information.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.m_Disposed">
            <summary>
            Holds a boolean that indicates whether the class has been disposed of or not.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.ARCFourManagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType">
            <summary>
            Specifies the type of encryption method to use when protecting data.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType.LocalMachine">
            <summary>The encrypted data is associated with the local machine. Any user on the computer on which the data is encrypted can decrypt the data.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType.CurrentUser">
            <summary>The encrypted data is associated with the current user. Only a user with logon credentials matching those of the encrypter can decrypt the data.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm">
            <summary>
            Specifies the type of algorithm to be used when performing unmanaged cryptographic transformations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm.Rijndael128">
            <summary>The Rijndael algorithm with a key size of 128 bits.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm.Rijndael192">
            <summary>The Rijndael algorithm with a key size of 192 bits.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm.Rijndael256">
            <summary>The Rijndael algorithm with a key size of 256 bits.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm.RC4">
            <summary>The RC4 algorithm.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider">
            <summary>
            Specifies the type of CSP to be used when performing unmanaged cryptographic transformations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider.RsaFull">
            <summary>Microsoft's full RSA CSP.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider.RsaAes">
            <summary>Microsoft's full RSA CSP that supports the AES.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod">
            <summary>
            Specifies the type of transformation for a cryptographic operation.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod.Encrypt">
            <summary>Encrypt the data.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod.Decrypt">
            <summary>Decrypt the data.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC">
            <summary>
            The PUBLICKEYSTRUC structure, also known as the BLOBHEADER structure, indicates a key's BLOB type and the algorithm that the key uses. One of these structures is located at the beginning of the pbData member of every key BLOB.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC.bType">
            <summary>Key BLOB type. The only BLOB types currently defined are PUBLICKEYBLOB, PRIVATEKEYBLOB, SIMPLEBLOB, and PLAINTEXTBLOB. Other key BLOB types will be defined as needed. </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC.bVersion">
            <summary>Version number of the key BLOB format. This currently must always have a value of CUR_BLOB_VERSION (0x02).</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC.reserved">
            <summary>WORD reserved for future use. Must be set to zero.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.PUBLICKEYSTRUC.aiKeyAlg">
            <summary>Algorithm identifier for the key contained by the key BLOB. Some examples are CALG_RSA_SIGN, CALG_RSA_KEYX, CALG_RC2, and CALG_RC4.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider">
            <summary>
            The DataProtectionCryptoServiceProvider is a class that performs encryption and decryption on data without explicitly requiring a password.
            <br>There are two different types of encryption. The first type will associate the encrypted data with the logon credentials of the current user. Hence only a user with matching logon credentials can decrypt the data.</br>
            <br>The second type will associate the encrypted data with the local machine. Any user of a specific machine will be able to decrypt encrypted data under this scheme.</br>
            <br>This class cannot be inherited.</br>
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.#ctor">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider"/> instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.#ctor(System.Byte[])">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider"/> instance.
            </summary>
            <param name="optionalEntropy">A buffer holding any additional entropy that can be used during encryption and decryption.</param>
            <remarks>The same entropy must be provided during the encryption and decryption process. Otherwise, the decryption will fail.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType,System.Byte[])">
            <summary>
            Encrypts data according to a specified protection type.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType"/> values.</param>
            <param name="data">The data to encrypt.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>An array of encrypted bytes.</returns>
            <remarks>
            The number of the returned bytes will be larger than the number of input bytes.
            The method will use the entropy from the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Entropy"/> property.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType,System.Byte[],System.Byte[])">
            <summary>
            Encrypts data according to a specified protection type.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType"/> values.</param>
            <param name="data">The data to encrypt.</param>
            <param name="entropy">Additional entropy to use during the encyption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>An array of encrypted bytes.</returns>
            <remarks>The number of the returned bytes will be larger than the number of input bytes.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.ProtectData(EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType,System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Encrypts data according to a specified protection type.
            </summary>
            <param name="type">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.ProtectionType"/> values.</param>
            <param name="data">The data to encrypt.</param>
            <param name="offset">The zero-based position in the <i>data</i> parameter at which to begin encrypting.</param>
            <param name="size">The number of bytes to encrypt.</param>
            <param name="entropy">Additional entropy to use during the encryption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified <i>offset</i> or <i>size</i> exceeds the size of buffer.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>An array of encrypted bytes.</returns>
            <remarks>The number of the returned bytes will be larger than the number of input bytes.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.UnprotectData(System.Byte[])">
            <summary>
            Decrypts data that has been encrypted with one of the <c>ProtectData</c> methods.
            </summary>
            <param name="data">The data to decrypt.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified <i>offset</i> or <i>size</i> exceeds the size of buffer.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>The decrypted data.</returns>
            <remarks>
            The method will use the entropy from the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Entropy"/> property.
            The entropy used during decryption must be the same as the entropy used during encryption.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.UnprotectData(System.Byte[],System.Byte[])">
            <summary>
            Decrypts data that has been encrypted with one of the <c>ProtectData</c> methods.
            </summary>
            <param name="data">The data to decrypt.</param>
            <param name="entropy">Additional entropy to use during the encyption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>The decrypted data.</returns>
            <remarks>The entropy used during decryption must be the same as the entropy used during encryption.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.UnprotectData(System.Byte[],System.Int32,System.Int32,System.Byte[])">
            <summary>
            Decrypts data that has been encrypted with one of the <c>ProtectData</c> methods.
            </summary>
            <param name="data">The data to decrypt.</param>
            <param name="offset">The zero-based position in the <i>data</i> parameter at which to begin decrypting.</param>
            <param name="size">The number of bytes to decrypt.</param>
            <param name="entropy">Additional entropy to use during the decryption process. This parameter can be set to null.</param>
            <exception cref="T:System.ArgumentNullException"><i>data</i> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified <i>offset</i> or <i>size</i> exceeds the size of buffer.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs during the encryption process. Under some circumstances, Microsoft cryptographic service providers may not allow encryption when used in France. This may occur on down-level platforms such as Windows 98 and Windows NT 4.0, depending on the system's configuration and the version of the CSPs.</exception>
            <returns>The decrypted data.</returns>
            <remarks>The entropy used during decryption must be the same as the entropy used during encryption.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Dispose">
            <summary>
            Releases the unmanaged and managed resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Finalize">
            <summary>
            Finalizes the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.m_OptionalEntropy">
            <summary>
            Holds the entropy.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.m_Disposed">
            <summary>
            Holds a value that indicates whether the class has been disposed of or not.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.DataProtectionCryptoServiceProvider.Entropy">
            <summary>
            Holds additional entropy that can be used during the encryption and decryption process.
            </summary>
            <value>An array en entropy bytes.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.DHKeyGeneration">
            <summary>
            Defines the different Diffie-Hellman key generation methods.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.DHKeyGeneration.Random">
            <summary>
            Returns dynamically generated values for P and G. Unlike the Sophie Germain or DSA key generation methods,
            this method does not ensure that the selected prime offers an adequate security level.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.DHKeyGeneration.Static">
            <summary>
            Returns values for P and G that are hard coded in this library. Contrary to what your intuition may tell you,
            using these hard coded values is perfectly safe.
            The values of the P and G parameters are taken from 'The OAKLEY Key Determination Protocol' [RFC2412].
            This is the prefered key generation method, because it is very fast and very safe.
            Because this method uses fixed values for the P and G parameters, not all bit sizes are supported.
            The current implementation supports bit sizes of 768, 1024 and 1536.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.DHParameters">
            <summary>
            Represents the parameters of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.DHParameters.P">
            <summary>
            Represents the public <b>P</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.DHParameters.G">
            <summary>
            Represents the public <b>G</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.DHParameters.X">
            <summary>
            Represents the private <b>X</b> parameter of the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman">
            <summary>
            Defines a base class from which all Diffie-Hellman implementations inherit.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman.#ctor" -->
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman.CreateKeyExchange">
            <summary>
            When overridden in a derived class, creates the key exchange data. 
            </summary>
            <returns>The key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman.DecryptKeyExchange(System.Byte[])">
            <summary>
            When overridden in a derived class, extracts secret information from the key exchange data.
            </summary>
            <param name="keyEx">The key exchange data within which the secret information is hidden.</param>
            <returns>The secret information derived from the key exchange data.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman.ExportParameters(System.Boolean)">
            <summary>
            When overridden in a derived class, exports the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="includePrivate"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>The parameters for Diffie-Hellman.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman.ImportParameters(EnterpriseDT.Mentalis.Security.Cryptography.DHParameters)">
            <summary>
            When overridden in a derived class, imports the specified <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="parameters">The parameters for Diffie-Hellman.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman.FromXmlString(System.String)">
            <summary>
            Reconstructs a <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman"/> object from an XML string.
            </summary>
            <param name="xmlString">The XML string to use to reconstruct the DiffieHellman object.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException">One of the values in the XML string is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman.ToXmlString(System.Boolean)">
            <summary>
            Creates and returns an XML string representation of the current <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman"/> object.
            </summary>
            <param name="includePrivateParameters"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>An XML string encoding of the current DiffieHellman object.</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged">
            <summary>
            Implements the Diffie-Hellman algorithm.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.#ctor">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <remarks>The default length of the shared secret is 2048 bits.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Int32,System.Int32,EnterpriseDT.Mentalis.Security.Cryptography.DHKeyGeneration)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="bitlen">The length, in bits, of the public P parameter.</param>
            <param name="l">The length, in bits, of the secret value X. This parameter can be set to 0 to use the default size.</param>
            <param name="keygen">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DHKeyGeneration"/> values.</param>
            <remarks>The larger the bit length, the more secure the algorithm is. The default is 1024 bits. The minimum bit length is 128 bits.<br/>The size of the private value will be one fourth of the bit length specified.</remarks>
            <exception cref="T:System.ArgumentException">The specified bit length is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="p">The P parameter of the Diffie-Hellman algorithm. This is a public parameter.</param>
            <param name="g">The G parameter of the Diffie-Hellman algorithm. This is a public parameter.</param>
            <param name="x">The X parameter of the Diffie-Hellman algorithm. This is a private parameter. If this parameters is a null reference (<b>Nothing</b> in Visual Basic), a secret value of the default size will be generated.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> or <paramref name="g"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="p"/> or <paramref name="g"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.#ctor(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged"/> instance.
            </summary>
            <param name="p">The P parameter of the Diffie-Hellman algorithm.</param>
            <param name="g">The G parameter of the Diffie-Hellman algorithm.</param>
            <param name="l">The length, in bits, of the private value. If 0 is specified, the default value will be used.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="p"/> or <paramref name="g"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="l"/> is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="p"/> or <paramref name="g"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.CreateKeyExchange">
            <summary>
            Creates the key exchange data.
            </summary>
            <returns>The key exchange data to be sent to the intended recipient.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.DecryptKeyExchange(System.Byte[])">
            <summary>
            Extracts secret information from the key exchange data.
            </summary>
            <param name="keyEx">The key exchange data within which the shared key is hidden.</param>
            <returns>The shared key derived from the key exchange data.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the SymmetricAlgorithm and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.ExportParameters(System.Boolean)">
            <summary>
            Exports the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="includePrivateParameters"><b>true</b> to include private parameters; otherwise, <b>false</b>.</param>
            <returns>The parameters for <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman"/>.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.ImportParameters(EnterpriseDT.Mentalis.Security.Cryptography.DHParameters)">
            <summary>
            Imports the specified <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DHParameters"/>.
            </summary>
            <param name="parameters">The parameters for <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellman"/>.</param>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="P"/> or <paramref name="G"/> is a null reference (<b>Nothing</b> in Visual Basic) -or- <paramref name="P"/> is not a prime number.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.Finalize">
            <summary>
            Releases the unmanaged resources used by the SymmetricAlgorithm.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.KeyExchangeAlgorithm">
            <summary>
            Gets the name of the key exchange algorithm.
            </summary>
            <value>The name of the key exchange algorithm.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.DiffieHellmanManaged.SignatureAlgorithm">
            <summary>
            Gets the name of the signature algorithm.
            </summary>
            <value>The name of the signature algorithm.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.HMAC">
            <summary>
            Implements the HMAC keyed message authentication code algorithm.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.#ctor(System.Security.Cryptography.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.HMAC"/> class. This class cannot be inherited.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <remarks>A random key will be generated and used by the HMAC.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.#ctor(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.HMAC"/> class.
            </summary>
            <param name="hash">The underlying hash algorithm to use.</param>
            <param name="rgbKey">The key to use for the HMAC -or- a null reference (<b>Nothing</b> in Visual Basic).</param>
            <remarks>If <paramref name="rgbKey"/> is a null reference, the HMAC class will generate a random key.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="hash"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.Initialize">
            <summary>
            Initializes the HMAC.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="rgb">The input for which to compute the hash code. </param>
            <param name="ib">The offset into the byte array from which to begin using data. </param>
            <param name="cb">The number of bytes in the byte array to use as data. </param>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
            <exception cref="T:System.ObjectDisposedException">The HMAC instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.Dispose(System.Boolean)">
            <summary>
            Releases the resources used by the HMAC.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.Finalize">
            <summary>
            Finalizes the HMAC.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.m_HashAlgorithm">
            <summary>
            Holds the internal hash algorithm
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.m_KeyBuffer">
            <summary>
            Holds the key buffer.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.m_IsHashing">
            <summary>
            <b>true</b> if a hash operation is in prograss, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.m_IsDisposed">
            <summary>
            <b>true</b> if the object has been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.HMAC.HashSize">
            <summary>
            Gets the size of the computed hash code in bits.
            </summary>
            <value>The size of the computed hash code in bits.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2">
            <summary>
            Represents the abstract class from which all implementations of the MD2 hash algorithm inherit.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/>.
            </summary>
            <remarks>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/> hash algorithm.
            </summary>
            <returns>A new instance of the MD2 hash algorithm.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/> hash algorithm.
            </summary>
            <param name="hashName">The name of the specific implementation of MD2 to use.</param>
            <returns>A new instance of the specified implementation of MD2.</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider">
            <summary>
            Computes the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/> hash for the input data using the implementation provided by the cryptographic service provider (CSP).
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/> class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.Initialize">
            <summary>
            Initializes an instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The MD2CryptoServiceProvider instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2"/> hash algorithm for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ObjectDisposedException">The MD2CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.HashFinal">
            <summary>
            Returns the computed <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/> hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:System.ObjectDisposedException">The MD2CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.Finalize">
            <summary>
            Finalizes the MD2CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.m_Provider">
            <summary>
            Holds the handle of the crypto service provider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.m_Hash">
            <summary>
            Holds the hash handle.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider.m_Disposed">
            <summary>
            <b>true</b> if the object ahs been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4">
            <summary>
            Represents the abstract class from which all implementations of the MD4 hash algorithm inherit.
            </summary>
            <remarks>Warning: The MD4 algorithm is a broken algorithm. It should <i>only</i> be used for compatibility with older systems.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/>.
            </summary>
            <remarks>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/> hash algorithm.
            </summary>
            <returns>A new instance of the MD4 hash algorithm.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/> hash algorithm.
            </summary>
            <param name="hashName">The name of the specific implementation of MD4 to use.</param>
            <returns>A new instance of the specified implementation of MD4.</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider">
            <summary>
            Computes the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/> hash for the input data using the implementation provided by the cryptographic service provider (CSP).
            </summary>
            <remarks>Warning: The MD4 algorithm is a broken algorithm. It should <i>only</i> be used for compatibility with older systems.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider"/> class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.Initialize">
            <summary>
            Initializes an instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The MD4CryptoServiceProvider instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4"/> hash algorithm for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ObjectDisposedException">The MD4CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.HashFinal">
            <summary>
            Returns the computed <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider"/> hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:System.ObjectDisposedException">The MD4CryptoServiceProvider instance has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The data could not be hashed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.Finalize">
            <summary>
            Finalizes the MD4CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.m_Provider">
            <summary>
            Holds the handle of the crypto service provider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.m_Hash">
            <summary>
            Holds the hash handle.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.MD4CryptoServiceProvider.m_Disposed">
            <summary>
            <b>true</b> if the object ahs been disposed, <b>false</b> otherwise.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider">
            <summary>
            Defines a wrapper object to access the cryptographic service provider (CSP) version of the RC4 algorithm. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.GenerateIV">
            <summary>
            This is a stub method.
            </summary>
            <remarks>Since the RC4 cipher doesn't use an Initialization Vector, this method will not do anything.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.GenerateKey">
            <summary>
            Generates a random Key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric decryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm. </param>
            <param name="rgbIV">Not used in RC4. It can be a null reference or a byte array with a length less than 2.</param>
            <returns>A symmetric decryptor object.</returns>
            <remarks>This method decrypts an encrypted message created using the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])"/> overload with the same parameters.</remarks>
            <exception cref="T:System.ObjectDisposedException">The object is disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rgbKey"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric encryptor object with the specified Key.
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm. </param>
            <param name="rgbIV">Not used in RC4. It can be a null reference or a byte array with a length less than 2.</param>
            <returns>A symmetric encryptor object.</returns>
            <remarks>Use the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])"/> overload with the same parameters to decrypt the result of this method.</remarks>
            <exception cref="T:System.ObjectDisposedException">The object is disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="rgbKey"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException"></exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.CanUseUnmanaged(System.Int32)">
            <summary>
            Returns a boolean that indicates whether the unmanaged CSP can be used or not.
            </summary>
            <param name="keySize">The size of the required key (in bits).</param>
            <returns><b>true</b> if the unmanaged CSP can be used to encrypt and decrypt data, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Dispose">
            <summary>
            Releases all managed and unmanaged resources used by this class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Finalize">
            <summary>
            Finalizes the RC4CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_Managed">
            <summary>Holds a managed <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4"/> instance.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_Provider">
            <summary>Handle of the unmanaged RC4 CSP.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_MinLen">
            <summary>Minimal supported key length by the acquired provider.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_MaxLen">
            <summary>Maximal supported key length by the acquired provider.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.m_Disposed">
            <summary><b>true</b> if the class is disposed, <b>false</b> otherwise.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size of RC4 is always 8 bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.FeedbackSize">
            <summary>
            Gets or sets the feedback size of the cryptographic operation in bits.
            </summary>
            <value>This property always throws a <see cref="T:System.Security.Cryptography.CryptographicException"/>.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">This exception is always thrown.</exception>
            <remarks>RC4 doesn't use the FeedbackSize property.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>This property always returns a byte array of length one. The value of the byte in the array is always set to zero.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid instance.</exception>
            <remarks>RC4 doesn't use the IV property, however the property accepts IV's of up to one byte (RC4's <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.BlockSize"/>) in order to interoperate with software that has been written with the use of block ciphers in mind.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
            <value>The secret key to be used for the symmetric algorithm.</value>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the key to a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.KeySize">
            <summary>
            Gets or sets the size of the secret key used by the symmetric algorithm in bits.
            </summary>
            <value>The size of the secret key used by the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The key size is not valid.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.LegalBlockSizes">
            <summary>
            Gets the block sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the block sizes supported by the algorithm.</value>
            <remarks>Only a block size of one byte is supported by the RC4 algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the key sizes supported by the algorithm.</value>
            <remarks>Only key sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
            <remarks>RC4 only supports the OFB cipher mode. See <see cref="T:System.Security.Cryptography.CipherMode"/> for a description of this mode.</remarks>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cipher mode is not OFB.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4CryptoServiceProvider.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm. This property always returns PaddingMode.None.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The padding mode is set to a padding mode other than PaddingMode.None.</exception>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform">
            <summary>
            Represents an ARCFour managed ICryptoTransform.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform"/> class.
            </summary>
            <param name="key">The key used to initialize the RC4 state.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/>, <paramref name="inputCount"/> or <paramref name="outputOffset"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="inputOffset"/> or <paramref name="inputCount"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.Dispose">
            <summary>
            Disposes of the cryptographic parameters.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.Finalize">
            <summary>
            Finalizes the object.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.m_Key">
            <summary>
            Holds the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey"/> used for the cryptographic transformations.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <value>This property returns <b>true</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RC4UnmanagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <value>This property returns 1.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider">
            <summary>
            Accesses the unmanaged version of the <see cref="T:System.Security.Cryptography.Rijndael"/> algorithm. This class cannot be inherited.
            </summary>
            <remarks>
            This class will use the unmanaged implementation of the Rijndael algorithm, when possible. If the unmanaged Rijndael algorithm is not available, it will fall back to the <see cref="T:System.Security.Cryptography.RijndaelManaged"/> implementation.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider"/> class.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Dispose(System.Boolean)">
            <summary>
            Releases all unmanaged resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateIV">
            <summary>
            Generates a random initialization vector (IV) to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random IV when none is specified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateKey">
            <summary>
            Generates a random Key to be used for the algorithm.
            </summary>
            <remarks>Use this method to generate a random key when none is specified.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael"/> decryptor object with the specified <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Key"/> and initialization vector (<see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.IV"/>).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
            <returns>A symmetric Rijndael decryptor object.</returns>
            <remarks>This method decrypts an encrypted message created using the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])"/> overload with the same signature.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Creates a symmetric <see cref="T:System.Security.Cryptography.Rijndael"/> encryptor object with the specified <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Key"/> and initialization vector (<see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.IV"/>).
            </summary>
            <param name="rgbKey">The secret key to be used for the symmetric algorithm.</param>
            <param name="rgbIV">The IV to be used for the symmetric algorithm.</param>
            <returns>A symmetric Rijndael encryptor object.</returns>
            <remarks>Use the <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CreateDecryptor(System.Byte[],System.Byte[])"/> overload with the same signature to decrypt the result of this method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GetKeyType(System.Int32)">
            <summary>
            Converts a key size into an instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> enum.
            </summary>
            <param name="size">The size of the key, in bits.</param>
            <returns>One of the CryptoAlgorithm values.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException"><paramref name="size"/> is invalid.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CanUseUnmanaged(System.Int32,System.Int32,System.Security.Cryptography.PaddingMode)">
            <summary>
            Returns a value that indicates whether the unmanaged Rijndael implementation can be used with the specified parameters.
            </summary>
            <param name="keySize">A value that indicates the size of the key, in bits.</param>
            <param name="blockSize">A value that indicates the size of the blocks, in bits.</param>
            <param name="padding">One of the <see cref="T:System.Security.Cryptography.PaddingMode"/> values.</param>
            <returns><b>true</b> if the unmanaged implementation can be used, <b>false</b> otherwise.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.CanUseUnmanaged">
            <summary>
            Returns a value that indicates whether the unmanaged Rijndael implementation can be used with the current parameters.
            </summary>
            <returns><b>true</b> if the unmanaged implementation can be used, <b>false</b> otherwise.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.m_Managed">
            <summary>Holds a managed <see cref="T:System.Security.Cryptography.Rijndael"/> instance.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.m_Provider">
            <summary>Handle of the unmanaged AES CSP.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.m_Disposed">
            <summary>Holds a boolean that indicates whether this object has been disposed.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.BlockSize">
            <summary>
            Gets or sets the block size of the cryptographic operation in bits.
            </summary>
            <value>The block size in bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The block size is invalid.</exception>
            <remarks>The block size is the basic unit of data that can be encrypted or decrypted in one operation. Messages longer than the block size are handled as successive blocks; messages shorter than the block size must be padded with extra bits to reach the size of a block. Valid block sizes are determined by the symmetric algorithm used.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.FeedbackSize">
            <summary>
            Gets or sets the feedback size of the cryptographic operation in bits.
            </summary>
            <value>The feedback size in bits.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The feedback size is larger than the block size.</exception>
            <remarks>The feedback size determines the amount of data that is fed back to successive encryption or decryption operations. The feedback size cannot be greater than the block size.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.IV">
            <summary>
            Gets or sets the initialization vector (IV) for the symmetric algorithm.
            </summary>
            <value>The initialization vector.</value>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the IV to a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An attempt is made to set the IV to an invalid size.</exception>
            <remarks>If this property is a null reference (<b>Nothing</b> in Visual Basic) when it is used, <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateIV"/> is called to create a new random value.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Key">
            <summary>
            Gets or sets the secret key for the symmetric algorithm.
            </summary>
            <value>The secret key to be used for the symmetric algorithm.</value>
            <exception cref="T:System.ArgumentNullException">An attempt is made to set the key to a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>
            <para>The secret key is used both for encryption and for decryption. For a symmetric algorithm to be secure, the secret key must be known only to the sender and the receiver. The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.LegalKeySizes"/>.</para>
            <para>If this property is a null reference (<b>Nothing</b> in Visual Basic) when it is used, <see cref="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.GenerateKey"/> is called to create a new random value.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.KeySize">
            <summary>
            Gets or sets the size of the secret key used by the symmetric algorithm in bits.
            </summary>
            <value>The size of the secret key used by the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The key size is not valid.</exception>
            <remarks>The valid key sizes are specified by the particular symmetric algorithm implementation and are listed in <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.LegalKeySizes"/>.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.LegalBlockSizes">
            <summary>
            Gets the block sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the block sizes supported by the algorithm.</value>
            <remarks>Only block sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.LegalKeySizes">
            <summary>
            Gets the key sizes that are supported by the symmetric algorithm.
            </summary>
            <value>An array containing the key sizes supported by the algorithm.</value>
            <remarks>Only key sizes that match an entry in this array are supported by the symmetric algorithm.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Mode">
            <summary>
            Gets or sets the mode for operation of the symmetric algorithm.
            </summary>
            <value>The mode for operation of the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The cipher mode is not one of the CipherMode values.</exception>
            <remarks>See CipherMode for a description of specific modes.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.Padding">
            <summary>
            Gets or sets the padding mode used in the symmetric algorithm.
            </summary>
            <value>The padding mode used in the symmetric algorithm.</value>
            <exception cref="T:System.Security.Cryptography.CryptographicException">The padding mode is not one of the PaddingMode values.</exception>
            <remarks>Most plain text messages do not consist of a number of bytes that completely fill blocks. Often, there are not enough bytes to fill the last block. When this happens, a padding string is added to the text. For example, if the block length is 64 bits and the last block contains only 40 bits, 24 bits of padding are added. See <see cref="T:System.Security.Cryptography.PaddingMode"/> for a description of specific modes.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.KeyType">
            <summary>
            Gets the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> value that corresponds with the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelCryptoServiceProvider.KeySize"/> property.
            </summary>
            <returns>One of the CryptoAlgorithm values.</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform">
            <summary>
            Defines the basic operations of a unmanaged Rijndael cryptographic transformation.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.#ctor(EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm,EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod,System.Byte[],System.Byte[],System.Security.Cryptography.CipherMode,System.Int32,System.Security.Cryptography.PaddingMode)">
            <summary>
            Initializes a new instance of the RijndaelUnmanagedTransform class.
            </summary>
            <param name="algorithm">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <param name="method">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod"/> values.</param>
            <param name="key">The key to use.</param>
            <param name="iv">The IV to use.</param>
            <param name="mode">One of the <see cref="T:System.Security.Cryptography.CipherMode"/> values.</param>
            <param name="feedback">The feedback size of the cryptographic operation in bits.</param>
            <param name="padding">One of the <see cref="T:System.Security.Cryptography.PaddingMode"/> values.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> or <paramref name="outputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">One of the specified offsets or lengths is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while transforming the specified data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
            <exception cref="T:System.ObjectDisposedException">The object has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="inputBuffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The combination of offset and length is invalid.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while transforming the specified data.</exception>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.m_BlockSize">
            <summary>
            Holds the block size of the algorithm.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.m_Key">
            <summary>
            Holds the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey"/> used for the cryptographic transformations.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.m_Method">
            <summary>
            Holds the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoMethod"/> for this cryptographic operation.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
            <value><b>true</b> if the current transform can be reused; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
            <value><b>true</b> if multiple blocks can be transformed; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.InputBlockSize">
            <summary>
            Gets the input block size.
            </summary>
            <value>The size of the input data blocks in bytes.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RijndaelUnmanagedTransform.OutputBlockSize">
            <summary>
            Gets the output block size.
            </summary>
            <value>The size of the output data blocks in bytes.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160">
            <summary>
            Represents the abstract class from which all implementations of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash algorithm inherit.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/>.
            </summary>
            <remarks>You cannot create an instance of an abstract class. Application code will create a new instance of a derived class.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160.Create">
            <summary>
            Creates an instance of the default implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash algorithm.
            </summary>
            <returns>A new instance of the RIPEMD160 hash algorithm.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160.Create(System.String)">
            <summary>
            Creates an instance of the specified implementation of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash algorithm.
            </summary>
            <param name="hashName">The name of the specific implementation of RIPEMD160 to use.</param>
            <returns>A new instance of the specified implementation of RIPEMD160.</returns>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed">
            <summary>
            Computes the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash for the input data.
            </summary>
            <remarks>Based on the papers located at <a href="http://www.esat.kuleuven.ac.be/~cosicart/ps/AB-9601/">the RIPEMD homepage</a>.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed"/> class. This class cannot be inherited.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.Initialize">
            <summary>
            Initializes an instance of <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">The RIPEMD160Managed instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash algorithm for computing the hash.
            </summary>
            <param name="array">The array of data bytes.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the array to use as data.</param>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed"/> instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.HashFinal">
            <summary>
            Returns the computed <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160"/> hash as an array of bytes after all data has been written to the object.
            </summary>
            <returns>The computed hash value.</returns>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed"/> instance has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.MD2CryptoServiceProvider"/> and optionally releases the managed resources.
            </summary>
            <param name="disposing"><b>true</b> to release both managed and unmanaged resources; <b>false</b> to release only unmanaged resources.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.Finalize">
            <summary>
            Finalizes the MD2CryptoServiceProvider.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_ExtraData">
            <summary>
            A buffer that holds the extra data.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_X">
            <summary>
            The X vectors.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_HashValue">
            <summary>
            The current value of the hash.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_Length">
            <summary>
            The nubver of bytes hashed.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.m_Disposed">
            <summary>
            A boolean that indicates whether the object has been disposed or not.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.RIPEMD160Managed.InputBlockSize">
            <summary>
            When overridden in a derived class, gets the input block size.
            </summary>
            <value>The input block size.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey">
            <summary>
            Represents a symmetric key.
            </summary>
            <remarks>
            Large parts of this code are based on the article available at http://support.microsoft.com/default.aspx?scid=KB;en-us;q228786
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="ownsProvider"><b>true</b> if this SymmetricKey owns the provider, <b>false</b> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider"/> values.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs when acquiring the cryptographic context.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">The handle of a CSP.</param>
            <param name="key">The handle of a symmetric key.</param>
            <param name="ownsProvider"><b>true</b> if this SymmetricKey owns the provider, <b>false</b> otherwise.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider,EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm)">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider"/> values.</param>
            <param name="algorithm">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs when generating a new key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.#ctor(EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider,EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm,System.Byte[])">
            <summary>
            Initializes a new instance of the SymmetricKey class.
            </summary>
            <param name="provider">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoProvider"/> values.</param>
            <param name="algorithm">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <param name="buffer">An array of bytes that contains the key to import.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.KeyFromBytes(System.Int32,EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm,System.Byte[])">
            <summary>
            Imports a specified key.
            </summary>
            <param name="provider">The handle of the CSP.</param>
            <param name="algorithm">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Cryptography.CryptoAlgorithm"/> values.</param>
            <param name="key">The key to import.</param>
            <returns>The handle of the symmetric key.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while importing the specified key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.ToBytes">
            <summary>
            Returns the bytes that represent the symmetric key.
            </summary>
            <returns>An array of bytes.</returns>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.ToString">
            <summary>
            Returns a string representation of the symmetric key.
            </summary>
            <returns>A string that represents the key in hexadecimal notation.</returns>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Dispose">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Finalize">
            <summary>
            Releases all unmanaged resources.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.CreateExponentOfOneKey">
            <summary>
            Creates an exponent-of-one key.
            </summary>
            <returns>The handle of a exponent-of-one key.</returns>
            <remarks>An exponent-of-one key is a public/private key pair that doesn't encrypt data.</remarks>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while creating the key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.CreateStaticExponentOfOneKey">
            <summary>
            Statically creates an exponent-of-one key.
            </summary>
            <returns>The handle of a exponent-of-one key.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while creating the key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.CreateDynamicExponentOfOneKey">
            <summary>
            Dynamically creates an exponent-of-one key.
            </summary>
            <returns>The handle of a exponent-of-one key.</returns>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while creating the key.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.GetPaddingMode(System.Security.Cryptography.PaddingMode)">
            <summary>
            Converts a <see cref="T:System.Security.Cryptography.PaddingMode"/> value to a CryptoAPI constant.
            </summary>
            <param name="mode">The PaddingMode to covnert.</param>
            <returns>The CryptoAPI constant associated with the specified padding mode.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_Handle">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Handle"/> property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_Provider">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Provider"/> property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_ExponentOfOne">
            <summary>Holds the exponent-of-one handle.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_PaddingMode">
            <summary>Holds the value of the <see cref="T:System.Security.Cryptography.PaddingMode"/> property.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.m_OwnsProvider">
            <summary><b>true</b> if this SymmetricKey owns the provider, <b>false</b> otherwise.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.ExponentOfOne">
            <summary>
            A byte representation of an exponent-of-one key.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Provider">
            <summary>
            Gets the handle of the CSP of the SymmetricKey.
            </summary>
            <value>The handle of the CSP.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Handle">
            <summary>
            Gets the handle of the SymmetricKey.
            </summary>
            <value>The handle of the key.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.IV">
            <summary>
            Gets or sets the initialization vector associated with the symmetric key.
            </summary>
            <value>The initialization vector.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.ArgumentNullException">The initialization vector is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while getting or setting the IV.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Mode">
            <summary>
            Gets or sets the cipher mode associated with the symmetric key.
            </summary>
            <value>The cipher mode.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while getting or setting the cipher mode.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.FeedbackSize">
            <summary>
            Gets or sets the feedback size associated with the symmetric key.
            </summary>
            <value>The feedback size.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while getting or setting the feedback size.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Cryptography.SymmetricKey.Padding">
            <summary>
            Gets or sets the padding mode associated with the symmetric key.
            </summary>
            <value>One of the <see cref="T:System.Security.Cryptography.PaddingMode"/> values.</value>
            <exception cref="T:System.ObjectDisposedException">The SymmetricKey has been disposed.</exception>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while setting the padding mode.</exception>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs">
            <summary>
            Provides data for the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler"/> event.
            </summary>
            <remarks>
            This class is used when a CertRequestEventHandler delegate is called. Application code can set a <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.Certificate"/> instance that will then be subseuently used by the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> to send to the peer.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.#ctor">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs"/> instance.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.#ctor(EnterpriseDT.Mentalis.Security.Certificates.Certificate)">
            <summary>
            Initializes a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs"/> instance.
            </summary>
            <param name="cert">A <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.Certificate"/> instance.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.m_Certificate">
            <summary>
            Holds the Certificate instance.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.Certificate">
            <summary>
            Gets or sets the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs.Certificate"/> that should be sent to the remote host.
            </summary>
            <value>A Certificate instance.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream">
            <summary>
            Provides the underlying stream of data for secure network access.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data. </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- the SocketType property of <paramref name="socket"/> is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket,System.Boolean)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data. </param>
            <param name="ownsSocket"><b>true</b> if the socket will be owned by this NetworkStream instance; otherwise, <b>false</b>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- the SocketType property of <paramref name="socket"/> is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket,System.IO.FileAccess)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data. </param>
            <param name="access">One of the <see cref="T:System.IO.FileAccess"/> values that sets the CanRead and CanWrite properties of the SecureNetworkStream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- The SocketType property of socket is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureSocket,System.IO.FileAccess,System.Boolean)">
            <summary>
            Creates a new instance of the SecureNetworkStream class for the specified <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="socket">The SecureSocket that provides the network data.</param>
            <param name="access">One of the FileAccess values that sets the CanRead and CanWrite properties of the SecureNetworkStream.</param>
            <param name="ownsSocket"><b>true</b> if the socket will be owned by this SecureNetworkStream instance; otherwise, <b>false</b>.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="socket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="socket"/> is not connected -or- the SocketType property of socket is not SocketType.Stream.</exception>
            <exception cref="T:System.IO.IOException"><paramref name="socket"/> is a nonblocking socket.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Flush">
            <summary>
            Flushes data from the stream. This method is reserved for future use.
            </summary>
            <remarks>
            The Flush method implements the Stream.Flush method but, because SecureNetworkStream is not buffered, has no effect on secure network streams. Calling the Flush method will not throw an exception.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of the stream to the given value. This method always throws a NotSupportedException.
            </summary>
            <param name="offset">This parameter is not used.</param>
            <param name="origin">This parameter is not used.</param>
            <returns>The position in the stream. This method is not supported.</returns>
            <exception cref="T:System.NotSupportedException">The Seek method is not supported.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream. This method always throws a NotSupportedException.
            </summary>
            <param name="value">This parameter is not used.</param>
            <exception cref="T:System.NotSupportedException">The SetLength method is not supported.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads data from the stream.
            </summary>
            <param name="buffer">The location in memory to store data read from the stream.</param>
            <param name="offset">The location in the buffer to begin storing the data to.</param>
            <param name="size">The number of bytes to read from the stream.</param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while reading from the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">The data to write to the stream.</param>
            <param name="offset">The location in the buffer to start writing data from.</param>
            <param name="size">The number of bytes to write to the stream.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.ChangeSecurityProtocol(EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions,System.Boolean)">
            <summary>
            Changes the security protocol. This method can only be used to 'upgrade' a connection from no-security to either SSL or TLS.
            </summary>
            <param name="options">The new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> parameters.</param>
            <param name="synchronized">Flag indicating whether the call is synchronous or asynchronous.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while changing the security protocol.</exception>
            <remarks>
            Programs should only call this method if there is no active <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Read(System.Byte[],System.Int32,System.Int32)"/> or <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Write(System.Byte[],System.Int32,System.Int32)"/>!
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Close">
            <summary>
            Closes the stream and optionally closes the underlying <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <remarks>
            The Close method frees resources used by the SecureNetworkStream instance and, if the SecureNetworkStream owns the underlying socket, closes the underlying socket.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read from a stream.
            </summary>
            <param name="buffer">The location in memory that stores the data from the stream.</param>
            <param name="offset">The location in buffer to begin storing the data to.</param>
            <param name="size">The maximum number of bytes to read.</param>
            <param name="callback">The delegate to call when the asynchronous call is complete.</param>
            <param name="state">An object containing additional information supplied by the client.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while reading from the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.EndRead(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous read.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> representing an asynchronous call. </param>
            <returns>The number of bytes read from the stream.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.IO.IOException">There is a failure while reading from the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous write to a stream.
            </summary>
            <param name="buffer">The location in memory that holds the data to send.</param>
            <param name="offset">The location in buffer to begin sending the data.</param>
            <param name="size">The size of buffer.</param>
            <param name="callback">The delegate to call when the asynchronous call is complete.</param>
            <param name="state">An object containing additional information supplied by the client.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified <paramref name="offset"/> or <paramref name="size"/> exceeds the size of <paramref name="buffer"/>.</exception>
            <exception cref="T:System.IO.IOException">There is a failure while writing to the network.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.OnBytesSent(System.IAsyncResult)">
            <summary>
            Called when the bytes have been sent to the remote server
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.OnWriteComplete(System.Exception)">
            <summary>
            Called when all bytes have been sent to the remote host, or when a network error occurred.
            </summary>
            <param name="e">The error that occurred.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.EndWrite(System.IAsyncResult)">
            <summary>
            Handles the end of an asynchronous write.
            </summary>
            <param name="asyncResult">The <see cref="T:System.IAsyncResult"/> representing the asynchronous call.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="asyncResult"/> parameter was not returned by a call to the BeginWrite method.</exception>
            <exception cref="T:System.IO.IOException">An error occurs while writing to the network.</exception>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.log">
            <summary>Logger</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_WriteResult">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.WriteResult"/> property</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_OwnsSocket">
            <summary><b>true</b> if the SecureNetworkStream owns the SecureSocket, <b>false</b> otherwise.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_CanRead">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanRead"/> property</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_CanWrite">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanWrite"/> property</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.m_Socket">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Socket"/> property</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanRead">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
            <value><b>true</b> if data can be written to the stream; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanWrite">
            <summary>
            Gets a value that indicates whether the current stream supports writing.
            </summary>
            <value><b>true</b> if data can be written to the stream; otherwise, <b>false</b>.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.CanSeek">
            <summary>
            Gets a value indicating whether the stream supports seeking. This property always returns false.
            </summary>
            <value><b>false</b> to indicate that SecureNetworkStream cannot seek a specific location in the stream.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Length">
            <summary>
            The length of the data available on the stream. This property always throws a NotSupportedException.
            </summary>
            <value>The length of the data available on the stream. This property is not supported.</value>
            <exception cref="T:System.NotSupportedException">The Length property is not supported.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Position">
            <summary>
            Gets or sets the current position in the stream. This property always throws a NotSupportedException.
            </summary>
            <value>The current position in the stream. This property is not supported.</value>
            <exception cref="T:System.NotSupportedException">The Position property is not supported.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.Socket">
            <summary>
            Gets the underlying network connection.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> that represents the underlying network connection.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.WriteResult">
            <summary>
            Holds the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.TransferItem"/> object returned by BeginWrite.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.TransferItem"/> object.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureNetworkStream.DataAvailable">
            <summary>
            Gets a value indicating whether data is available on the stream to be read.
            </summary>
            <value><b>true</b> if data is available on the stream to be read; otherwise, <b>false</b>.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket">
            <summary>
            Implements the Berkeley sockets interface and optionally encrypts/decrypts transmitted data.
            </summary>
            <remarks>Any public static (Shared in Visual Basic) members of this type are safe for multithreaded operations. Any instance members are not guaranteed to be thread safe.</remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket">
            <summary>
            Implements the Berkeley sockets interface.
            </summary>
            <remarks>
            The VirtualSocket class implements exactly the same methods as the System.Net.Sockets.Socket class,
            however all these methods are marked as virtual so they can be overridden in derived classes.
            In addition to the constructor specified by the Socket class, the VirtualSocket class also
            has a constructor that accepts an already created Socket; this can be very useful is you have
            to override the Accept and BeginAccept/EndAccept methods in a derived class.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType)">
            <summary>
            Initializes a new instance of the VirtualSocket class.
            </summary>
            <param name="addressFamily">One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ProtocolType"/> values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of <paramref name="addressFamily"/>, <paramref name="socketType"/>, and <paramref name="protocolType"/> results in an invalid socket.</exception>
            <remarks>The <paramref name="addressFamily"/> parameter specifies the addressing scheme that the VirtualSocket uses, the <paramref name="socketType"/> parameter specifies the type of the VirtualSocket, and <paramref name="protocolType"/> specifies the protocol used by the VirtualSocket. The three parameters are not independent. Some address families restrict which protocols can be used with them, and often the socket type is implicit in the protocol. If the combination of address family, socket type, and protocol type results in an invalid VirtualSocket, a SocketException is thrown.<br>The AddressFamily enumeration defines the valid address families, the SocketType enumeration defines the valid socket types, and the ProtocolType enumeration defines the valid protocol types.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the VirtualSocket class.
            </summary>
            <param name="internalSocket">The accepted socket.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="internalSocket"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Accept">
            <summary>
            Creates a new VirtualSocket to handle an incoming connection request.
            </summary>
            <returns>A VirtualSocket to handle an incoming connection request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The Accept method extracts the first connection request from the queue of pending requests and creates a new VirtualSocket to handle it.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.InternalAccept">
            <summary>
            Creates a new Socket to handle an incoming connection request.
            </summary>
            <returns>A Socket to handle an incoming connection request.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket is invalid.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The InternalAccept method extracts the first connection request from the queue of pending requests and creates a new <see cref="T:System.Net.Sockets.Socket"/> to handle it.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to create a new VirtualSocket to accept an incoming connection request.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request. </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous VirtualSocket creation.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginAccept method starts an asynchronous request to create a VirtualSocket to handle an incoming connection request. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndAccept(System.IAsyncResult)"/> method to retrieve the VirtualSocket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An EndPoint that represents the remote device.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request. </param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginConnect method starts an asynchronous request for a remote host connection. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndConnect(System.IAsyncResult)"/> method to return the VirtualSocket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected VirtualSocket.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">VirtualSocket has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is outside the bounds of buffer or size is either smaller or larger than the buffer size.</exception>
            <remarks>The BeginReceive method starts asynchronously reading data from a VirtualSocket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndReceive(System.IAsyncResult)"/> method to return the data read from the VirtualSocket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceiveInternal(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected VirtualSocket.
            This method triggers the Receiving event.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">VirtualSocket has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="offset"/> is outside the bounds of buffer or size is either smaller or larger than the buffer size.</exception>
            <remarks>The BeginReceive method starts asynchronously reading data from a VirtualSocket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndReceive(System.IAsyncResult)"/> method to return the data read from the VirtualSocket.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a specified network device.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the source of the data.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br>
            <br><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</br><br>-or-</br><br><paramref name="offset"/> is outside the bounds of buffer.</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected VirtualSocket.
            </summary>
            <param name="buffer">The data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginSend method starts asynchronously sending data through a socket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSend(System.IAsyncResult)"/> method to complete sending data.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSendInternal(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected VirtualSocket.
            This method triggers the Sending event.
            </summary>
            <param name="buffer">The data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginSend method starts asynchronously sending data through a socket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSend(System.IAsyncResult)"/> method to complete sending data.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a specific remote host.
            </summary>
            <param name="buffer">The data to send. </param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send. </param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device. </param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate. </param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The BeginSendTo method starts asynchronously sending data through a socket. You must create a callback method that implements the AsyncCallback delegate. This callback method should use the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSendTo(System.IAsyncResult)"/> method to complete sending data.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Bind(System.Net.EndPoint)">
            <summary>
            Associates a VirtualSocket with a local endpoint.
            </summary>
            <param name="localEP">The local <see cref="T:System.Net.EndPoint"/> to associate with the VirtualSocket.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="localEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>If you want to use a specific local endpoint, you can call the Bind method before you call the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Listen(System.Int32)"/> or <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Connect(System.Net.EndPoint)"/> methods.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Close">
            <summary>
            Forces a VirtualSocket connection to close.
            </summary>
            <remarks><para>The <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Connected"/> property is set to <b>false</b> when the socket is closed.</para><para>The application should call <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Shutdown(System.Net.Sockets.SocketShutdown)"/> before calling Close to ensure that all pending data is sent or received before the VirtualSocket is closed.</para></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The Connect method establishes a network connection between <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.LocalEndPoint"/> and the device identified by <paramref name="remoteEP"/>. Once the connection has been made, you can send data to the remote device with one of the <c>Send</c> methods, or receive data from the remote device with one of the <c>Receive</c> methods.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to create a new VirtualSocket to accept an incoming connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A VirtualSocket to handle the incoming connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginAccept(System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The EndAccept method completes a request for a connection that was started with the BeginAccept method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.InternalEndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to create a new <see cref="T:System.Net.Sockets.Socket"/> to accept an incoming connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A VirtualSocket to handle the incoming connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginAccept(System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The InternalEndAccept method completes a request for a connection that was started with the InternalBeginAccept method.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user-defined data.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndConnect was previously called for the asynchronous connection.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from BeginConnect or the callback delegate used as an input parameter to BeginConnect as the asyncresult parameter. The EndConnect method blocks.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndReceive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndReceive was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginReceive as the asyncResult parameter. The EndReceive method blocks until the read ends.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndReceiveFrom(System.IAsyncResult,System.Net.EndPoint@)">
            <summary>
            Ends a pending asynchronous read from a specific endpoint.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <param name="endPoint">The source <see cref="T:System.Net.EndPoint"/>.</param>
            <returns>If successful, the number of bytes received. If unsuccessful, returns 0 if the connection is closed by the remote host.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the BeginReceiveFrom method.</exception>
            <exception cref="T:System.InvalidOperationException">EndReceiveFrom was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginReceiveFrom. as the asyncResult parameter. The EndReceiveFrom method frees any resources allocated by the BeginReceiveFrom method. The EndReceiveFrom method blocks until read ends.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>If successful, the number of bytes sent to the VirtualSocket; otherwise, an invalid VirtualSocket error.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndSend was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginSend as the asyncResult parameter. The EndSend method frees any resources allocated by the BeginSend method. The EndSend method blocks until the send ends.<br>The EndSend method frees any resources allocated by the BeginSend method.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.EndSendTo(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send to a specific location.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data .</param>
            <returns>If successful, the number of bytes sent; otherwise, an invalid VirtualSocket error.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException">EndSendTo was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks><br>To maintain the asynchronous nature of the operation, call this method from the callback delegate. You can pass either the <see cref="T:System.IAsyncResult"/> returned from <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint,System.AsyncCallback,System.Object)"/> or the callback delegate used as an input parameter to BeginSendTo as the asyncResult parameter. The EndSendTo method frees any resources allocated by the BeginSendTo method. The EndSendTo method blocks until send is complete.</br><br>The EndSendTo method frees any resources allocated by the BeginSendTo method.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.GetHashCode">
            <summary>
            This member overrides Object.GetHashCode.
            </summary>
            <returns>A hash code for the current VirtualSocket.</returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName)">
            <summary>
            Gets the value of a specified socket option.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <returns>The value of the option. When the optionName parameter is set to Linger the return value is an instance of the LingerOption. When optionName is set to AddMembership or DropMembership, the return value is an instance of the MulticastOption. When optionName is any other value, the return value is an integer.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>VirtualSocket options determine the behavior of the current instance. Upon successful completion, GetSocketOption returns an object describing the requested option. For example, if you specify Linger as the option, a LingerOption is returned.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>
            Gets the specified VirtualSocket option setting.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="optionValue">The buffer that is to receive the option setting.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Socket options determine the behavior of the current Socket. Upon successful completion of this method, the array specified by the optionValue parameter contains the value of the specified Socket option. When the length of the optionValue array is smaller than the number of bytes required to store the value of the specified Socket option, a <see cref="T:System.Net.Sockets.SocketException"/> is thrown.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.GetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Returns the value of the specified Socket option and returns in an array.
            </summary>
            <param name="optionLevel">One of the <see cref="T:System.Net.Sockets.SocketOptionLevel"/> values.</param>
            <param name="optionName">One of the <see cref="T:System.Net.Sockets.SocketOptionName"/> values.</param>
            <param name="optionLength">The length, in bytes, of the expected return value.</param>
            <returns>An array of bytes containing the value of the socket option.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The optionLength parameter sets the maximum size of the returned byte array. If the option value requires fewer bytes, the array will contain only that many bytes. If the option value requires more bytes, a SocketException will be thrown.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.IOControl(System.Int32,System.Byte[],System.Byte[])">
            <summary>
            Sets low-level operating modes for the VirtualSocket.
            </summary>
            <param name="ioControlCode">The control code of the operation to perform.</param>
            <param name="optionInValue">The input data required by the operation.</param>
            <param name="optionOutValue">The output data returned by the operation.</param>
            <returns>The number of bytes in optionOutValue parameter.</returns>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>The IOControl method provides low-level access to the operating system socket underlying the current instance of the VirtualSocket class. For more information about IOControl, see the WSAIoct documentation in MSDN.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Listen(System.Int32)">
            <summary>
            Places a VirtualSocket in a listening state.
            </summary>
            <param name="backlog">The Maximum length of the queue of pending connections.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>In a listening state, the VirtualSocket will poll for incoming connection attempts. If you want to listen using a specific network interface on a specific port, you must call the Bind method first.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the VirtualSocket.
            </summary>
            <param name="microSeconds">The time to wait for a response, in microseconds.</param>
            <param name="mode">One of the <see cref="T:System.Net.Sockets.SelectMode"/> values.</param>
            <returns>See the Socket documentation for the return values.</returns>
            <exception cref="T:System.NotSupportedException">The mode parameter is not one of the SelectMode values.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Set microSeconds parameter to a negative integer if you would like to wait indefinitely for a response.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer. The offset defaults to 0, size defaults to the buffer length, and the socketFlags value defaults to None.</para>
            <para>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values. </param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer and the necessary SocketFlags. The offset defaults to 0, and the size defaults to the buffer length.</para>
            <para>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer, the number of bytes you want to send, and the necessary SocketFlags. The offset defaults to 0.</para>
            <para>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected VirtualSocket in a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="offset">The location in buffer to store the received data. </param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>The Blocking determines the behavior of this method when no incoming data is available. When false, a SocketException is thrown. When true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all the data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para><b>Note</b>   If you specify the OutOfBand flag as the socketFlags parameter, and the Socket is configured for in-line reception of out-of-band (OOB) data (using the OutOfBandInline option) and OOB data is available, then only OOB data is returned. When the Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but is not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer, and EndPoint representing the remote host. The offset defaults to 0. The size defaults to the buffer length and the socketFlags value defaults to None.</para>
            <para>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer, the necessary SocketFlags, and the EndPoint representing the remote host. The offset defaults to 0. The size defaults to the buffer length.</para>
            <para>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>This overload only requires you to provide a receive buffer, the number of bytes you want to receive, the necessary SocketFlags, and the EndPoint representing the remote host. The offset defaults to 0.</para>
            <para>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ReceiveFrom(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint@)">
            <summary>
            Receives a datagram in a specific location in the data buffer and stores the endpoint.
            </summary>
            <param name="buffer">The storage location for received data.</param>
            <param name="offset">The position in the buffer parameter to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/>, passed by reference, that represents the remote server.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>If you use a connectionless protocol, the remoteEP parameter contains the EndPoint associated with the Socket that sent the data. If you use a connection-oriented protocol, remoteEP is left unchanged. You must set the LocalEndPoint property before calling this method. When no incoming data is available, and the Blocking property is false, a SocketException is thrown. When Blocking is true, this method blocks and waits for data to arrive. For Stream Socket types, if the remote Socket was shut down gracefully, and all data was received, this method immediately returns zero, regardless of the blocking state.</para>
            <para>If you are using a message-oriented Socket, and the message is larger than the size of the buffer parameter, then buffer is filled with the first part of the message, and a SocketException is thrown. With unreliable protocols the excess data is lost; with reliable protocols, the data is retained by the service provider.</para>
            <para>When the OutOfBand flag is specified as the socketFlags parameter and the Socket is configured for in-line reception of out-of-band (OOB) data (using OutOfBandInline) and OOB data is available, only OOB data is returned. When the SocketFlags. Peek flag is specified as the socketFlags parameter, available data is copied into the receive buffer but not removed from the system buffer.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send. This overload only requires you to provide a data buffer. The offset defaults to 0, the size defaults to the buffer length, and SocketFlags value defaults to None.</para>
            <para>You must set the LocalEndPoint property of the current instance before calling this method.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send.</para>
            <para>This overload only requires you to provide a data buffer and SocketFlags. The offset defaults to 0, and the size parameter defaults to the buffer length.</para>
            <para>You must set the LocalEndPoint property of the current instance before calling this method.</para>
            <para>If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent.</para>
            <para>If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks.</para>
            <para>If you are using a message-oriented Socket, and the size of the buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send. </param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send.</para>
            <para>This overload only requires you to provide a data buffer, SocketFlags, and the number bytes to be sent. The offset defaults to 0.</para>
            <para>You must set the LocalEndPoint property of the current instance before calling this method.</para>
            <para>If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent.</para>
            <para>If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks.</para>
            <para>If you are using a message-oriented Socket, and the size of the buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected VirtualSocket, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send. </param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values. </param>
            <returns>The number of bytes sent to the VirtualSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Use Send for connection-oriented protocols only. For connectionless protocols, either use SendTo or call Connect first, and then call Send.</para>
            <para>This overload gives you the flexibility to specify the Send starting position in the data buffer, the number bytes you are sending, and the necessary SocketFlags.</para>
            <para>You must set the LocalEndPoint property of the current instance before calling this method.</para>
            <para>If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent.</para>
            <para>If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks.</para>
            <para>If you are using a message-oriented Socket, and the size of the buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>
            If you are using a connection-oriented protocol or a connected Socket 
            using a connectionless protocol, remoteEP overrides the endpoint specified 
            in RemoteEndPoint. If you are using an unconnected Socket with a 
            connectionless protocol, this method sets the LocalEndPoint property of the 
            current instance to a value determined by the protocol. You must subsequently 
            receive data on the LocalEndPoint. This overload only requires you to provide 
            a data buffer, and the remote EndPoint. The offset defaults to 0. The size 
            defaults to the buffer length, and SocketFlags value defaults to None.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the SocketFlags values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint.</para>
            <para>This overload only requires you to provide a data buffer, SocketFlags, and the remote EndPoint. The offset defaults to 0, and size defaults to the buffer length.</para>
            <para>Note   If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent. If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks. If you are using a message-oriented Socket, and the size of buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException. If you are using a connection-oriented Socket, remoteEp is ignored.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint.</para>
            <para>This overload only requires you to provide a data buffer, SocketFlags, the number bytes to be sent and the remote EndPoint. The offset defaults to 0.</para>
            <para>Note   If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent. If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks. If you are using a message-oriented Socket, and the size of buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException. If you are using a connection-oriented Socket, remoteEp is ignored.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SendTo(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Net.EndPoint)">
            <summary>
            Sends data to a specific endpoint, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="remoteEP">The <see cref="T:System.Net.EndPoint"/> representing the destination location for the data.</param>
            <returns>The number of bytes sent.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).<br>-or-</br><br>The remoteEP parameter is a null reference (Nothing).</br></exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>If you are using a connection-oriented protocol or a connected Socket using a connectionless protocol, remoteEP overrides the endpoint specified in RemoteEndPoint. If you are using an unconnected Socket with a connectionless protocol, this method sets the LocalEndPoint property of the current instance to a value determined by the protocol. You must subsequently receive data on the LocalEndPoint.</para>
            <para><b>Note</b>   If you specify the DontRoute flag as the socketflags parameter, the data you are sending will not be routed. If you specify the OutOfBand flag as the socketflags parameter, only out-of-band (OOB) data is sent. If you set the Blocking property to true, and buffer space is not available within the underlying protocol, this method blocks. If you are using a message-oriented Socket, and the size of buffer is greater than the maximum message size of the underlying protocol, no data is sent and Socket will throw a SocketException. If you are using a connection-oriented Socket, remoteEp is ignored.</para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Byte[])">
            <summary>
            Sets the specified option to the specified value.
            </summary>
            <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel"/> value. </param>
            <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName"/> value.</param>
            <param name="optionValue">A byte array representing the value of the option.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Socket options determine the behavior of the current Socket. Use this overload to set those Socket options that require a byte array as an option value.<br>Windows 98, Windows NT 4.0 Platform Note:  You must call the Bind method before using AddMembership as the optionName parameter.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Int32)">
            <summary>
            Sets the specified option to the specified value.
            </summary>
            <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel"/> value. </param>
            <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName"/> value.</param>
            <param name="optionValue">A value of the option.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Socket options determine the behavior of the current Socket. For an option with a Boolean data type, specify a nonzero value to enable the option, and a zero value to disable the option. For an option with an integer data type, specify the appropriate value. Socket options are grouped by level of protocol support.<br>Windows 98, Windows NT 4.0 Platform Note:  You must call the Bind method before using AddMembership as the optionName parameter.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SetSocketOption(System.Net.Sockets.SocketOptionLevel,System.Net.Sockets.SocketOptionName,System.Object)">
            <summary>
            Sets the specified option to the specified value.
            </summary>
            <param name="optionLevel">A <see cref="T:System.Net.Sockets.SocketOptionLevel"/> value. </param>
            <param name="optionName">A <see cref="T:System.Net.Sockets.SocketOptionName"/> value.</param>
            <param name="optionValue">A LingerOption or MulticastOption containing the value of the option.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="optionValue"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <remarks>Socket options determine the behavior of the current Socket. Use this overload to set those Socket options that require anything other than an integer or Boolean as an option value. For example, to set the Linger option, you must create an instance of LingerOption and pass it to SetSocketOption as the optionvalue parameter.<br>Windows 98, Windows NT 4.0 Platform Note:  You must call the Bind method before using AddMembership as the optionName parameter.</br></remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Disables sends and receives on a VirtualSocket.
            </summary>
            <param name="how">The <see cref="T:System.Net.Sockets.SocketShutdown"/> value specifying the operation that will no longer be allowed.</param>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while closing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>
            <para>Setting how to Send, specifies that subsequent calls to Send are not allowed. With TCP sockets, a FIN will be sent after all data is sent and acknowledged by the receiver.</para>
            <para>Setting how to Receive, specifies that subsequent calls to Receive are not allowed. This has no effect on lower protocol layers. For TCP sockets, the connection is reset if data is waiting to be received or if more data arrives after the Socket is disabled. For UDP sockets, datagrams are accepted and queued.</para>
            <para>Setting how to Both disables both sends and receives as described above.</para>
            <para>To finish closing the Socket, a call to Close must be made after the call to Shutdown. You should not attempt to reuse the Socket.</para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.m_InternalSocket">
            <summary>Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.InternalSocket"/> property.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.InternalSocket">
            <summary>
            Gets or sets the internal <see cref="T:System.Net.Sockets.Socket"/> value.
            </summary>
            <value>An instance of the Socket class.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Blocking">
            <summary>
            Gets or sets a value that indicates whether the VirtualSocket is in blocking mode.
            </summary>
            <value><b>true</b> if the VirtualSocket will block; otherwise, <b>false</b>. The default is <b>true</b>.</value>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.AddressFamily">
            <summary>
            Gets the address family of the VirtualSocket.
            </summary>
            <value>One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.AddressFamily"/> values.</value>
            <remarks>AddressFamily specifies the addressing scheme that an instance of the VirtualSocket class can use. This property is read-only and is set when the VirtualSocket is created.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>The number of bytes of data that has been received from the network and are available to be read.</value>
            <remarks>If you are using a Stream VirtualSocket type, the available data is generally the total amount of data queued on the current instance. If you are using a message-oriented VirtualSocket type such as Dgram, the available data is the first message in the input queue.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Connected">
            <summary>
            Gets a value indicating whether a VirtualSocket is connected to a remote resource.
            </summary>
            <value><b>true</b> if the VirtualSocket is connected to a remote resource; otherwise, <b>false</b>.</value>
            <remarks>Gets the connection state of the VirtualSocket. This property will return the latest known state of the VirtualSocket. When it returns <b>false</b>, the VirtualSocket was either never connected, or no longer connected. When it returns <b>true</b>, the VirtualSocket was connected at the time of the last I/O operation.<br><b>Note</b>   There is no guarantee that the VirtualSocket is still Connected even though Connected returns <b>true</b>.</br></remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Handle">
            <summary>
            Gets the operating system handle for the VirtualSocket.
            </summary>
            <value>An <see cref="T:System.IntPtr"/> representing the operating system handle for the VirtualSocket.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.LocalEndPoint">
            <summary>
            Gets the local endpoint.
            </summary>
            <value>The local endpoint that the VirtualSocket is using for communications.</value>
            <remarks>The LocalEndPoint property contains the network connection information associated with the local network device. LocalEndPoint is set by calling the Bind method.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while reading the property.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ProtocolType">
            <summary>
            Gets the protocol type of the VirtualSocket.
            </summary>
            <value>One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ProtocolType"/> values.</value>
            <remarks>ProtocolType is set when the VirtualSocket is created, and specifies the protocol used by that VirtualSocket.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.ReceiveBufferSize">
            <summary>
            Size of the receive buffer
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SendBufferSize">
            <summary>
            Size of the send buffer
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.RemoteEndPoint">
            <summary>
            Gets the remote endpoint.
            </summary>
            <value>The remote endpoint that the VirtualSocket is using for communications.</value>
            <remarks>The RemoteEndPoint property gets the network connection information associated with the remote host. RemoteEndPoint is set by VirtualSocket methods that establish a connection to a remote host.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An error occurs while reading the property.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SocketType">
            <summary>
            Gets the type of the VirtualSocket.
            </summary>
            <value>One of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.SocketType"/> values.</value>
            <remarks>SocketType is set when the class is created.</remarks>
        </member>
        <member name="E:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Receiving">
            <summary>
            Fires every time BeginReceive is called.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket.Sending">
            <summary>
            Fires every time BeginSend is called.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the SecureSocket class.
            </summary>
            <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"/> values.</param>
            <exception cref="T:System.Net.Sockets.SocketException">The combination of addressFamily, socketType, and protocolType results in an invalid socket.</exception>
            <remarks>The SecureSocket will act like a normal Socket and will not use a secure transfer protocol.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.#ctor(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the SecureSocket class.
            </summary>
            <param name="addressFamily">One of the <see cref="T:System.Net.Sockets.AddressFamily"/> values.</param>
            <param name="socketType">One of the <see cref="T:System.Net.Sockets.SocketType"/> values.</param>
            <param name="protocolType">One of the <see cref="T:System.Net.Sockets.ProtocolType"/> values.</param>
            <param name="options">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> to use.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while changing the security protocol.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.#ctor(System.Net.Sockets.Socket,EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions,EnterpriseDT.Util.Debug.ILogTag)">
            <summary>
            Initializes a new instance of the SecureSocket class.
            </summary>
            <param name="accepted">The accepted <see cref="T:System.Net.Sockets.Socket"/> instance.</param>
            <param name="options">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> to use.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while changing the security protocol.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.ChangeSecurityProtocol(EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions)">
            <summary>
            Changes the security protocol. This method can only be used to 'upgrade' a connection from no-security to either SSL or TLS.
            </summary>
            <param name="options">The new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> parameters.</param>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while changing the security protocol.</exception>
            <remarks>
            Programs should only call this method if there is no active <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Connect(System.Net.EndPoint)"/>, <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Accept"/>, 
            one of the <c>Send</c> methods or 
            one of the <c>Receive</c> methods!
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Connect(System.Net.EndPoint)">
            <summary>
            Establishes a connection to a remote device and optionally negotiates a secure transport protocol.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <exception cref="T:System.ArgumentNullException">The remoteEP parameter is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">The security negotiation failed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request for a connection to a network device.
            </summary>
            <param name="remoteEP">An <see cref="T:System.Net.EndPoint"/> that represents the remote device.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object that contains state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous connection.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="remoteEP"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.OnConnect(System.IAsyncResult)">
            <summary>
            Called then the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> connects to the remote host.
            </summary>
            <param name="ar">An <see cref="T:System.IAsyncResult"/> instance.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndConnect(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous connection request.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginConnect(System.Net.EndPoint,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndConnect(System.IAsyncResult)"/> was previously called for the asynchronous connection.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while negotiating the security protocol.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Accept">
            <summary>
            Creates a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> to handle an incoming connection request.
            </summary>
            <returns>A SecureSocket to handle an incoming connection request.</returns>
            <remarks>The returned <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket"/> can be cast to a SecureSocket if necessary.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to create the credentials.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginAccept(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to create a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> to accept an incoming connection request.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous SecureSocket creation.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="callback"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while creating the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndAccept(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to create a new <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> to accept an incoming connection request.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>A SecureSocket to handle the incoming connection.</returns>
            <remarks>The returned <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.VirtualSocket"/> can be cast to a SecureSocket if necessary.</remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not created by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginAccept(System.AsyncCallback,System.Object)"/>.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to create the credentials -or- client authentication error.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Send(System.Byte[])">
            <summary>
            Sends data to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Send(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Send(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Sends data to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>, starting at the indicated location in the data.
            </summary>
            <param name="buffer">The data to be sent.</param>
            <param name="offset">The position in the data buffer to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset or size parameter exceeds the size of buffer.</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">Unable to encrypt the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Sends data asynchronously to a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <param name="buffer">The data to send.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to begin sending data.</param>
            <param name="size">The number of bytes to send.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous send.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The specified offset or size exceeds the size of buffer.</exception>
            <exception cref="T:System.ArgumentException">The specified size is zero.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while encrypting the data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndSend(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous send.
            </summary>
            <param name="asyncResult">The result of the asynchronous operation.</param>
            <returns>If successful, the number of bytes sent to the SecureSocket.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndSend(System.IAsyncResult)"/> was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while communicating with the remote host.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Receive(System.Byte[])">
            <summary>
            Receives data from a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Receive(System.Byte[],System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Receive(System.Byte[],System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> values.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receives data from a connected <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> into a specific location of the receive buffer.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The location in buffer to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The size exceeds the size of buffer.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurred while decrypting the received data.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)">
            <summary>
            Begins to asynchronously receive data from a connected SecureSocket.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer parameter at which to store the received data.</param>
            <param name="size">The number of bytes to receive.</param>
            <param name="socketFlags">A bitwise combination of the <see cref="T:System.Net.Sockets.SocketFlags"/> values.</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous read.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="buffer"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">SecureSocket has been closed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The offset parameter is outside the bounds of buffer or size is either smaller or larger than the buffer size.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndReceive(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous read.
            </summary>
            <param name="asyncResult">Stores state information for this asynchronous operation as well as any user defined data.</param>
            <returns>The number of bytes received.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> was not returned by a call to the <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.AsyncCallback,System.Object)"/> method.</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndReceive(System.IAsyncResult)"/> was previously called for the asynchronous read.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the socket.</exception>
            <exception cref="T:System.ObjectDisposedException">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> has been closed.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while communicating with the remote host.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Shutdown(System.Net.Sockets.SocketShutdown)">
            <summary>
            Shuts down the secure connection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">SecureSocket has been closed.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while shutting the secure connection down.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.ShutdownSSL">
            <summary>
            Shuts down SSL.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginShutdownSSL(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to shut SSL down.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginShutdownSSL(System.AsyncCallback,System.Object)"/> has already been called.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.OnShutdownSSL(System.IAsyncResult)">
            <summary>
            Called when the shutdown data has been sent to the remote server.
            </summary>
            <param name="ar">An <see cref="T:System.IAsyncResult"/> instance.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndShutdownSSL(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to shut SSL down.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndShutdownSSL(System.IAsyncResult)"/> has not been called first.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> has not been returned by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndShutdownSSL(System.IAsyncResult)"/>.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginClose(System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to shut the connection down.
            </summary>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginClose(System.AsyncCallback,System.Object)"/> has already been called.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginClose(System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous request to shut the connection down.
            </summary>
            <param name="timeoutMillis">Timeout for closure</param>
            <param name="callback">The <see cref="T:System.AsyncCallback"/> delegate.</param>
            <param name="state">An object containing state information for this request.</param>
            <returns>An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</returns>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.BeginClose(System.AsyncCallback,System.Object)"/> has already been called.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.OnClose(System.IAsyncResult)">
            <summary>
            Called when the shutdown data has been sent to the remote server.
            </summary>
            <param name="ar">An <see cref="T:System.IAsyncResult"/> instance.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndClose(System.IAsyncResult)">
            <summary>
            Ends an asynchronous request to shut the connection down.
            </summary>
            <param name="asyncResult">An <see cref="T:System.IAsyncResult"/> that references the asynchronous shutdown.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="asyncResult"/> is a null reference (<b>Nothing</b> in Visual Basic).</exception>
            <exception cref="T:System.InvalidOperationException"><see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndClose(System.IAsyncResult)"/> has not been called first.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="asyncResult"/> has not been returned by a call to <see cref="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.EndClose(System.IAsyncResult)"/>.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.QueueRenegotiate">
            <summary>
            Queues a renegotiation request.
            </summary>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <remarks>
            Use the QueueRenegotiate function with caution. Some SSL/TLS clients or server do not support renegotiation.
            For instance, requesting a renegotiation in the middle of sending a HTTP request to a MS IIS server causes the connection to be shut down.
            Renegotiations should only be used when a small private key [512 bits] is used and the connection is active for a long period of time.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Close">
            <summary>
            Forces a SecureSocket connection to close.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Finalize">
            <summary>
            Frees resources used by the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> class.
            </summary>
            <remarks>
            The SecureSocket class finalizer calls the Close method to close the SecureSocket and free resources associated with the SecureSocket.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Poll(System.Int32,System.Net.Sockets.SelectMode)">
            <summary>
            Determines the status of the VirtualSocket.
            </summary>
            <param name="microSeconds">The time to wait for a response, in microseconds.</param>
            <param name="mode">One of the <see cref="T:System.Net.Sockets.SelectMode"/> values.</param>
            <returns>See the Socket documentation for the return values.</returns>
            <remarks>This property is not supported for SSL/TLS sockets. It can only be used if the SecureProtocol is set to None. Asynchronous behavior in SSL or TLS mode can be achieved by calling the asynchronous methods.</remarks>
            <exception cref="T:System.NotSupportedException">The mode parameter is not one of the SelectMode values -or- the socket is in SSL or TLS mode.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <remarks>Set microSeconds parameter to a negative integer if you would like to wait indefinitely for a response.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <value>The number of bytes of data that has been received from the network and are available to be read.</value>
            <exception cref="T:System.ObjectDisposedException">The SecureSocket has been closed.</exception>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the SecureSocket.</exception>
            <exception cref="T:EnterpriseDT.Mentalis.Security.SecurityException">An error occurs while interpreting the security data.</exception>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.LocalCertificate">
            <summary>
            Gets the local certificate.
            </summary>
            <value>An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.RemoteCertificate">
            <summary>
            Gets the remote certificate.
            </summary>
            <value>An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> class -or- a null reference (<b>Nothing</b> in Visual Basic) if no certificate has been received.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.SecureProtocol">
            <summary>
            Gets the security protocol in use.
            </summary>
            <value>A bitwise combination of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.SecureProtocol"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Entity">
            <summary>
            Gets the credential type.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.CommonName">
            <summary>
            Gets the common name of the remote host.
            </summary>
            <value>A string representing the common name of the remote host.</value>
            <remarks>
            The common name of the remote host is usually the domain name.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.VerificationType">
            <summary>
            Gets the credential verification type.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Verifier">
            <summary>
            Gets the verify delegate.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler"/> instance.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.SecurityFlags">
            <summary>
            Gets the security flags of the connection.
            </summary>
            <value>A bitwise combination of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.SecurityFlags"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.ActiveEncryption">
            <summary>
            Gets the active encryption cipher suite.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms"/> values.</value>
            <remarks>
            <para>This value is properly initialized after the handshake of the SSL or TLS protocol. Currently, there's no way of knowing when a handshake is completed. However as soon as either a Send or a Receive returns, the handshake must be complete.</para>
            <para>If SSL or TLS is not used, this property returns <b>SslAlgorithms.NONE</b>.</para>
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket.Blocking">
            <summary>
            Gets or sets a value that indicates whether the VirtualSocket is in blocking mode.
            </summary>
            <value><b>true</b> if the VirtualSocket will block; otherwise, <b>false</b>. The default is <b>true</b>.</value>
            <remarks>This property is not supported for SSL/TLS sockets. It can only be used if the SecureProtocol is set to None. Asynchronous behavior in SSL or TLS mode can be achieved by calling the asynchronous methods.</remarks>
            <exception cref="T:System.Net.Sockets.SocketException">An operating system error occurs while accessing the VirtualSocket.</exception>
            <exception cref="T:System.ObjectDisposedException">The VirtualSocket has been closed.</exception>
            <exception cref="T:System.NotSupportedException">Non-blocking sockets are not supported in SSL or TLS mode.</exception>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions">
            <summary>
            Represents the security options that should be used when connecting to a secure server, or when accepting secure connections.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol,EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd,EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification,EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler,System.String,EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags,EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms,EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler,System.Boolean)">
            <summary>
            Initializes a new instance of the SecurityOptions class.
            </summary>
            <param name="protocol">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</param>
            <param name="cert">A <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> instance.</param>
            <param name="entity">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</param>
            <param name="verifyType">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification"/> values.</param>
            <param name="verifier">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler"/> delegate.</param>
            <param name="commonName">The common name of the remote computer. This is usually a domain name.</param>
            <param name="flags">A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags"/> values.</param>
            <param name="allowed">A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms"/> values.</param>
            <param name="requestHandler">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler"/> delegate.</param>
            <param name="synchronousHandshake">Flag indicating whether handshakes should be synchronous or asynchronous.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol,EnterpriseDT.Mentalis.Security.Certificates.Certificate,EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd)">
            <summary>
            Initializes a new instance of the SecurityOptions class.
            </summary>
            <param name="protocol">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</param>
            <param name="cert">A <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> instance.</param>
            <param name="entity">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</param>
            <remarks>
            All other members of the structure will be instantiated with default values.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.#ctor(EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol)">
            <summary>
            Initializes a new instance of the SecurityOptions structure.
            </summary>
            <param name="protocol">One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</param>
            <remarks>
            All other members of the structure will be instantiated with default values.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Clone">
            <summary>
            Creates a shallow copy of this <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions"/> object.
            </summary>
            <returns>A shallow copy of this object.</returns>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Protocol">
            <summary>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Certificate">
            <summary>A <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> instance.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_ValidationCertificate">
            <summary>If set use this for validation.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Entity">
            <summary>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_VerificationType">
            <summary>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification"/> values.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Verifier">
            <summary>The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler"/> delegate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_RequestHandler">
            <summary>The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler"/> delegate.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_CommonName">
            <summary>The common name of the remote computer. This is usually a domain name.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_Flags">
            <summary>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags"/> values.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.m_AllowedAlgorithms">
            <summary>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms"/> values.</summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Protocol">
            <summary>
            Gets or sets the secure protocol that the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> should use.
            </summary>
            <value>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate">
            <summary>
            Gets or sets the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> that the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> should use.
            </summary>
            <value>An instance of the Certificate class.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.ValidationCertificate">
            <summary>
            Gets or sets the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> used for server validation.
            </summary>
            <value>An instance of the Certificate class.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Entity">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> is a server or a client socket.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.VerificationType">
            <summary>
            Gets or sets a value that indicates how the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> will try to verify the peer <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/>.
            </summary>
            <value>One of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Verifier">
            <summary>
            Gets or sets a delegate that will be called when the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> receives the peer certificate.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler"/> delegate.</value>
            <remarks>This member will only be used if the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.VerificationType"/> is set to Manual.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.RequestHandler">
            <summary>
            Gets or sets a delegate that will be called when the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> receives a request for a client certificate.
            </summary>
            <value>A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler"/> delegate.</value>
            <remarks>This member will only be used if no <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Certificate"/> is specified in the Certificate property of this class.</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.CommonName">
            <summary>
            Gets or sets the common name of the peer.
            </summary>
            <value>A <see cref="T:System.String"/> that holds the common name of the peer. This is usually a domain name.</value>
            <remarks>Servers that do not use client authentication should set this member to a null reference (<b>Nothing</b> in Visual Basic).</remarks>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.Flags">
            <summary>
            Gets or sets the security flags associated with the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/>.
            </summary>
            <value>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags"/> values.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.SecurityOptions.AllowedAlgorithms">
            <summary>
            Gets or sets the list of algorithms that can be used to encrypt and compress data.
            </summary>
            <value>A bitwise combination of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms"/> values.</value>
            <remarks>
            This member should always contain at least one encryption algorithm and one compression algorithm.
            Currently, the only defined compression algorithm is SslAlgorithms.NULL_COMPRESSION.
            The default setting for this member is SslAlgorithms.ALL.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SSLSessionCache">
            <summary>
            Represents the security options that should be used when connecting to a secure server, or when accepting secure connections.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol">
            <summary>
            Specifies the type of security protocol that an instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> class can use.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol.None">
            <summary>No security protocol will be used. The SecureSocket will act as a normal Socket.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol.Ssl3">
            <summary>SSLv3</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol.Tls1">
            <summary>TLS 1.0</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol.Tls11">
            <summary>TLS 1.1</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecureProtocol.Tls12">
            <summary>TLS 1.2</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags">
            <summary>
            Specifies the different security flags that an instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> class can use.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.Default">
            <summary>No special behavior is required.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.MutualAuthentication">
            <summary>
            Client authentication is required. This flag only has an effect on server sockets.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.DontSendEmptyRecord">
            <summary>
            To avoid a certain CBC IV attack, the Security Library sends an empty message after the handshake and before the actual application payload.
            Unfortunately, some broken implementations do not support empty packets, so sending these empty packets can be turned off
            by specifying the DontSendEmptyRecord flag.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.IgnoreMaxProtocol">
            <summary>
            Setting this flag will allow a client to issue a SSLv3.0 version number as latest version supported in the premaster secret, even when TLSv1.0 (version 3.1) was announced in the client hello. Normally this is forbidden to prevent version rollback attacks.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.DisableSessionResumption">
            <summary>
            Setting this flag will allow a client to disable session resumption
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.DisableClientHelloExtension">
            <summary>
            Setting this flag will allow a client to disable sending SSL Hello extensions  
            unless TLS 1.2 is the minimum version specified. By default they are sent no
            matter what the version if TLS 1.2 is one of the versions. So not sent if the 
            max TLS version is 1.1.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SecurityFlags.DisableExtendedMasterSecretSessionResumption">
            <summary>
            Setting this flag disables the requirement that the extended
            master secret is needed for TLS session resumption.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd">
            <summary>
            Specifies the different connection end values.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd.Server">
            <summary>The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> is a server socket.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.ConnectionEnd.Client">
            <summary>The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> is a client socket.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.FilterFlagAttribute">
            <summary>
            Signifies that a flag enum value is only used for filtering other flags.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms">
            <summary>
            Specifies the different cipher suites and compression algorithms.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.SECURE_CIPHERS">
            <summary>Cipher Suites that are currently considered secure. As a convenience, this value also specifies NULL compression.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.ALL_CIPHERS">
            <summary>All valid ciphers - excludes fallback and reneg!</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.TLS_FALLBACK_SCSV">
            <summary>Signals client support for fallback</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.TLS_EMPTY_RENEGOTIATION_INFO_SCSV">
            <summary>Signals support for renegotation</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.SslAlgorithms.NULL_COMPRESSION">
            <summary>No compression. This value must always be specified; it is currently the only supported compression algorithm.</summary>    
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification">
            <summary>
            Specifies the method used to verify the remote credential.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification.Manual">
            <summary>The remote certificate will be manually verified. When an incoming connection is accepted, the SecureSocket will raise a CertVerification event. This is the recommended credential verification method.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification.Auto">
            <summary>The remote certificate will be automatically verified by the crypto API.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification.AutoWithoutCName">
            <summary>The remote certificate will be automatically verified by the crypto API, but the common name of the server will not be checked.</summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.CredentialVerification.None">
            <summary>The remote certificate will not be verified. This method is not secure and should only be used for debugging purposes.</summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.CertVerifyEventHandler">
            <summary>
            References the method to be called when the remote certificate should be verified.
            </summary>
            <param name="socket">The <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> that received the certificate to verify.</param>
            <param name="remote">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> of the remote party to verify. This parameter is a null reference (<b>Nothing</b> in Visual Basic) if the other side sent an empty certificate message.</param>
            <param name="chain">The <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.CertificateChain"/> associated with the remote certificate. This parameter is a null reference (<b>Nothing</b> in Visual Basic) if the other side sent an empty certificate message.</param>
            <param name="e">A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs"/> instance used to (in)validate the certificate. If this parameter is <b>true</b> after the delegate returns, the SecureSocket will continue the connection. If this parameter is <b>false</b> after the delegate returns, the connection will be closed.</param>
            <remarks>
            If an error is thrown by the code in the delegate, the SecureSocket will close the connection.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.CertRequestEventHandler">
            <summary>
            References the method to be called when the <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.SecureSocket"/> receives a <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.Certificate"/> request from the peer.
            </summary>
            <param name="socket">The SecureSocket that received the certificate request.</param>
            <param name="acceptable">An instance of the <see cref="T:EnterpriseDT.Mentalis.Security.Certificates.DistinguishedNameList"/> class that contains a list of relative distinguished names. If the client chooses to send a certificate to the remote server, the CA that signed this certificate should be in the list of distinguished names.</param>
            <param name="e">A <see cref="T:EnterpriseDT.Mentalis.Security.Ssl.RequestEventArgs"/> instance used to pass the certificate to the SecureSocket.</param>
            <remarks>
            <para>This delegate is only used by client sockets</para>
            <para>If an error is thrown by the code in the delegate, the SecureSocket will close the connection.</para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs">
            <summary>
            Provides data for the Verify event.
            </summary>
            <remarks>
            When the CertVerifyEventHandler delegate is called, one of its parameters is an instance of this class. If the certificate should not be accepted and the connection should be closed, simply set the Valid property to <b>false</b> and return from the callback.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.#ctor">
            <summary>
            Initializes a new VerifyEventArgs instance.
            </summary>
            <remarks>The initial value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.Valid"/> property will be <b>true</b>.</remarks>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.#ctor(System.Boolean)">
            <summary>
            Initializes a new VerifyEventArgs instance.
            </summary>
            <param name="valid">The initial value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.Valid"/> property.</param>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.m_Valid">
            <summary>
            Holds the value of the <see cref="P:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.Valid"/> property.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.VerifyEventArgs.Valid">
            <summary>
            Gets or sets whether the certificate should be accepted as a valid certficate or not.
            </summary>
            <value><b>true</b> if the certificate is valid, otherwise <b>false</b>.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.SocketTransferEventDelegate">
            <summary>
            Used for events in VirtualSocket.  Note that the EventArgs pattern is not used
            for efficiency reasons (i.e. less object creations).
            </summary>
            <param name="sender">Socket which triggered the event.</param>
            <param name="byteCount">Number of bytes transferred.</param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.HandshakeLayer.GetExtendedMasterSecretBlock">
            <summary>
            Extended Master Secret
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.HandshakeLayer.GetECPointsFormatsExtensionBlock">
            <summary>
            Supported Point Formats Extension.
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.ClientHandshakeLayer.GetEllipticCurveExtensionBlock">
            <summary>
            Supported Elliptic Curves Extension
            </summary>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.CompatibilityLayer.IsInvalidSsl3Hello(System.Byte[])">
            Hello message starts like this:
            
            ContentType type;  // handshake(22)
            ProtocolVersion version;  // uint8 major, uint8 minor;
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.RSAKeyTransform">
            <summary>
            We use this class because there's a bug in the RSACryptoServiceProvider class that disallows encrypting
            more than 16 bytes on Windows 98, ME and NT4.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.ServerHandshakeLayer.GetCertificateRequestFragment(System.Byte[])">
            <summary>
            Note that this is overridden for TLS 1.2 - see Tls12ServerHandshakeLayer
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.SocketController.SetShuttingDownSSL(System.Boolean)">
            <summary>
            
            </summary>
            <param name="waitOnShutdownSSL"></param>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException">
            <summary>
            
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException.#ctor(EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription,System.String)">
            <summary>
            
            </summary>
            <param name="description"></param>
            <param name="message"></param>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException.#ctor(System.Exception,EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription,System.String)">
            <summary>
            
            </summary>
            <param name="e"></param>
            <param name="description"></param>
            <param name="message"></param>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Ssl.Shared.SslException.AlertDescription">
            <summary>
            
            </summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription">
            <summary>
            
            </summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.CloseNotify">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.UnexpectedMessage">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.BadRecordMac">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.DecryptionFailed">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.RecordOverflow">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.DecompressionFailure">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.HandshakeFailure">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.BadCertificate">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.UnsupportedCertificate">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.CertificateRevoked">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.CertificateExpired">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.CertificateUnknown">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.IllegalParameter">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.UnknownCa">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.AccessDenied">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.DecodeError">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.DecryptError">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.ExportRestriction">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.ProtocolVersion">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.InsufficientSecurity">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.InternalError">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.InappropriateFallback">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.UserCanceled">
            <summary></summary>
        </member>
        <member name="F:EnterpriseDT.Mentalis.Security.Ssl.Shared.AlertDescription.NoRenegotiation">
            <summary></summary>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Ssl.Shared.TransferBuffer">
            <summary>
            Creates a stream whose backing store is memory.
            </summary>
            <remarks>This class is created by Kevin Knoop.</remarks>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings">
            <summary>
            Holds the different settings for the self-signed certificate generation process.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.#ctor">
            <summary>
            Initializes a new version of the CertificateSettings class.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.StartDate">
            <summary>
            Gets or sets a value that represents the start date of the certificate.
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.EndDate">
            <summary>
            Gets or sets a value that represents the end date of the certificate.
            </summary>
            <value>A <see cref="T:System.DateTime"/> instance.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.SignCertificate">
            <summary>
            Gets or sets a value that indicates whether the certificate should be signed.
            </summary>
            <value><b>true</b> if a signature must be generated, <b>false</b> otherwise.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.ReferencePrivateKey">
            <summary>
            Gets or sets a value that indicates whether the certificate must reference its private key.
            </summary>
            <value><b>true</b> if the private key must be referenced, <b>false</b> otherwise.</value>
        </member>
        <member name="P:EnterpriseDT.Mentalis.Security.Tools.CertificateSettings.Extensions">
            <summary>
            Gets a collection of X509 extensions.
            </summary>
            <value>A <see cref="T:System.Security.Cryptography.X509Certificates.X509ExtensionCollection"/> instance.</value>
        </member>
        <member name="T:EnterpriseDT.Mentalis.Security.Tools.X509CertificateGenerator">
            <summary>
            Generates self-signed X509 certificates.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Tools.X509CertificateGenerator.Create(System.Security.Cryptography.RSACryptoServiceProvider,System.String)">
            <summary>
            Creates and returns a self-signed X509 certificate.
            </summary>
            <param name="key">The key of the certificate.</param>
            <param name="issuerName">The encoded common name of the issuer.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while creating the self-signed certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Tools.X509CertificateGenerator.Create(System.Int32,System.String,EnterpriseDT.Mentalis.Security.Tools.CertificateSettings)">
            <summary>
            Creates and returns a self-signed X509 certificate.
            </summary>
            <param name="key">The key of the certificate.</param>
            <param name="issuerName">The encoded common name of the issuer.</param>
            <param name="settings">The settings of the X509 certificate.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while creating the self-signed certificate.</exception>
        </member>
        <member name="M:EnterpriseDT.Mentalis.Security.Tools.X509CertificateGenerator.Create(System.Security.Cryptography.RSACryptoServiceProvider,System.String,EnterpriseDT.Mentalis.Security.Tools.CertificateSettings)">
            <summary>
            Creates and returns a self-signed X509 certificate.
            </summary>
            <param name="key">The key of the certificate.</param>
            <param name="issuerName">The encoded common name of the issuer.</param>
            <param name="settings">The settings of the X509 certificate.</param>
            <returns>An <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate"/> instance.</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">An error occurs while creating the self-signed certificate.</exception>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.ExecChannel">
            <summary>
            A channel for exec'ing a command
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel.Transmit(System.Byte[])">
            transmits channel data 
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel.Disconnect(System.String)">
            disconnect
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel.Transmit(System.Byte[],System.Int32,System.Int32)">
            transmits channel data 
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.SSH2Channel.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.ExecChannel.log">
            <summary> Logging object</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver">
            <summary>
            SSH messages received back from an exec are channelled via this class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver">
            <summary>
            Channel specific receiver 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.OnData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when SSH_MESSAGE_DATA is received
            </summary>
            <param name="data">array of data</param>
            <param name="offset">offset into array</param>
            <param name="length">length of data</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.OnChannelReady">
            <summary>
            Called when the SSH channel is initialised
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.CheckPortForwardingRequest(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.EstablishPortforwarding(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel)">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.ChannelReady">
            <summary>
            True if the channel to be used by the SFTP subsystem is ready
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.CommandComplete">
            <summary>
            True if the reply data is all sent
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.ExecChannelReceiver.CommandSuccess">
            <summary>
            True if successful
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.IPrivateKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.IPublicKeyFormat">
            <summary>
            Defines methods for public key formats
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.IPublicKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.IPublicKeyFormat.GetKeyBlob(System.Byte[])">
            <summary>
            Get the key blob from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.ECDSAKeyInfo.GetECDSAKeyInfo(EnterpriseDT.Net.Ftp.Ssh.SimpleASNReader)">
            <summary>
            ECPrivateKey ::= SEQUENCE {
                version        INTEGER { ecPrivkeyVer1(1) } (ecPrivkeyVer1),
                privateKey OCTET STRING,
                parameters [0] ECParameters {{ NamedCurve }} OPTIONAL,
                publicKey[1] BIT STRING OPTIONAL
            }
            
            ECParameters ::= CHOICE {
               namedCurve OBJECT IDENTIFIER
            -- implicitCurve NULL
            -- specifiedCurve SpecifiedECDomain
            }
            </summary>
            <param name="asn"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager">
            <summary>
            Holds details of the known hosts and their public keys.
            </summary>
            <remarks>
            <para>
            The known_hosts file contains a list of approved servers and their public keys. 
            Setting <see cref="P:EnterpriseDT.Net.Ftp.SecureFTPConnection.ServerValidation"/> to 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.Automatic"/> instructs 
            the client to use this list to validate the servers that it connects to. 
            Setting ServerValidation to 
            <see cref="F:EnterpriseDT.Net.Ftp.SecureFTPServerValidationType.AutomaticNoNameCheck"/> is similar, 
            however the server name is ignored in the validation process.
            </para>
            <para>
            A single line in a known_hosts file looks like this:
            </para>
            <para>
            edtmobile,10.0.0.3 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAIEAt60CtjBMxiOO
            qgqfFtKZHY3g99uZpuh5E143FTO4dw+EHWNKemoWq59FMFMIZfSLyUpWmsjVT3PP1bc
            zOXP1OSn967kxLB/w7Xr84B1ZrTLwuR/ilq73HpgO7A8pdEJN7ybprzhs5CBEgaLQo2
            pOxfqRYyc8TO2ADnZ1WwtjW48=
            </para>
            <para>
            The first field is the hostname, i.e. the SSH server. The IP address is also 
            listed - a number of comma separated hostnames and IP addresses can be listed.
            The second field is the applicable public key algorithm -"ssh-rsa" (for RSA key pairs) 
            or "ssh-dss" (for DSA key pairs). The third field is the public key encoded using base 64.
            </para>
            <para>
            The known_hosts file normally consists of multiple lines, one for each of the hosts 
            that the client may wish to connect to. It is quite typical for a host to have 
            entries in two lines, so that both RSA and DSA public keys can be listed.
            </para>
            <para>
            The path of the known_hosts file should be assigned to the 
            <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile"/> property to load the known hosts in that file into
            the manager. If another known_hosts file is subsequently assigned to this 
            property, its contents will be added to the current list of known hosts. Use
            <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ClearKnownHosts"/> to clear the current list. 
            </para>
            <para>
            Server public keys can also be maintained in their own key file and be used for 
            server validation without adding them to the known_hosts file. 
            The KnownHostsManager supports explicitly adding server public keys in this manner, 
            via <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)"/>.
            </para>
            <para>
            Use <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.WriteKnownHosts(System.String)"/> to write the current contents of the known hosts 
            lists to a file. If hosts are loaded via the <see cref="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile"/> and also
            by <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)"/>, the combined list can be merged into one known_hosts
            file by using <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.WriteKnownHosts(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.COMMA_SEP">
            <summary>
            Comma token array
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.knownHosts">
            <summary>
            Hash of [hostname/ip, publickey]
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.publicKeyFactory">
            <summary>
            Handles reading different public key formats
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.knownHostsFile">
            <summary>Full path of known hosts file if it is set</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.WriteKnownHosts(System.String)">
            <summary>
            Write the known hosts to file, together with their public keys, in the
            standard known_hosts format.
            </summary>
            <param name="filename">path of the file to write the known hosts list to</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.LoadKnownHosts(System.String)">
            <summary>
            Read the given known hosts file to obtain the host public keys.
            </summary>
            <remarks>
            Contents must be in the standard known_hosts file format. The hosts
            are added to the current list.
            </remarks>
            <param name="knownHostsFile">Path of known_hosts file</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.LoadKnownHosts(System.IO.Stream)">
            <summary>
            Read the known hosts file to obtain the host public keys.
            </summary>
            <remarks>
            Contents must be in the standard known_hosts file format. The hosts
            are added to the current list.
            </remarks>
            <param name="knownHostStream">Stream containing known hosts.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ClearKnownHosts">
            <summary>
            Clear all loaded known hosts from the internal list.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.String)">
            <summary>
            Add a hostname/public key pair to the known hosts data.
            </summary>
            <remarks>
            Server public keys can also be maintained in their own key 
            file and be used for server validation without adding them 
            to the known_hosts file using this method. SSH public key files 
            have two standard formats - OpenSSH and SECSH.  Both these 
            public key formats are supported. Formats can be recognized 
            by their first line as shown below:
            <list type="number">
            <item>
            <term>OpenSSH (DSA)</term>
            <description>OpenSSH format as a DSA public key. 
            The first line begins with "ssh-dss AAAAB3NzaC1kc3MAA ...".
            </description>
            </item>
            <item>
            <term>OpenSSH (RSA)</term>
            <description>OpenSSH format as a DSA public key. 
            The first line begins with "ssh-rsa AAAAB3NzaC1yc2EAA ...".
            </description>
            </item>
            <item>
            <term>SECSH</term>
            <description>SECSH format. 
            The first line begins with "---- BEGIN SSH2 PUBLIC KEY ----"
            </description>
            </item>
            </list>
            You can convert between OpenSSH and SECSH formats using OpenSSH's 
            ssh-keygen utility (which by default generates OpenSSH keys). 
            </remarks>
            <param name="host">hostname</param>
            <param name="publicKeyFile">public key file for host</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddKnownHost(System.String,System.Byte[])">
            <summary>
            Add a hostname/public key pair to the known hosts data.
            </summary>
            <param name="host">hostname</param>
            <param name="publicKeyFile">byte array containing the public key for host</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.GetPublicKey(System.String,System.String)">
            <summary>
            Get the public key for this hostname/algorithm.
            </summary>
            <param name="host">hostname or ip address</param>
            <param name="algorithm">algorithm name</param>
            <returns>host's public key, or null if not registered</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.GetPublicKeys(System.String)">
            <summary>
            Get all the public keys loaded for the supplied algorithm
            </summary>
            <param name="algorithm">algorithm name</param>
            <returns>All loaded public keys of the supplied algorithm</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ParseLine(System.String)">
            <summary>
            Parse a line of the known_hosts file
            </summary>
            <param name="line">input line to parse</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.Add(System.String,EnterpriseDT.Net.Ssh.Routrek.PKI.PublicKey)">
            <summary>
            Add the hostname along with its public key to the hashtable
            </summary>
            <remarks>
            The hostnames can be a single hostname, or a comma separated string
            of hostnames and ip addresses
            </remarks>
            <param name="hosts">comma separated list of hostnames</param>
            <param name="key">public key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.IsKeyLoaded(System.String,EnterpriseDT.Net.Ssh.Routrek.PKI.PublicKey)">
            <summary>
            Determines if this key is loaded for this host
            </summary>
            <param name="host">name of host</param>
            <param name="key">public key</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.AddHostKey(System.String,EnterpriseDT.Net.Ssh.Routrek.PKI.PublicKey)">
            <summary>
            Add the key for this host
            </summary>
            <param name="host">host name</param>
            <param name="key">public key</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ToString">
            <summary>
            Represent the instance as a string.
            </summary>
            <returns>Name of the current known_hosts file.</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.KnownHostsFile">
            <summary>
            Name of file containing the list of known hosts and their public keys 
            that was most recently loaded.
            </summary>
            <remarks>
            Setting this property causes the contents of the file to be loaded. The
            file must in the standard known_hosts format. The hosts
            are added to the current list. Use <see cref="M:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.ClearKnownHosts"/> first to
            clear the internal list before loading.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.KnownHostsManager.NumHosts">
            <summary>
            Number of known hosts names and IP addresses that have been loaded.
            </summary>
            <remarks>
            This count distinguishes between the various names or IP addresses that a host
            may have. If a host is represented by several names or IP addresses, it
            will be counted that many times in the overall count. So if a
            host has been loaded with the name "edtmobile" and also "192.168.19.64", it will be
            counted twice in the overall count.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.OpenSSHNewPrivateKeyFormat">
            <summary>
            This reads the new OpenSSH format, and is adapted from here:
            https://github.com/openssh/openssh-portable/blob/master/sshkey.c
            
            @author $author$
            @version $Revision: 1.5 $
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHNewPrivateKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPrivateKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPrivateKeyFormat.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPrivateKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPrivateKeyFormat.FormatKeyPair(EnterpriseDT.Net.Ssh.Routrek.PKI.KeyPair,System.String)">
            <summary>
            Format keypair for writing to a file
            </summary>
            <param name="pair"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPublicKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPublicKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPublicKeyFormat.GetKeyBlob(System.Byte[])">
            <summary>
            Get the key blob from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.OpenSSHPublicKeyFormat.GetKeyBlob(System.String)">
            <summary>
            Get the key blob from the string
            </summary>
            <param name="formattedKey">string from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.PEM">
            <summary>
            Reads the contents of 
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PEMReader.GetUnpadded(System.Byte[])">
            <summary>
            Unfortunately our PEMWriter uses zeros rather than no padding, which is how it should be done. No padding
            tells you how much padding there is by setting the padding byte to the number of padded bytes. Fortunately,
            there is never zero padding on the no padding scheme, because if the data length fits the block size, we add another
            full block of padding.
            </summary>
            <param name="plain"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory">
            <summary>
            Reads generic private key data and returns the decrypted key blob
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory.GetKeyPair(System.Byte[],System.String)">
            <summary>
            Get the key pair from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <param name="passphrase">passphrase for key</param>
            <returns>the key pair</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory.GetKeyPairs(System.Byte[],System.String)">
            <summary>
            Generate an array of public key objects from the multi-key blob
            </summary>
            <param name="formattedKeys">multi-key blob</param>
            <returns>Array of key pair objects</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory.GetKeyPair(System.String,System.String)">
            <summary>
            Get the key pair from the private key file
            </summary>
            <param name="privateKeyFile">keyfile name</param>
            <param name="passphrase">passphrase for key</param>
            <returns>the key pair</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PrivateKeyFactory.SelectFormatter(System.Byte[])">
            <summary>
            Select the correct formatter for this key
            </summary>
            <param name="formattedKey">raw key data</param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory">
            <summary>
            Reads generic key data and returns the key blob
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.openSSHFormat">
            <summary>
            OpenSSH formatter
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.secshFormat">
            <summary>
            SECSH formatter
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GeneratePublicKey(System.Byte[])">
            <summary>
            Generate a PublicKey from a byte array of the raw file contents
            </summary>
            <param name="formattedKey"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GeneratePublicKey(System.String)">
            <summary>
            Generate a PublicKey from contents of a public key file
            </summary>
            <param name="publicKeyFile"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GeneratePublicKey(System.Byte[],System.String)">
            <summary>
            Generate a public key object from the keyblob
            </summary>
            <param name="keyBlob">bytes of public key</param>
            <param name="algorithm">optional algorithm to do a check</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GeneratePublicKeys(System.Byte[])">
            <summary>
            Generate an array of public key objects from the multi-key blob
            </summary>
            <param name="keyBlob">multi-key blob</param>
            <returns>Array of public key objects</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.GetKeyBlob(System.Byte[])">
            <summary>
            Get the key blob from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PublicKeyFactory.SelectFormatter(System.Byte[])">
            <summary>
            Select the correct formatter for this key
            </summary>
            <param name="formattedKey">raw key data</param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat.GetKeyPair(System.Byte[],System.String)">
            <summary>
            Read the key pair from the blobs. This code is translated
            from edtFTPj/PRO code, which in turn was written by using the
            PuTTY C source code.
            </summary>
            <param name="formattedKey"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.PuTTYPrivateKeyFormat.GetKeyBlobs(System.Byte[])">
            <summary>
            Reads the basic format
            </summary>
            <param name="formattedKey"></param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SCPChannel">
            <summary>
            A channel for exec'ing a command
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SCPChannel.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SCPChannel.Close">
            <summary>
            Override because for SCP we are maintaining the connection
            after the channel is closed
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver">
            <summary>
            SSH messages received back from SCP command are channelled via this class
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver.OnData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when SSH_MESSAGE_DATA is received
            </summary>
            <param name="data">array of data</param>
            <param name="offset">offset into array</param>
            <param name="length">length of data</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver.OnChannelReady">
            <summary>
            Called when the SSH channel is initialised
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SCPChannelReceiver.ChannelReady">
            <summary>
            True if the SCP channel is ready
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SECSHPublicKeyFormat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SECSHPublicKeyFormat.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SECSHPublicKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SECSHPublicKeyFormat.GetKeyBlob(System.Byte[])">
            <summary>
            Get the key blob from the raw key bytes
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>the key blob</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver">
            <summary>
            SSH messages received are channelled via this class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver">
            <summary>
            SSH connection events are channelled via this class
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHConnectionEventReceiver">
            <summary>
            Connection specific receiver
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.#ctor">
            <summary>
            Constructor
            </summary>
            <param name="messages">store for received messages</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.CheckPortForwardingRequest(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Not used
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.EstablishPortforwarding(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHChannel)">
            <summary>
            Not used
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SSHConnectionReceiver.Prompts">
            <summary>
            Array of prompts used to authenticate
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.#ctor(EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore)">
            <summary>
            Constructor
            </summary>
            <param name="messages">store for received messages</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.OnChannelReady">
            <summary>
            Called when the SSH channel is initialised
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.ChannelReady">
            <summary>
            True if the channel to be used by the SFTP subsystem is ready
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPChannelReceiver.SFTP">
            <summary>
            Gets the SFTP subsystem instance
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPException">
            <summary>
            Represents exceptions related to SFTP, generally produced
            by the SFTP subsystem
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPException.#ctor(System.String)">
            <summary>
            Basic exception
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPException.#ctor(System.String,System.Exception)">
            <summary>
            Basic exception
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPException.#ctor(System.String,System.Int32)">
            <summary>
            Exception allowing an error code to be set
            </summary>
            <param name="msg">error message</param>
            <param name="code">error code</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPConnectException">
            <summary>
            Thrown when an SFTP connection couldn't be made.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPConnectException.#ctor(System.String,System.String)">
            <summary>
            Basic exception
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPConnectException.ServerReply">
            <summary>
            Message sent by the server before failure.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPAuthenticationException">
            <summary>
            Represents authentication exceptions related to SFTP, generally produced
            by the SFTP subsystem
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPAuthenticationException.#ctor(System.String)">
            <summary>
            Basic exception
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPClosedException">
            <summary>
            Thrown when an operation is attempted after the connection has been closed
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPClosedException.#ctor(System.String)">
            <summary>
            Basic exception
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPReadMismatchException">
            <summary>
            Thrown when a read request returns the wrong size during a parallel 
            read operation
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPReadMismatchException.#ctor(System.String)">
            <summary>
            Basic exception
            </summary>
            <param name="msg">error message</param>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPFile">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFile.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFile.Pad(System.Int32)">
            <summary>
            Produce a blank padding string
            </summary>
            <param name="num">number of blank spaces</param>
            <returns>padding string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.TIMESTAMP_FORMAT_YR">
            <summary> Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.TIMESTAMP_FORMAT">
            <summary> Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.UNIX_EPOCH">
            <summary>
            Unix epoch datetime
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.extended">
            <summary>
            Extension name-value pairs (version 3, 4)
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.SetPermissions(System.String)">
            <summary>
            Set new permissions from a Unix-style permissions string
            </summary>
            <param name="newPermissions">Unix permissions string</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.GetPermissionsString">
            <summary>
            Get the existing permissions as a Unix permissions string
            </summary>
            <returns>Unix permissions string</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.User">
            <summary>
            Get or set the file's user/uid. 
            </summary>
            <remarks>
            Most versions will only accept an integer, i.e. the UID. Only
            version 4 upwards will accept a user name
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.Group">
            <summary>
            Get or set the file's group/gid. 
            </summary>
            <remarks>
            Most versions will only accept an integer, i.e. the GID. Only
            version 4 upwards will accept a group name
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPFileAttributes.Size">
            <summary>
            Get or set the remote file's size 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            </summary>
            <param name="offset">A byte offset relative to the origin parameter.</param>
            <param name="origin">Indicates the reference point used to obtain the new position</param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a sequence of bytes from the current stream and advances the 
            position within the stream by the number of bytes read.
            </summary>
            <param name="buffer">An array of bytes. When this method returns, 
            the buffer contains the specified byte array with the values between 
            offset and (offset + count- 1) replaced by the bytes read from the 
            current source.
            </param>
            <param name="offset">The zero-based byte offset in buffer at which 
            to begin storing the data read from the current stream. 
            </param>
            <param name="len">The maximum number of bytes to be read from 
            the current stream. 
            </param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader.ReadByte">
            <summary>
            Reads a byte from the stream and advances the position within 
            the stream by one byte
            </summary>
            <returns>returns -1 if at the end of the stream</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamReader.Close">
            <summary>
            Closes the current stream 
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamWriter">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the current stream and advances 
            the current position within this stream by the number of bytes written.
            </summary>
            <param name="buffer">An array of bytes. This method copies count bytes from buffer to the current stream.</param>
            <param name="offset">The zero-based byte offset in buffer at which to begin copying bytes to the current stream.</param>
            <param name="len">The number of bytes to be written to the current stream.</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamWriter.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the stream and 
            advances the position within the stream by one byte.                                                  )
            </summary>
            <param name="b">byte to write</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPFileStreamWriter.Close">
            <summary>
            Closes the current stream 
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.ToByteArray">
            <summary>
            Get the message as a byte array to send
            </summary>
            <returns>byte array</returns>
            <remarks>
            Messages we receive generally don't implement this method, only messages
            we send
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.#ctor(System.Byte)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.#ctor(System.Byte,System.Int32)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.Log(System.String)">
            <summary>
            Log the message using the given prefix
            </summary>
            <param name="prefix"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.MessageType">
            <summary>
            The type of the SFTP message
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.Length">
            <summary>
            The length of the message data, or 0 if not set
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessage.RequestID">
            <summary>
            The id of the request that this message is in response to
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageFactory">
            <summary>
            Creates the various types of SFTP SSH messages that are supplied to it 
            as byte buffers.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageFactory.log">
            <summary> Logging object</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageProcessor">
            <summary>
            SSH messages received are channelled via this class
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageProcessor.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageProcessor.OnData(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Called when SSH_MESSAGE_DATA is received
            </summary>
            <param name="data">array of data</param>
            <param name="offset">offset into array</param>
            <param name="length">length of data</param>
            <remarks>
            SFTP subsystem messages are sent as SSH_MESSAGE_DATA. They may be
            spread out over a number of data messages, and so each message
            must be pieced together
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore">
            <summary>
            Temporary store for SFTP messages that have been sent from the server to
            the client
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.AddMessage(EnterpriseDT.Net.Ftp.Ssh.SFTPMessage)">
            <summary>
            Add a message to the store
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.SetException(System.Exception)">
            <summary>
            Sets an exception that should be thrown in GetMessage
            </summary>
            <param name="ex">exception</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.GetMessageAsync(System.Int32)">
            <summary>
            Get the message with the supplied request id
            </summary>
            <param name="requestId">request id to match</param>
            <returns>the message</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.GetMessage(System.Int32)">
            <summary>
            Get the message with the supplied request id
            </summary>
            <param name="requestId">request id to match</param>
            <returns>the message</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.Close">
            <summary>
            Close the store
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.State">
            <summary>
            Get the current state of the message store
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SFTPMessageStore.Timeout">
            <summary>
            Get and set the timeout
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem">
             <summary>
             Implements a client SFTP subsystem on top of the SSH channel
             </summary>
             <remarks>
             SFTP messages are sent to the server as SSH_MSG_CHANNEL_DATA messages. Each consists of:
             <para>
                 byte      SSH_MSG_CHANNEL_DATA
                 uint32    recipient channel
                 string    data
             </para>   
             <para> 
             Note that a string itself is compromised of a uint32 containing its length
             (number of bytes that follow) and zero (= empty string) or more
             bytes that are the value of the string.  
             </para>       
             <para>
             All SFTP packets (which compromise the data string) transmitted over the secure 
             connection are of the following format:
             </para>   
             <para>   
                 uint32           length
                 byte             type
                 uint32           request-id
                 ... type specific fields ...
             </para>   
             <para>   
              EXCEPT for the INIT and VERSION messages which omit the request-id
              </para>   
              This is the data portion of the SSH_MSG_CHANNEL_DATA message
            </remarks>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.MSG_OVERHEAD">
            <summary>
            This is the max overhead (a guess!) that an FXP msg incurs when it is
            layered on top of an SSH_CHANNEL_DATA message
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.VERSION">
            <summary>
            Version of the SFTP protocol - using 3 means the 'version-select'
            extension is being used.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.UTF8_VERSION">
            <summary>
            Version 4 and above use UTF-8 encoding
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.nextRequestId">
            <summary>
            Id of current request, used as a counter
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.filenameEncoding">
            <summary>
            Encoding for filenames for version 3 and below
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.handles">
            <summary>
            List of valid file handles
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.NextRequestId">
            <summary>
            Get the next request id
            </summary>
            <returns>request id to use</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.Close">
            <summary>
            Close the channel and message store
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.CloseImmediately">
            <summary>
            Close the channel abruptly. Close the message store too.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.ListChildren(EnterpriseDT.Net.Ftp.Ssh.SFTPFile,System.Collections.ArrayList)">
            <summary>
            List the children of the supplied directory.
            </summary>
            <param name="dir">directory reference</param>
            <param name="children">array of children to populate</param>
            <returns>number of bytes of listing data returned, or -1 when listing complete</returns>
            <remarks>It is necessary to call this method repeatedly until -1 is returned</remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.MakeDirectory(System.String)">
            <summary>
            Make a directory on the remote server
            </summary>
            <param name="path">full path of directory</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.SendMessage(EnterpriseDT.Net.Ftp.Ssh.SFTPMessage)">
            <summary>
            Send a single message
            </summary>
            <param name="msg">SFTP message</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.SendMessages(System.Collections.Generic.IEnumerable{EnterpriseDT.Net.Ftp.Ssh.SFTPMessage})">
            <summary>
            Send all the messages as one buffer
            </summary>
            <param name="msg">SFTP message</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.VerifyRequestOKAsync(System.Int32)">
            <summary>
            Verify that the request for this requestId succeeded
            </summary>
            <param name="requestId">id of request to verify</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.VerifyRequestOK(System.Int32)">
            <summary>
            Verify that the request for this requestId succeeded
            </summary>
            <param name="requestId">id of request to verify</param>
        </member>
        <member name="E:EnterpriseDT.Net.Ftp.Ssh.SFTPSubsystem.ServerError">
            <summary>
            Triggered every time a server error is received
            </summary> 
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SimpleASNReader">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SimpleASNWriter">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHDotComPrivateKeyFormat">
            <summary>
            Also known as SESCH format
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SSHDotComPrivateKeyFormat.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHDotComPrivateKeyFormat.IsFormatted(System.Byte[])">
            <summary>
            Are the supplied raw key bytes in this key format?
            </summary>
            <param name="formattedKey">raw bytes from keyfile</param>
            <returns>true if in this format, false otherwise</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SSHDotComPrivateKeyFormat.FormatKeyPair(EnterpriseDT.Net.Ssh.Routrek.PKI.KeyPair,System.String,System.String)">
            <summary>
            Format keypair for writing to a file
            </summary>
            <param name="pair"></param>
            <param name="passphrase"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpAttrs">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpAttrs.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpClose">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpClose.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpData">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpData.HEADER_LEN">
            <summary>
            Length of header required to write the data to an array
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpData.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpData.DataBuffer">
            <summary>
            This buffer may be larger than the message data, so
            consult DataLength for the length. The data always begins 
            from position 0. This is to minimise array copies.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtended">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtended.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedAdmin">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedAdmin.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedCrc">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedCrc.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SoftwareIdentity.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedIdentity">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedIdentity.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedReply">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedAdminReply">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedIdentityReply">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpExtendedCrcReply">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpFSetStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_FSETSTAT
            uint32 request-id
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpFSetStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpFStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpFStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpHandle">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpHandle.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpInit">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            SSH_FXP_INIT message consists of:
            
                uint32 length
                byte   SSH_FXP_INIT
                uint32 version 
                
            It has no request-id (so the default id is used)
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpLStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_LSTAT
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpLStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpMkDir">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpMkDir.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpName">
            <summary>
            Message supplying filenames and attributes
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpName.#ctor(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader,System.Int32,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="reader"></param>
            <param name="length"></param>
            <remarks>
            Remaining fields are: 
                uint32 request-id
                uint32 count
                repeats count times:
                    string     filename [UTF-8]
                    ATTRS      attrs
                bool end-of-list [optional]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpName.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpOpen">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpOpen.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpOpenDir">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_OPENDIR
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpOpenDir.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRead">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRead.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpReadDir">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpReadDir.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpReadlink">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_READLINK
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpReadlink.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRealPath">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            SSH_FXP_REALPATH message consists of:
            
                uint32 length
                byte   SSH_FXP_REALPATH
                uint32 request-id
                string original-path [UTF-8]
                byte   control-byte [optional] - not used here
                string compose-path[0..n] [optional] - not used here
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRealPath.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRemove">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_REMOVE
            uint32 request-id
            string filename  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRemove.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRename">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_RENAME
            uint32 request-id
            string oldpath [UTF-8]
            string newpath [UTF-8]
            uint32 flags (this looks only for recent versions? don't use here yet)
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRename.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpRmDir">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_RMDIR
            uint32 request-id
            string filename  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpRmDir.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpSetStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_STAT
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpSetStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpStat">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_STAT
            uint32 request-id
            string path  [UTF-8]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpStat.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus">
            <summary>
            Message supplying status information
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.errorCode">
            <summary>
            Error code returned from the server
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.errorMessage">
            <summary>
            Error message returned from the server
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.language">
            <summary>
            Language of error message returned from the server
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.errorSpecificData">
            <summary>
            Error specific data
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.#ctor(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader,System.Int32,System.Text.Encoding)">
            <summary>
            Constructor
            </summary>
            <param name="reader"></param>
            <param name="length"></param>
            <remarks>
            Remaining fields are: 
                uint32 request-id
                uint32 error/status code
                string error message (ISO-10646 UTF-8 [RFC-2279])
                string language tag (as defined in [RFC-1766])
                    error-specific data
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.Success">
            <summary>
            True if status code indicates success
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ErrorCode">
            <summary>
            The error code returned from the server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ErrorMessage">
            <summary>
            Error message returned from the server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ErrorMessageLanguage">
            <summary>
            The language of the error message returned from the server
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpStatus.ErrorSpecificData">
            <summary>
            Error specific data strings
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpSymlink">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <remarks>
            byte   SSH_FXP_SYMLINK
            uint32 request-id
            string linkpath [UTF-8]
            string targetpath [UTF-8]
            uint32 flags (this looks only for recent versions? don't use here yet)
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpSymlink.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpUnknown">
            <summary>
            Represents all unknown messages. SSH_FXP_UNKNOWN is not a real type.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpUnknown.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion">
            <summary>
            Message supplying server version
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.version">
            <summary>
            Server version
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.extensions">
            <summary>
            Extension name-value pairs
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.#ctor(EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="reader"></param>
            <param name="length"></param>
            <remarks>
                uint32  version
                extension-pair extensions[0..n]
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.Version">
            <summary>
            Server version
            </summary>
        </member>
        <member name="P:EnterpriseDT.Net.Ftp.Ssh.SshFxpVersion.Extensions">
            <summary>
            Extension name-value pairs
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SshFxpWrite">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ftp.Ssh.SshFxpWrite.ToString">
            <summary>
            Message as a string
            </summary>
            <returns>message as a string</returns>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherFactory">
            <summary>
            Creates a cipher from given parameters
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherFactory.GetKeySize(EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm)">
            <summary>
            returns necessary key size from Algorithm in bytes
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherFactory.GetBlockSize(EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm)">
            <summary>
            returns the block size from Algorithm in bytes
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.CompressionFactory">
            <summary>
            Compression stuff
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.SSHCompression">
            <summary>
            Defines the compression interface
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ftp.Ssh.ZlibCompression">
            <summary>
            Implements zlib compression
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnectionInfo">
            <summary>
            ConnectionInfo describes the attributes of the host or the connection.
            It is available after the connection is established without any errors.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnectionParameter">
            <summary>
            Fill the properties of ConnectionParameter object before you start the connection.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.Disconnect(System.String)">
            terminates this connection
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.OpenShell(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver)">
            opens a pseudo terminal
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.OpenSFTP(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver)">
            opens an SFTP channel
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.OpenSCP(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,System.String)">
            opens an SCP channel
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.ExecCommand(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,System.String)">
            exec a comand
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.ForwardPort(EnterpriseDT.Net.Ssh.Routrek.SSHC.ISSHChannelEventReceiver,System.String,System.Int32,System.String,System.Int32)">
            forwards the remote end to another host
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.ListenForwardedPort(System.String,System.Int32)">
            listens a connection on the remote end
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.CancelForwardedPort(System.String,System.Int32)">
            cancels binded port
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.Close">
            closes socket directly.
        </member>
        <member name="P:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.Available">
            returns true if any data from server is available
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHConnection.ChannelEntry">
            		 * opens another SSH connection via port-forwarded connection
            		 
                    internal SSHConnection OpenPortForwardedAnotherConnection(SSHConnectionParameter param, ISSHConnectionEventReceiver receiver, string host, int port, ILogTag logTag)
                    {
            			ProtocolNegotiationHandler pnh = new ProtocolNegotiationHandler(param);
            			ChannelSocket s = new ChannelSocket(pnh, logTag);
            
            			SSH2Channel ch = ForwardPort(s, host, port, "localhost", 0);
            			s.SSHChannel = ch;
            			return SSHConnection.Connect(param, receiver, pnh, s);
            		}
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.ClientKeyExchanger.log">
            <summary> Logging object</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.PKI.KeyGenerator">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.PKI.KeyGenerator.GenerateRSAKey(System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.PKI.KeyGenerator.GenerateDSAKey(System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.PKI.KeyGenerator.GenerateECDSAKey(System.String,System.Int32)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PortForwardingCheckResult.allowed">
            if you allow this request, set 'allowed' to true.
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PortForwardingCheckResult.channel">
            if you allow this request, you must set 'channel' for this request. otherwise, 'channel' is ignored
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PortForwardingCheckResult.reason_code">
            		 * if you disallow this request, you can set 'reason_code'.
            			The following reason codes are defined:
            
            			#define SSH_OPEN_ADMINISTRATIVELY_PROHIBITED    1
            			#define SSH_OPEN_CONNECT_FAILED                 2
            			#define SSH_OPEN_UNKNOWN_CHANNEL_TYPE           3
            			#define SSH_OPEN_RESOURCE_SHORTAGE              4
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PortForwardingCheckResult.reason_message">
            if you disallow this request, you can set 'reason_message'. this message can contain only ASCII characters.
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader">
            read/write primitive types
            
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHDataReader.ReadMPInt">
            multi-precise integer
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.Crypto.Rijndael.BLOCK_SIZE">
            <summary>
            constants
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:EnterpriseDT.Net.Ssh.Routrek.Crypto.Rijndael.encryptCTR(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)" -->
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.Crypto.Rijndael.decryptCTR(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            AES-CTR decrypt is actually the same as encrypt
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.Crypto.Rijndael.increment(System.Byte[])">
            <summary>
            As the counter is in network byte order, increment from the
            least significant byte (on the right), byte by byte.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.PKI.RSAKeyPair.#ctor(EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger,EnterpriseDT.Util.BigInteger)">
            <summary>
            RSA keypair
            </summary>
            <param name="e">internal exponent</param>
            <param name="d">private exponent</param>
            <param name="n">p x q</param>
            <param name="u">p.modInverse(q)</param>
            <param name="p">prime</param>
            <param name="q">prime</param>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.PKI.RSAKeyPair.#ctor(System.Security.Cryptography.RSAParameters)">
            <summary>
            Not sure if this works properly - private key fails openssl check
            </summary>
            <param name="p"></param>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.ProtocolNegotiationHandler.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PlainSocket.log">
            <summary> Logging object</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.SSH2Connection.MAX_SEQUENCE_NUM">
            <summary>
            Maximum sequence number
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.SSH2Connection.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.SSH2Packet.CalcHash(EnterpriseDT.Net.Ssh.Routrek.SSHC.MAC,System.Int32)">
            <summary>
            This version doesn't create a copy and then hash it - on a large
            SCP transfer (400 MB) with WinSCP it saves 80 MB of memory used. Cygwin scp
            doesn't use memory like WinSCP does (it's a complete hog).
            </summary>
            <param name="mac"></param>
            <param name="sequence"></param>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHCV2.SSH2PacketBuilder.log">
            <summary> Logging object</summary>
        </member>
        <member name="M:EnterpriseDT.Net.Ssh.Routrek.SSHC.SSHUtil.WriteIntToByteArray(System.Byte[],System.Int32,System.Int32)">
            Network-byte-order‚Å32ƒrƒbƒg’l‚ð‘‚«ž‚ÞB
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod">
            <summary>
            Available key exchange methods
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.DiffieHellmanGroup1Sha1">
            <summary>Diffie-Hellman group 1 sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.DiffieHellmanGroup14Sha1">
            <summary>Diffie-Hellman group 14 sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.DiffieHellmanGroupExchangeSha1">
            <summary>Diffie-Hellman group exchange sha-1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.DiffieHellmanGroupExchangeSha256">
            <summary>Diffie-Hellman group exchange sha-256</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.DiffieHellmanGroup14Sha256">
            <summary>Diffie-Hellman group 14 sha-256</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.ECDHsha2Nistp256">
            <summary>Elliptic Curve Diffie-Hellman with nistp256 curve</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.ECDHsha2Nistp384">
            <summary>Elliptic Curve Diffie-Hellman with nistp384 curve</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.KeyExchangeMethod.ECDHsha2Nistp521">
            <summary>Elliptic Curve Diffie-Hellman with nistp521 curve</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.PublicKeyAlgorithm">
            <summary>
            Available public key algorithms for authentication
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PublicKeyAlgorithm.DSA">
            <summary>DSA public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PublicKeyAlgorithm.RSA">
            <summary>RSA public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PublicKeyAlgorithm.ECDSAsha2Nistp256">
            <summary>Elliptic Curve Diffie-Hellman with nistp256 public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PublicKeyAlgorithm.ECDSAsha2Nistp384">
            <summary>Elliptic Curve Diffie-Hellman with nistp384 public key algorithm</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.PublicKeyAlgorithm.ECDSAsha2Nistp521">
            <summary>Elliptic Curve Diffie-Hellman with nistp521 public key algorithm</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm">
            <summary>
            Available cipher algorithms for packet encryption
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.TripleDES">
            <summary>Triple DES encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.Blowfish">
            <summary>Blowfish encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES128">
            <summary>AES (128 bit) encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES192">
            <summary>AES (192 bit) encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES256">
            <summary>AES (256 bit) encryption</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES_CTR_128">
            <summary>AES (128 bit) encryption CTR mode</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES_CTR_192">
            <summary>AES (192 bit) encryption CTR mode</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CipherAlgorithm.AES_CTR_256">
            <summary>AES (256 bit) encryption CTR mode</summary>
        </member>
        <member name="T:EnterpriseDT.Net.Ssh.Routrek.SSHC.CompressionAlgorithm">
            <summary>
            Available compression algorithms
            </summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CompressionAlgorithm.None">
            <summary>No compression</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.CompressionAlgorithm.Zlib">
            <summary>Zlib compression</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_SHA1">
            <summary>hmac-sha1</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_MD5">
            <summary>hmac-md5</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_SHA1_96">
            <summary>hmac-md5-96</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_MD5_96">
            <summary>hmac-md5-96</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_SHA2_256">
            <summary>hmac-sha2-256</summary>
        </member>
        <member name="F:EnterpriseDT.Net.Ssh.Routrek.SSHC.MACAlgorithm.HMAC_SHA2_512">
            <summary>hmac-sha2-512</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "T:EnterpriseDT.Util.BCrypt" -->
        <member name="M:EnterpriseDT.Util.BCrypt.Encode_Base64(System.Byte[],System.Int32)">
             Encode a byte array using bcrypt's slightly-modified base64
             encoding scheme. Note that this is *not* compatible with
             the standard MIME-base64 encoding.
            
             @param d	the byte array to encode
             @param len	the number of bytes to encode
             @return	base64-encoded string
             @exception IllegalArgumentException if the length is invalid
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Char64(System.Char)">
            Look up the 3 bits base64-encoded by the specified character,
            range-checking againt conversion table
            @param x	the base64-encoded value
            @return	the decoded value of x
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Decode_Base64(System.String,System.Int32)">
            Decode a string encoded using bcrypt's base64 scheme to a
            byte array. Note that this is *not* compatible with
            the standard MIME-base64 encoding.
            @param s	the string to decode
            @param maxolen	the maximum number of bytes to decode
            @return	an array containing the decoded bytes
            @throws IllegalArgumentException if maxolen is invalid
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Encipher(System.UInt32[],System.Int32)">
            Blowfish encipher a single 64-bit block encoded as
            two 32-bit halves
            @param lr	an array containing the two 32-bit half blocks
            @param off	the position in the array of the blocks
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Streamtoword(System.Byte[],System.Int32[])">
            Cycically extract a word of key material
            @param data	the string to extract the data from
            @param offp	a "pointer" (as a one-entry array) to the
            current offset into data
            @return	the next word of material from data
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Init_key">
            Initialise the Blowfish key schedule
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Key(System.Byte[])">
            Key the Blowfish cipher
            @param key	an array containing the key
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Ekskey(System.Byte[],System.Byte[])">
            Perform the "enhanced key schedule" step described by
            Provos and Mazieres in "A Future-Adaptable Password Scheme"
            http://www.openbsd.org/papers/bcrypt-paper.ps
            @param data	salt information
            @param key	password information
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Hash(System.Byte[],System.Byte[],System.Byte[])">
            Compatibility with new OpenBSD function.
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Pbkdf(System.Byte[],System.Byte[],System.Int32,System.Byte[])">
            Compatibility with new OpenBSD function.
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Crypt_Raw(System.Byte[],System.Byte[],System.Int32,System.UInt32[])">
            Perform the central password hashing step in the
            bcrypt scheme
            @param password	the password to hash
            @param salt	the binary salt to hash with the password
            @param log_rounds	the binary logarithm of the number
            of rounds of hashing to apply
            @param cdata         the plaintext to encrypt
            @return	an array containing the binary hashed password
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Hashpw(System.String,System.String)">
            Hash a password using the OpenBSD bcrypt scheme
            @param password	the password to hash
            @param salt	the salt to hash with (perhaps generated
            using BCrypt.gensalt)
            @return	the hashed password
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.GenSalt(System.Int32,System.Security.Cryptography.RandomNumberGenerator)">
            Generate a salt for use with the BCrypt.Hashpw() method
            @param log_rounds	the log2 of the number of rounds of
            hashing to apply - the work factor therefore increases as
            2**log_rounds.
            @param random		an instance of SecureRandom to use
            @return	an encoded salt value
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.GenSalt(System.Int32)">
            Generate a salt for use with the BCrypt.Hashpw() method
            @param log_rounds	the log2 of the number of rounds of
            hashing to apply - the work factor therefore increases as
            2**log_rounds.
            @return	an encoded salt value
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.GenSalt">
            Generate a salt for use with the BCrypt.hashpw() method,
            selecting a reasonable default for the number of hashing
            rounds to apply
            @return	an encoded salt value
        </member>
        <member name="M:EnterpriseDT.Util.BCrypt.Checkpw(System.String,System.String)">
            Check that a plaintext password matches a previously hashed
            one
            @param plaintext	the plaintext password to verify
            @param hashed	the previously-hashed password
            @return	true if the passwords match, false otherwise
        </member>
        <member name="M:EnterpriseDT.Util.ByteArrayUtils.AreEqual(System.Byte[],System.Byte[])">
            <summary>
            Tests if two byte arrays are equal.
            </summary>
            <remarks>
            If both arrays are null, returns true
            </remarks>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Util.ByteSizeFormatter">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.ByteSizeFormatter.Format(System.Int64)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.ByteSizeFormatter.Format(System.Int64,System.Boolean)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:EnterpriseDT.Util.ByteSize">
            <summary>
            Represents a byte-size.  Mainly used for formatting.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.ByteUnits">
            <summary>
            Units used for byte sizes.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.FileSegmentStream">
            <summary>
            Used to read a segment of a file as defined by <see cref="P:EnterpriseDT.Util.FileSegmentStream.SegmentOffset"/> 
            and <see cref="P:EnterpriseDT.Util.FileSegmentStream.SegmentLength"/>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.FileSegmentStream.#ctor(System.String,System.Int64,System.Int64,System.IO.FileMode)">
            <summary>
            Creates an instance of the FileSegmentStream class with the specified path, offset, length 
            and creation mode.
            </summary>
            <param name="path">Path of file</param>
            <param name="segmentOffset">Offset of segment to be read</param>
            <param name="segmentLength">Length of segment to be read</param>
            <param name="mode">Creation mode</param>
        </member>
        <member name="M:EnterpriseDT.Util.FileSegmentStream.#ctor(System.String,System.Int64,System.Int64,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Creates an instance of the FileSegmentStream class with the specified path, offset, length, 
            creation mode and read/write permission.
            </summary>
            <param name="path">Path of file</param>
            <param name="segmentOffset">Offset of segment to be read</param>
            <param name="segmentLength">Length of segment to be read</param>
            <param name="mode">Creation mode</param>
            <param name="access">Read/write permission</param>
        </member>
        <member name="M:EnterpriseDT.Util.FileSegmentStream.#ctor(System.String,System.Int64,System.Int64,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Creates an instance of the FileSegmentStream class with the specified path, offset, length, 
            creation mode, read/write permission and share permission.
            </summary>
            <param name="path">Path of file</param>
            <param name="segmentOffset">Offset of segment to be read</param>
            <param name="segmentLength">Length of segment to be read</param>
            <param name="mode">Creation mode</param>
            <param name="access">Read/write permission</param>
            <param name="share">Share permission</param>
        </member>
        <member name="M:EnterpriseDT.Util.FileSegmentStream.#ctor(System.String,System.Int64,System.Int64,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,System.Int32)">
            <summary>
            Creates an instance of the FileSegmentStream class with the specified path, offset, length, 
            creation mode, read/write permission, share permission and buffer-size.
            </summary>
            <param name="path">Path of file</param>
            <param name="segmentOffset">Offset of segment to be read</param>
            <param name="segmentLength">Length of segment to be read</param>
            <param name="mode">Creation mode</param>
            <param name="access">Read/write permission</param>
            <param name="share">Share permission</param>
            <param name="bufferSize">Buffer-size</param>
        </member>
        <member name="P:EnterpriseDT.Util.FileSegmentStream.SegmentOffset">
            <summary>
            Offset of segment to read.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.FileSegmentStream.SegmentLength">
            <summary>
            Length of segment to read.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.ShortOpt">
            <summary> 
            Represents a short option (i.e. consisting of one letter)
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.4 $
            
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.ShortOpt.maybeArgument">
            <summary> True if there might be an argument
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.ShortOpt.requiresArgument">
            <summary> True if there must be an argument
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.ShortOpt.unknown">
            <summary> True if this option is unknown
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.ShortOpt.#ctor(System.Char,System.Boolean,System.Boolean)">
            <summary> Constructor
            
            </summary>
            <param name="letter">            option letter
            </param>
            <param name="maybeArgument">     possible argument
            </param>
            <param name="requiresArgument">  argument required
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.ShortOpt.Letter">
            <summary> Get the option character
            
            </summary>
            <returns> option character
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.ShortOpt.Unknown">
            <summary> Get unknown status of this option
            
            </summary>
            <returns>  true if unknown, false if known
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.ShortOpt.MaybeArgument">
            <returns> true if an argument may be used
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.ShortOpt.RequiresArgument">
            <returns> true if argument is required
            
            </returns>
        </member>
        <member name="T:EnterpriseDT.Util.GetOpt">
             <summary>  
             C# equivalent of Unix getopt().
             </summary>
             <remarks>
             Only partially implemented, just
             enough so it is useful internally.
             
             Short option are of the form -a -b -c or equivalently
             -abc for options with no arguments, or -a foo -b foo
             for arguments, or even -afoo -bfoo. 
             
             Arguments may be optional or required. If optional, they must
             be supplied as -afoo rather than -a foo. 
             
             The options are specified by a string containing each option char.
             If a character is followed by a single colon, then that option has a required 
             argument. If the character is followed by two colons, then that option has an 
             argument that is not required. No colon means no argument.
            </remarks>
             <author>       Bruce Blackshaw
             </author>
             <version>      $Revision: 1.4 $
             
             </version>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.#ctor(System.String,System.String[],System.String)">
            <summary>Constructor</summary>
            <param name="program">name of program</param>
            <param name="args">argument list</param>
            <param name="options">option string</param>
            <param name="options">marker (default is '-')</param>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.#ctor(System.String,System.String[],System.Int32,System.String)">
            <summary>Constructor</summary>
            <param name="program">name of program</param>
            <param name="args">argument list</param>
            <param name="firstarg">index of first argument</param>
            <param name="options">option string</param>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.#ctor(System.String,System.String[],System.Int32,System.String,System.Char)">
            <summary>Constructor</summary>
            <param name="program">name of program</param>
            <param name="args">argument list</param>
            <param name="options">option string</param>
            <param name="optionMarker">marker (default is '-')</param>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.ReadOptions(System.String)">
            <summary> Read the specified options.
            
            </summary>
            <param name="opts">  options string
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.Getopt">
            <summary> Get the next option character
            
            </summary>
            <returns> next option character, or -1 if all done
            
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.GetOpt.PrintError(System.String)">
            <summary> Print error message if opterr enabled
            
            </summary>
            <param name="msg"> message to print
            
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.OptArg">
            <summary> Get the current option's argument
            
            </summary>
            <returns>  argument for option
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.Program">
            <summary> Get the program name
            
            </summary>
            <returns> program name
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.Options">
            <summary> Get the options configuration string
            
            </summary>
            <returns> options string
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.ErrorMessages">
            <summary> Get the error messages
            
            </summary>
            <returns> string
            
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.GetOpt.Opterr">
            <summary> Set to false if error messages should be
            supressed
            
            </summary>
            <param name="opterr"> state to set opterr to 
            
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Glob.Match(System.String,System.String)">
            <summary>
            Determine if a string matches the supplied glob
            </summary>
            <remarks>
            Supports '*' (0 or more chars), '?' (one char), [...] (set of
            or range of chars), and {pattern1,pattern2,...} for a collection of subpatterns. 
            The char following '\' is not special.
            </remarks>
            <param name="glob">Unix glob</param>
            <param name="stringToMatch">string to match</param>
            <returns>true if match, false otherwise</returns>
        </member>
        <member name="T:EnterpriseDT.Util.HexUtils">
            <summary>
            Various hex utils
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.HexUtils.ToHex(System.Byte[])">
            <summary>
            Convert a byte array to a string in hex
            </summary>
            <param name="data">byte array</param>
            <returns>hex string</returns>
        </member>
        <member name="M:EnterpriseDT.Util.HexUtils.FromHex(System.String)">
            <summary>
            Convert a string in hex to a byte array
            </summary>
            <param name="hex">hex string</param>
            <returns>byte array</returns>
        </member>
        <member name="M:EnterpriseDT.Util.HexUtils.FromDigit(System.Char)">
            <summary>
            
            </summary>
            <param name="ch"></param>
            <returns></returns>
        </member>
        <member name="F:EnterpriseDT.Util.MsgBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.MsgBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:EnterpriseDT.Util.MsgBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.PasswordHasher">
            <summary>
            Best password hasher
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.PasswordHasher.Hash(System.String,System.String)">
            <summary>
            Convert a byte array to a string in hex
            </summary>
            <param name="data">byte array</param>
            <returns>hex string</returns>
        </member>
        <member name="T:EnterpriseDT.Util.PathUtil">
            <summary>
            Provides methods for dealing with FTP paths.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Fix(System.String)">
            <summary>
            Cleans up a path such that, for example, "/A/B/../C" becomes "/A/C".
            </summary>
            <param name="path">Path to clean up.</param>
            <returns>Cleaned up path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Fix(System.String[])">
            <summary>
            Cleans up a path such that, for example, "/A/B/../C" becomes "/A/C".
            </summary>
            <param name="path">Path to clean up as an array of strings where each string is a single directory.</param>
            <returns>Cleaned up path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.IsAbsolute(System.String)">
            <summary>
            Indicates whether or not a path is absolute (i.e. starts with '/').
            </summary>
            <param name="path">Path to check</param>
            <returns><c>true</c> if path is absolute</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.IsRelative(System.String)">
            <summary>
            Indicates whether or not a path is relative (i.e. does not start with '/').
            </summary>
            <param name="path">Path to check</param>
            <returns><c>true</c> if path is relative.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetAbsolutePath(System.String,System.String)">
            <summary>
            Return the fixed absolute path for the given directory based on the given base directory.
            </summary>
            <param name="baseDirectory"></param>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFileName(System.String)">
            <summary>
            Gets the file-name without its path.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>File-name</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFileNameWithoutExtension(System.String)">
            <summary>
            Returns the filename of the specified path without the extension.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Filename of the specified path without the extension.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetExtension(System.String)">
            <summary>
            Gets the extension of the filename.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Extension</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFolderPath(System.String)">
            <summary>
            Gets the folder-path without the file-name
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Folder path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Combine(System.String,System.String)">
            <summary>
            Combines two paths.
            </summary>
            <param name="pathLeft">Left part of path.</param>
            <param name="pathRight">Right part of path.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Combine(System.String,System.String,System.String[])">
            <summary>
            Combines an arbitrary number of paths.
            </summary>
            <param name="path1">Left part of path.</param>
            <param name="path2">Second-from-left part of path.</param>
            <param name="pathN">Rest of path.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Explode(System.String)">
            <summary>
            Splits the path into parts.
            </summary>
            <param name="path">Full path</param>
            <returns>Parts of the path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Implode(System.String[],System.Int32,System.Int32)">
            <summary>
            Combines parts into a single path.
            </summary>
            <param name="parts">Parts</param>
            <param name="start">Start at part</param>
            <param name="length">Number of parts to combine</param>
            <returns>Single path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Implode(System.String[],System.Int32)">
            <summary>
            Combines parts into a single path.
            </summary>
            <param name="parts">Parts</param>
            <param name="start">Start at part</param>
            <returns>Single path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Implode(System.String[])">
            <summary>
            Combines parts into a single path.
            </summary>
            <param name="parts">Parts</param>
            <returns>Single path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.EnsureLeadingSeparator(System.String)">
            <summary>
            Ensures that the first character is a separator character
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.EnsureTrailingSeparator(System.String)">
            <summary>
            Ensures that the last character is a separator character
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.RemoveTrailingSeparator(System.String)">
            <summary>
            Ensures that the last character is a separator character
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Fix(System.Char,System.String)">
            <summary>
            Cleans up a path such that, for example, "/A/B/../C" becomes "/A/C".
            </summary>
            <param name="path">Path to clean up.</param>
            <returns>Cleaned up path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Fix(System.Char,System.String[])">
            <summary>
            Cleans up a path such that, for example, "/A/B/../C" becomes "/A/C".
            </summary>
            <param name="path">Path to clean up as an array of strings where each string is a single directory.</param>
            <returns>Cleaned up path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.IsAbsolute(System.Char,System.String)">
            <summary>
            Indicates whether or not a path is absolute (i.e. starts with '/').
            </summary>
            <param name="path">Path to check</param>
            <returns><c>true</c> if path is absolute</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.IsRelative(System.Char,System.String)">
            <summary>
            Indicates whether or not a path is relative (i.e. does not start with '/').
            </summary>
            <param name="path">Path to check</param>
            <returns><c>true</c> if path is relative.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetAbsolutePath(System.Char,System.String,System.String)">
            <summary>
            Return the fixed absolute path for the given directory based on the given base directory.
            </summary>
            <param name="baseDirectory"></param>
            <param name="directory"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFileName(System.Char,System.String)">
            <summary>
            Gets the file-name without its path.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>File-name</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFileNameWithoutExtension(System.Char,System.String)">
            <summary>
            Returns the filename of the specified path without the extension.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Filename of the specified path without the extension.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetExtension(System.Char,System.String)">
            <summary>
            Gets the extension of the filename.
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Extension</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.GetFolderPath(System.Char,System.String)">
            <summary>
            Gets the folder-path without the file-name. If there are no 
            separators in the path, return the path as is
            </summary>
            <param name="path">Absolute or relative path</param>
            <returns>Folder path</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Combine(System.Char,System.String,System.String)">
            <summary>
            Combines two paths.
            </summary>
            <param name="pathLeft">Left part of path.</param>
            <param name="pathRight">Right part of path.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Combine(System.Char,System.String,System.String,System.String[])">
            <summary>
            Combines an arbitrary number of paths.
            </summary>
            <param name="path1">Left part of path.</param>
            <param name="path2">Second-from-left part of path.</param>
            <param name="pathN">Rest of path.</param>
            <returns>Combined path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.Explode(System.Char,System.String)">
            <summary>
            Splits the path into parts.
            </summary>
            <param name="path">Full path</param>
            <returns>Parts of the path.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.EnsureLeadingSeparator(System.Char,System.String)">
            <summary>
            Ensures that the first character is a separator character.
            </summary>
            <param name="separatorChar"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:EnterpriseDT.Util.PathUtil.EnsureTrailingSeparator(System.Char,System.String)">
            <summary>
            Ensures that the last character is a separator character.
            </summary>
            <param name="separatorChar"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="P:EnterpriseDT.Util.PathUtil.DefaultSeparatorChar">
            <summary>
            Separator character (i.e. '/').
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.PathUtil.DefaultSeparator">
            <summary>
            Separator character as a string (i.e. "/").
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.PathUtil.WindowsSeparatorChar">
            <summary>
            Separator character (i.e. '\\').
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.PathUtil.WindowsSeparator">
            <summary>
            Separator character as a string (i.e. "\\").
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.ToStringDelegate">
            <summary>INTERNAL</summary>
            <param name="obj">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="T:EnterpriseDT.Util.PrettyName">
            <summary>INTERNAL</summary>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.GetPrettyName(System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.GetPrettyName(System.String,System.Boolean)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <param name="allowConsecutiveCaps">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.AllUpperCase(System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.RemoveReservedChars(System.String,System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <param name="reservedChars">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.RemoveNonAlphaNumChars(System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="M:EnterpriseDT.Util.PrettyName.RemoveNonAlphaNumChars(System.String,System.String)">
            <summary>
            INTERNAL
            </summary>
            <param name="rawName">INTERNAL</param>
            <param name="additionalAllowedChars">INTERNAL</param>
            <returns>INTERNAL</returns>
        </member>
        <member name="T:EnterpriseDT.Util.StringSplitter">
            <summary>
            Useful for splitting strings into fields. A bit cleaner
            than a regex for what we want to do
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.StringSplitter.Split(System.String)">
            <summary>
            Splits string consisting of fields separated by
            whitespace into an array of strings.
            </summary>
            <param name="str">string to split</param>   
        </member>
        <member name="F:EnterpriseDT.Util.DataBuffer.offset">
            <summary>
            Where the current data starts
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.DataBuffer.length">
            <summary>
            length of current data
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.DataBuffer.Length">
            <summary>
            Length of data
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.DataBuffer.Offset">
            <summary>
            Start of data in internal buffer
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.DataBuffer.FreeSpace">
            <summary>
            Free space left (at the end)
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.FileAppender">
            <summary>  
            Appends log statements to a file
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.16 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.FileAppender.logger">
            <summary> Destination</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.FileAppender.fileName">
            <summary> Log file</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.FileAppender.closed">
            <summary>
            True if closed
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.FileAppender.#ctor(System.String)">
            <summary>Constructor</summary>
            <param name="fileName">name of file to log to</param>
            <throws>  IOException </throws>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.FileAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.FileAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.FileAppender.Close">
            <summary> 
            Close this appender
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.FileAppender.FileName">
            <summary>
            Name of file to log to.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.LogLevel">
            <summary>
            Enumeration specifying logging levels.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Off">
            <summary>No logging</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Fatal">
            <summary>Fatal error messages only</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Error">
            <summary>Error messages</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Warning">
            <summary>Warning and erorr messages</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Information">
            <summary>Information, warning and error messages</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.Debug">
            <summary>Debugging, information, warning, and error messages</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.LogLevel.All">
            <summary>All logging</summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.LogLevelHelper">
            <summary>
            Helper for compact frameworks, which doesn't have 
            Enum.Parse()
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.Level">
            <summary>  
            Simple debug level class. Uses the same interface (but
            not implementation) as log4net, so that the debug
            classes could be easily replaced by log4net 
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.10 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.OFF">
            <summary> Off level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.FATAL">
            <summary> Fatal level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.ERROR">
            <summary> OFF level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.WARN">
            <summary> Warn level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.INFO">
            <summary> Info level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.DEBUG">
            <summary> Debug level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.ALL">
            <summary> All level</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.level">
            <summary> The level's integer value</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Level.levelStr">
            <summary> The level's string representation</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.#ctor(EnterpriseDT.Util.Debug.LogLevel,System.String)">
            <summary> 
            Private constructor so no-one outside the class can
            create any more instances
            </summary>
            <param name="level">    level to set this instance at
            </param>
            <param name="levelStr">   string representation
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.GetLevel">
            <summary> 
            Get integer log level
            </summary>
            <returns> log level
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.IsGreaterOrEqual(EnterpriseDT.Util.Debug.Level)">
            <summary> 
            Is this level greater or equal to the supplied level
            </summary>
            <param name="l">     level to test against
            </param>
            <returns>  true if greater or equal to, false if less than
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.GetLevel(System.String)">
            <summary> 
            Get level from supplied string
            </summary>
            <param name="level">level as a string
            </param>
            <returns> level object or null if not found
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.GetLevel(EnterpriseDT.Util.Debug.LogLevel)">
            <summary>
            Converts a <see cref="T:EnterpriseDT.Util.Debug.LogLevel"/> enum to a <c>Level</c> object.
            </summary>
            <param name="level"><see cref="T:EnterpriseDT.Util.Debug.LogLevel"/> enum to convert.</param>
            <returns>A <c>Level</c> object corresponding to the given LogLevel.</returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Level.ToString">
            <summary> 
            String representation
            </summary>
            <returns> string
            </returns>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.LogMessageEventArgs">
            <summary>
            An instance of this class is supplied to the LogMessageReceived event
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.LogMessageEventArgs.#ctor(System.String,EnterpriseDT.Util.Debug.Level,System.String,System.Object[])">
            <summary>
            Constructor
            </summary>
            <param name="loggerName">name of logger</param>
            <param name="level">log level of message</param>
            <param name="text">message text</param>
            <param name="args">any additional args supplied</param>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.LogLevel">
            <summary>
            Returns the level of this message
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.LoggerName">
            <summary>
            Returns the name of the logger for this message
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.Text">
            <summary>
            The message text.
            </summary>
            <remarks>Normally this is a log message, but if additional arguments
            are supplied, this will be a Format string so the extra arguments can
            be displayed correctly.</remarks>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.FormattedText">
            <summary>
            The formatted message text, constructed from the arguments and using
            the Text as a formatting string.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.Exception">
            <summary>
            An exception if it exists (passed in as the first in the
            argument list).
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.LogMessageEventArgs.Arguments">
            <summary>
            The array of variable arguments.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.LogMessageHandler">
            <summary>
            Delegate used for LogMessageReceived event
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.Logger">
            <summary>  
            Logger class that mimics log4net Logger class
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.42 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.globalLevel">
            <summary> Level of all loggers</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.format">
            <summary>Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.loggers">
            <summary> Hash of all loggers that exist</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.appenders">
            <summary> Vector of all appenders</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.ts">
            <summary> Timestamp</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.clazz">
            <summary> Class name for this logger</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.showClassNames">
            <summary>If true then class-names will be shown in log.</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.showTimestamp">
            <summary>If true then timestamps will be shown in log.</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.mainFileAppender">
            <summary>Main file appender</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.mainConsoleAppender">
            <summary>Main file appender</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.Logger.mainTraceAppender">
            <summary>Main file appender</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.#ctor(System.String)">
            <summary> 
            Constructor
            </summary>
            <param name="clazz">    
            class this logger is for
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.GetLogger(System.Type)">
            <summary> Get a logger for the supplied class
            
            </summary>
            <param name="clazz">   full class name
            </param>
            <returns>  logger for class
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.GetLogger(System.String)">
            <summary> 
            Get a logger for the supplied class
            </summary>
            <param name="clazz">   full class name
            </param>
            <returns>  logger for class
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.AddAppender(EnterpriseDT.Util.Debug.Appender)">
            <summary> 
            Add an appender to our list
            </summary>
            <param name="newAppender">
            new appender to add
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.RemoveAppender(EnterpriseDT.Util.Debug.Appender)">
            <summary> 
            Remove an appender from our list
            </summary>
            <param name="appender">appender to remove</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Shutdown">
            <summary> Close and remove all appenders and loggers</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.ClearAppenders">
            <summary> Close and remove all appenders</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Log(EnterpriseDT.Util.Debug.Level,System.String,System.Object[])">
            <summary>
            Log a message using the given level.
            </summary>
            <param name="level">Log level.</param>
            <param name="message">Message to log.</param>
            <param name="args">Either an Exception or arguments substituted into message.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.OurLog(EnterpriseDT.Util.Debug.Level,System.String,System.Exception)">
            <summary> 
            Log a message to our logging system
            </summary>
            <param name="level">log level</param>
            <param name="message">message to log</param>
            <param name="t">throwable object</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Info(System.String)">
            <summary> Log an info level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Info(System.String,System.Exception)">
            <summary> Log an info level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Info(System.String,System.Object[])">
            <summary> Log an info level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="args">arguments references in the message.
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Warn(System.String)">
            <summary> Log a warning level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Warn(System.String,System.Exception)">
            <summary> Log a warning level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Warn(System.String,System.Exception,System.Object[])">
            <summary>Log an warning level message</summary>
            <param name="message">message to log</param>
            <param name="t">throwable object</param>
            <param name="args">arguments references in the message.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Error(System.String)">
            <summary> Log an error level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Error(System.String,System.Exception)">
            <summary> Log an error level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Error(System.String,System.Exception,System.Object[])">
            <summary>Log an error level message</summary>
            <param name="message">message to log</param>
            <param name="t">throwable object</param>
            <param name="args">arguments references in the message.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Error(System.Exception)">
            <summary> Log an error level message
            
            </summary>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Fatal(System.String)">
            <summary> Log a fatal level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Fatal(System.String,System.Exception)">
            <summary> Log a fatal level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Debug(System.String)">
            <summary> Log a debug level message
            
            </summary>
            <param name="message">  message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Debug(System.String,System.Object[])">
            <summary>Log a debug level message</summary>
            <param name="message">message to log</param>
            <param name="args">arguments references in the message.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.Debug(System.String,System.Exception)">
            <summary> Log a debug level message
            
            </summary>
            <param name="message">  message to log
            </param>
            <param name="t">        throwable object
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.IsEnabledFor(EnterpriseDT.Util.Debug.Level)">
            <summary> Is logging enabled for the supplied level?
            
            </summary>
            <param name="level">  level to test for
            </param>
            <returns> true   if enabled
            </returns>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.#cctor">
            <summary> Determine the logging level</summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.Logger.LogObject(EnterpriseDT.Util.Debug.Level,System.String,System.Object)">
            <summary>
            Logs the public properties of an object.
            </summary>
            <param name="level">Logging level to use.</param>
            <param name="prefix">Text to prepend to the properties.</param>
            <param name="obj">Object whose properties are to be logged.</param>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.CurrentLevel">
            <summary> 
            Set all loggers to this level
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.ShowClassNames">
            <summary>If true then class-names will be shown in log.</summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.ShowTimestamp">
            <summary>If true then timestamps will be shown in log.</summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.ErrorEnabled">
            <summary> 
            Is error logging enabled?
            </summary>
            <returns> true if enabled
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.DebugEnabled">
            <summary> 
            Is debug logging enabled?
            </summary>
            <returns> true if enabled
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.InfoEnabled">
            <summary> Is info logging enabled for the supplied level?
            
            </summary>
            <returns> true if enabled
            </returns>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.PrimaryLogFile">
            <summary>
            The primary log file is simply the first file appender
            that has been added to the logger.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.LogToConsole">
            <summary>
            If this property is <c>true</c> then logs will be written to the
            console.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.Logger.LogToTrace">
            <summary>
            If this property is <c>true</c> then logs will be written using
            <see cref="T:System.Diagnostics.Trace"/>.
            </summary>
        </member>
        <member name="E:EnterpriseDT.Util.Debug.Logger.LogMessageReceived">
            <summary>
            If this event is set then all logging events are directed to the
            event as well as the loggers.
            </summary>
            <remarks>If it is desired to only send logging to the log system subscribing
            to this event, the <see cref="P:EnterpriseDT.Util.Debug.Logger.CurrentLevel"/> should be set to <see cref="F:EnterpriseDT.Util.Debug.Level.OFF"/>.</remarks>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.Lock">
            <summary>
            Utility class for helping to debug deadlocks caused by lock synchronization.
            </summary>
            <remarks>
            When run in debug mode it will print logging information before entering and after leaving each lock-block.
            To use, replace all occurrances of <c>lock(xyz)</c> with <c>using(new LoggingLock(xyz))</c>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.MemoryAppender">
            <summary>Appends log statements to an in-memory buffer.</summary>
            <remarks>This appender keeps only the past <see cref="P:EnterpriseDT.Util.Debug.MemoryAppender.MaxMessages"/> lines in memory.
            They may be accessed at any time using the <see cref="P:EnterpriseDT.Util.Debug.MemoryAppender.Messages"/> property.  It
            is useful for debugging problems where timing is critical (e.g. deadlocks).</remarks>
            <author>Hans Andersen</author>
            <version>$Revision$</version>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.#ctor">
            <summary>
            Constructs a <c>MemoryAppender</c>.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.#ctor(System.Int32)">
            <summary>
            Constructs a <c>MemoryAppender</c> which stores a maximum of <c>maxMessages</c> messages.
            </summary>
            <param name="maxMessages">Maximum number of messages stored.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>		
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Close">
            <summary> 
            Close this appender
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Write(System.String)">
            <summary>
            Write the current content of the log to the given file.
            </summary>
            <param name="path">Path of file</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.MemoryAppender.Write(System.IO.StreamWriter)">
            <summary>
            Write the current content of the log to the given stream.
            </summary>
            <param name="stream">Stream to write messages to.</param>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.MemoryAppender.MaxMessages">
            <summary>
            Maximum number of messages stored in the appender.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.MemoryAppender.Messages">
            <summary>
            Messages currently in the appender.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.RollingFileAppender">
            <summary>  
            Rolling file appender that moves the log file to
            a backup file once it exceeds a certain size.
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.8 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.RollingFileAppender.maxFileSize">
            <summary> Destination</summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.RollingFileAppender.thresholdBytesWritten">
            <summary>
            record of bytes written in this check cycle
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.RollingFileAppender.maxSizeRollBackups">
            <summary>
            Maximum number of backup files
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.#ctor(System.String,System.Int64,System.Int32)">
            <summary>Constructor</summary>
            <param name="fileName">name of file to log to</param>
            <param name="maxFileSize">maximum size of log file in bytes</param>
            <param name="maxFileCount">maximum number of backup files</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.#ctor(System.String,System.Int64)">
            <summary>Constructor</summary>
            <param name="fileName">name of file to log to</param>
            <param name="maxFileSize">maximum size of log file in bytes</param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.#ctor(System.String)">
             <summary>Constructor</summary>
             <param name="fileName">name of file to log to</param>
             <remarks>
             Default maximum size of logfile is 10MB
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.CheckForRollover">
            <summary>
            Check if files should be rolled over
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.CheckSizeForRollover">
            <summary>
            Check if the file's size means it should be rolled over
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.Rollover">
            <summary>
            Rollover the log files
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.RollingFileAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.RollingFileAppender.MaxSizeRollBackups">
            <summary>
            Set the maximum number of backup files to retain. If this is set to
            zero, the log file will be truncated when it reaches the MaxSize. Backup
            files are called FileName.1, FileName.2 etc. This value can't be negative.
            The default is 1 backup file.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Debug.RollingFileAppender.MaxFileSize">
            <summary>
            Maximum size of log file in bytes
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.StandardOutputAppender">
            <summary>  Appends log statements to standard output
            
            </summary>
            <author>       Bruce Blackshaw
            </author>
            <version>      $Revision: 1.9 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.Debug.StandardOutputAppender.log">
            <summary> 
            Destination
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.StandardOutputAppender.#ctor">
            <summary> 
            Constructor
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.StandardOutputAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.StandardOutputAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>		
        </member>
        <member name="M:EnterpriseDT.Util.Debug.StandardOutputAppender.Close">
            <summary> 
            Close this appender
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Debug.TraceAppender">
            <summary>Appends log statements using <see cref="T:System.Diagnostics.Trace"/>.</summary>
            <author>Hans Andersen</author>
            <version>$Revision: 1.4 $</version>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.TraceAppender.Log(System.String)">
            <summary> 
            Log a message
            </summary>
            <param name="msg"> message to log
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.Debug.TraceAppender.Log(System.Exception)">
            <summary> 
            Log a stack trace
            </summary>
            <param name="t"> throwable object
            </param>		
        </member>
        <member name="M:EnterpriseDT.Util.Debug.TraceAppender.Close">
            <summary> 
            Close this appender
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.License.LicenseConstants">
            <summary>  
            Useful constants
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.4 $
            </version>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.NUM_FLAGS">
            <summary> Number of flags</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.FLAGS_PER_DIGIT">
            <summary> Flags per digit</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.MIN_NAME_LENGTH">
            <summary> Minimum name length</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.DATE_LENGTH">
            <summary> length of date string</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseConstants.dateFormat">
            <summary> Date formatter </summary>
        </member>
        <member name="T:EnterpriseDT.Util.License.ProductNames">
            <summary>
            Handles converting between flags and product names
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.ProductNames.NET_PRO">
            <summary>Pro</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.ProductNames.NET_EXPRESS">
            <summary>Express name</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.ProductNames.NET_COMPACT">
            <summary>Express name</summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.ProductNames.GetProduct(System.Boolean[])">
            <summary>
            [true,true] => PRO
            [true,false] => Express
            [false,true] => Compact
            </summary>
            <param name="flags">flags to test</param>
            <returns>product</returns>
        </member>
        <member name="M:EnterpriseDT.Util.License.ProductNames.GetProductName(EnterpriseDT.Util.License.EdtProduct)">
            <summary>
            Get the corresponding product name
            </summary>
            <param name="product">product enum</param>
            <returns>product name</returns>
        </member>
        <member name="M:EnterpriseDT.Util.License.ProductNames.GetFlags(System.String,System.Boolean)">
            <summary>
            [true,true] => PRO
            [true,false] => Express
            [false,true] => Compact
            </summary>
            <param name="product">product name</param>
            <param name="isTrial">true if trial</param>
            <returns>boolean array</returns>
        </member>
        <member name="T:EnterpriseDT.Util.License.EDTLicenseException">
            <summary>  
            Indicates invalid license key or owner
            </summary>
            <author>       
            Bruce Blackshaw
            </author>
            <version>      
            $Revision: 1.3 $
            </version> 
        </member>
        <member name="F:EnterpriseDT.Util.License.EDTLicenseException.reason">
            <summary>
            Reason for exception
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.EDTLicenseException.#ctor(System.String)">
            <summary>   
            Constructor. Delegates to super.
            </summary>
            <param name="msg">  Message that the user will be
            able to retrieve
            </param>
        </member>
        <member name="M:EnterpriseDT.Util.License.EDTLicenseException.#ctor(System.String,System.Int32)">
            <summary>   
            Constructor. Delegates to super.
            </summary>
            <param name="msg">  Message that the user will be
            able to retrieve
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.License.EDTLicenseException.Reason">
            <summary>
            Reason for exception
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.License.LicenseProperties">
             <summary>  
             Manages application properties
            </summary>
             <author>       
             Bruce Blackshaw
             </author>
             <version>      
             $Revision: 1.25 $
             </version>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.OWNER">
            <summary> The name of the property storing the application name</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.PRODUCT">
            <summary> The name of the property storing the product name</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.LICENSE_KEY">
            <summary> Licence property</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.LICENSE_FILE">
            <summary>Name of output file for licenses generated</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.log">
            <summary>Logger</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.outputFormat">
            <summary> Date format</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.reader">
            <summary> Reads licences</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.key">
            <summary> Licence key</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.owner">
            <summary> Owner of software</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.product">
            <summary> Type of the product</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.isTrial">
            <summary> Is it a trial licence?</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.isTrialBuild">
            <summary> Is it a trial build?</summary>
        </member>
        <member name="F:EnterpriseDT.Util.License.LicenseProperties.expiryDate">
            <summary> Expiry date of licence</summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.ReadLicenseOwnerFromReg(System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.ReadLicenseKeyFromReg(System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.ReadLicenseDetailsFromReg(System.String,System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.WriteLicenseDetailsToRegistry(System.String,System.String,System.String)">
            <summary>
            INTERNAL USE ONLY.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.#ctor(System.String,System.String)">
            <summary>
            Loads the license key properties
            </summary>
            <param name="ownerStr">owner of license</param>
            <param name="keyStr">license key</param>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.CheckLicense(System.String,EnterpriseDT.Util.License.EdtProduct[])">
            <summary>
            Check to see if licensed for the supplied products
            </summary>
            <param name="requiredProduct"></param>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.GetTrialSettings">
            <summary>
            Read license settings from trial license file embedded in assembly. Don't
            overwrite existing values though.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseProperties.Main(System.String[])">
            <summary> 
            Test harness which examines the license and prints its properties
            </summary>
            <param name="args"> standard args
            </param>
        </member>
        <member name="P:EnterpriseDT.Util.License.LicenseProperties.Trial">
            <summary> 
            Is this a trial key?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.License.LicenseProperties.TrialBuild">
            <summary> 
            Is this a trial build?
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.License.LicenseProperties.ExpiryDate">
            <summary> 
            Get the license expiry date
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.License.LicenseProperties.ProductId">
            <summary>
            Get the type of product this license is for
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.License.LicenseReader">
            <summary>  
            Some useful licence key methods for extracting data from keys
            </summary>
            <author>       
            Hans Andersen
            </author>
            <version>      
            $Revision: 1.6 $
            </version>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegExpiryDateNew(System.String,System.String)">
            <summary>
            Returns the expiry date encoded into the given key
            </summary>
            <remarks>
            Returns the expiry date encoded into the given key, provided that
            the name matches the key. If the name doesn't match the key or
            if the key is invalid in some way, then an invalid date is returned.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegExpiryDateOld(System.String,System.String)">
            <summary>
            Returns the expiry date encoded into the given key
            </summary>
            <remarks>
            Returns the expiry date encoded into the given key, provided that
            the name matches the key. If the name doesn't match the key or
            if the key is invalid in some way, then an invalid date is returned.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegExpiryDate(System.String,System.String,System.Int32)">
            <summary>
            Returns the expiry date encoded into the given key
            </summary>
            <remarks>
            Returns the expiry date encoded into the given key, provided that
            the name matches the key. If the name doesn't match the key or
            if the key is invalid in some way, then an invalid date is returned.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegFlagsNew(System.String,System.String)">
            <summary> 
            Returns array of flags that have been registered with this name and key
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegFlagsOld(System.String,System.String)">
            <summary> 
            Returns array of flags that have been registered with this name and key
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.License.LicenseReader.CalcRegFlags(System.String,System.String,System.Int32)">
            <summary> 
            Returns array of flags that have been registered with this name and key
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks4Context">
            <summary>
            <c>Socks4Context</c> holds information about making SOCKS4 connections.
            </summary>
            <remarks>
            <para>
            At a minimum the following properties must be set:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>ProxyAddress</term>
            <description>Address to be used to connect to the proxy.</description>
            </item>
            <item>
            <term>ProxyPort</term>
            <description>Port to be used to connect to the proxy (defaults to 1080).</description>
            </item>
            <item>
            <term>UserName</term>
            <description>User-name to be used for validation on the proxy.</description>
            </item>
            </list>
            </para>
            <para>
            The following properties should be used in cases where problems establishing
            SOCKS connections are encountered:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>PublicProxyAddress</term>
            <description>Address that the proxy server presents to the "outside" network.</description>
            </item>
            <item>
            <term>UseClientNameResolution</term>
            <description>Use SOCKS4A feature of requesting that the proxy should resolve host-names.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.SocksContext">
            <summary>
            <c>SockContext</c> and its subclasses hold information about how SOCKS
            connections are made.
            </summary>
        </member>
        <member name="F:EnterpriseDT.Util.Socks.SocksContext.DEFAULT_PROXY_PORT">
            <summary>
            Default proxy port.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor(System.String)">
            <summary>
            Constructs a <c>SocksContext</c> setting the proxy-address.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a <c>SocksContext</c> setting the proxy-address and the proxy-port.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor(System.Net.IPAddress)">
            <summary>
            Constructs a <c>SocksContext</c> setting the proxy-address.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.SocksContext.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructs a <c>SocksContext</c> setting the proxy-address and the proxy-port.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.SocksContext.ProxyAddress">
            <summary>
            Address to be used to connect to the proxy.
            </summary>
            <remarks>
            Proxies often have more than one address.  This address should be the one
            that the client must use to connect to it.
            </remarks>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.SocksContext.ProxyPort">
            <summary>
            Port to be used to connect to the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.SocksContext.PublicProxyAddress">
            <summary>
            Address that the proxy server presents to the "outside" network.
            </summary>
            <remarks>
            <para>
            This is the address that systems that are being connected to through the proxy
            will see.
            </para>
            <para>
            SOCKS servers usually provide this address to the client as SOCKS connections
            to be made, so it's usually unnecessary to set this property.  In some instances 
            however, when the server does not provide this address it may be necessary to 
            set this property.
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.String,System.String)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address and user-name.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the user-name,
            and the flag controlling the way host-names are resolved.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
            <param name="useClientNameResolution">Controls use of SOCKS4A feature of requesting 
            that the proxy should resolve host-names.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the proxy-port, 
            and the user-name.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.String,System.Int32,System.String,System.Boolean)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the proxy-port, 
            the user-name, and the flag controlling the way host-names are resolved.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
            <param name="useClientNameResolution">Controls use of SOCKS4A feature of requesting 
            that the proxy should resolve host-names.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.Net.IPAddress,System.String,System.Boolean)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the user-name,
            and the flag controlling the way host-names are resolved.
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
            <param name="useClientNameResolution">Controls use of SOCKS4A feature of requesting 
            that the proxy should resolve host-names.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.#ctor(System.Net.IPAddress,System.Int32,System.String,System.Boolean)">
            <summary>
            Constructs a <c>Socks4Context</c> setting the proxy-address, the proxy-port, 
            the user-name, and the flag controlling the way host-names are resolved..
            </summary>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
            <param name="userName">User-name to be used for validation on the proxy.</param>
            <param name="useClientNameResolution">Controls use of SOCKS4A feature of requesting 
            that the proxy should resolve host-names.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks4Context.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>Returns a string representation of this object</returns>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks4Context.UserName">
            <summary>
            User-name to be used for validation on the proxy.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks4Context.UseClientNameResolution">
            <summary>
            Use SOCKS4A feature of requesting that the proxy should resolve host-names.
            </summary>
            <remarks>
            The SOCKS4 protocol requires host-names to be resolved on the client-side.
            In some cases this is not feasible, so SOCKS4A introduced an extension which
            allowed name-resolution to be performed on the proxy instead.  If this flag
            is set then the SOCKS4A extension will be employed thus preventing the 
            attempt to resolve host-names on the client.  The default is <c>false</c>.
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5Context">
            <summary>
            <c>Socks5Context</c> holds information about making SOCKS5 connections.
            </summary>
            <remarks>
            <para>
            At a minimum the following properties must be set:
            <list type="table">
            <listheader>
            <term>Property</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>ProxyAddress</term>
            <description>Address to be used to connect to the proxy.</description>
            </item>
            <item>
            <term>ProxyPort</term>
            <description>Defaults to 1080 - Port to be used to connect to the proxy.</description>
            </item>
            <item>
            <term>UserName</term>
            <description>User-name to be used for validation on the proxy.</description>
            </item>
            <item>
            <term>Authentication Methods</term>
            <description>At least one authentication method must be provided.</description>
            </item>
            </list>
            </para>
            <para>
            The SOCKS5 standard specifies three authentications methods.  Currently, GSSAPI
            is not supported.  If it is required please request it from EDT support.
            <list type="table">
            <listheader>
            <term>Authentication Method</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Null</term>
            <description>Performs no authentication.</description>
            </item>
            <item>
            <term>Username/Password</term>
            <description>Uses a plain-text user-name/password combination.</description>
            </item>
            <item>
            <term>GSSAPI</term>
            <description>(Currently not supported) Uses the Generic Security 
            Services Application Program Interface (GSS-API)
            to communicate with system-level security services (SSPI on Windows) to authenticate 
            the user.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor">
            <summary>
            Default constructor.
            </summary>
            <remarks>
            Before the context can be used, the proxy-address and one or more authentication 
            methods must be set using the <c>AuthMethods</c> property.
            </remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor(System.String)">
            <summary>
            Constructs a SOCKS5 context for the proxy with the given address.
            </summary>
            <remarks>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </remarks>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor(System.String,System.Int32)">
            <summary>
            Constructs a SOCKS5 context for the proxy with the given address and port.
            </summary>
            <remarks>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </remarks>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor(System.Net.IPAddress)">
            <summary>
            Constructs a SOCKS5 context for the proxy with the given address.
            </summary>
            <remarks>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </remarks>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Constructs a SOCKS5 context for the proxy with the given address.
            </summary>
            <remarks>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </remarks>
            <param name="proxyAddress">Address to be used to connect to the proxy.</param>
            <param name="proxyPort">Port on the proxy to connect to.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5Context.ToString">
            <summary>
            Returns a string representation of this object.
            </summary>
            <returns>Returns a string representation of this object</returns>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5Context.AuthMethods">
            <summary>
            Collection of authentication methods to be used.
            </summary>
            <remarks>
            <para>
            Before the context can be used, one or more authentication methods must
            be set using the <c>AuthMethods</c> property.
            </para>
            <para>
            The SOCKS5 standard specifies three authentications methods.  Currently, GSSAPI
            is not supported.  If it is required please request it from EDT support.
            <list type="table">
            <listheader>
            <term>Authentication Method</term>
            <description>Description</description>
            </listheader>
            <item>
            <term>Null</term>
            <description>Performs no authentication.</description>
            </item>
            <item>
            <term>Username/Password</term>
            <description>Uses a plain-text user-name/password combination.</description>
            </item>
            <item>
            <term>GSSAPI</term>
            <description>(Currently not supported) Uses the Generic Security 
            Services Application Program Interface (GSS-API)
            to communicate with system-level security services (SSPI on Windows) to authenticate 
            the user.</description>
            </item>
            </list>
            </para>
            </remarks>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5AuthMethod">
            <summary>
            Base class for SOCKS5 authentication methods.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5AuthMethod.Code">
            <summary>
            SOCKS5 code for this authentication method.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5NoAuthMethod">
            <summary>
            SOCKS5 authentication method which performs no authentication thereby validating
            any user.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5GssapiMethod">
            <summary>
            GSS-API authentication for SOCKS5 - NOT YET SUPPORTED.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5GssapiMethod.#ctor">
            <summary>
            NOT YET SUPPORTED.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod">
            <summary>
            Provides user-name/password authentication for SOCKS5.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.#ctor">
            <summary>
            Creates a SOCKS5 authentication method the no user-name and password.
            </summary>
            <remarks>The <see cref="P:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.UserName"/> and <see cref="P:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.Password"/> should be set
            prior to use.</remarks>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.#ctor(System.String,System.String)">
            <summary>
            Creates a SOCKS5 authentication method the given user-name and password.
            </summary>
            <param name="userName">Name of user.</param>
            <param name="password">Password</param>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.UserName">
            <summary>
            User-name of SOCKS5 account.
            </summary>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5UserNamePasswordAuthMethod.Password">
            <summary>
            Password of SOCKS5 account.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection">
            <summary>
            Collection of SOCKS5 authentication methods.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.Clear">
            <summary>
            Clears the collection.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.Add(EnterpriseDT.Util.Socks.Socks5AuthMethod)">
            <summary>
            Add a methods to the collection.
            </summary>
            <param name="authMethod">The method to add.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.Remove(EnterpriseDT.Util.Socks.Socks5AuthMethod)">
            <summary>
            Remove a method from the collection.
            </summary>
            <param name="authMethod">The method to remove.</param>
        </member>
        <member name="M:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.GetEnumerator">
            <summary>
            Returns an enumerator for the collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:EnterpriseDT.Util.Socks.Socks5AuthMethodCollection.Count">
            <summary>
            Number of methods in the collection.
            </summary>
        </member>
        <member name="T:EnterpriseDT.Util.Socks.SocksException">
            <summary>
            Indicates that a SOCKS communication error has occurred.
            </summary>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:EnterpriseDT.Net.Zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="P:EnterpriseDT.Net.Zlib.ZInputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Zlib.ZInputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Zlib.ZOutputStream.TotalIn">
            <summary> Returns the total number of bytes input so far.</summary>
        </member>
        <member name="P:EnterpriseDT.Net.Zlib.ZOutputStream.TotalOut">
            <summary> Returns the total number of bytes output so far.</summary>
        </member>
    </members>
</doc>
